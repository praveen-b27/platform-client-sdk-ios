//
// AnalyticsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AnalyticsAPI {
    
    /**
     Delete/cancel an async details job
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsConversationsDetailsJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete/cancel an async details job
     - DELETE /api/v2/analytics/conversations/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a scheduled report job.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsReportingSchedule(scheduleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsReportingScheduleWithRequestBuilder(scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a scheduled report job.
     - DELETE /api/v2/analytics/reporting/schedules/{scheduleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsReportingScheduleWithRequestBuilder(scheduleId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete/cancel an async request
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete/cancel an async request
     - DELETE /api/v2/analytics/users/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    public enum AskActionResults_getAnalyticsBotflowReportingturns: String { 
        case agentRequestedByUser = "AgentRequestedByUser"
        case confirmationRequired = "ConfirmationRequired"
        case disambiguationRequired = "DisambiguationRequired"
        case error = "Error"
        case expressionError = "ExpressionError"
        case noInputCollection = "NoInputCollection"
        case noInputConfirmation = "NoInputConfirmation"
        case noInputDisambiguation = "NoInputDisambiguation"
        case noMatchCollection = "NoMatchCollection"
        case noMatchConfirmation = "NoMatchConfirmation"
        case noMatchDisambiguation = "NoMatchDisambiguation"
        case successCollection = "SuccessCollection"
        case successConfirmationNo = "SuccessConfirmationNo"
        case successConfirmationYes = "SuccessConfirmationYes"
        case successDisambiguation = "SuccessDisambiguation"
        case successDisambiguationNone = "SuccessDisambiguationNone"
    }

    
    /**
     Get Reporting Turns.
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter actionId: (query) Optional action ID to get the reporting turns associated to a particular flow action (optional)
     - parameter sessionId: (query) Optional session ID to get the reporting turns for a particular session. Specifying a session ID alongside an action ID or a language or any ask action results is not allowed. (optional)
     - parameter language: (query) Optional language code to get the reporting turns for a particular language (optional)
     - parameter askActionResults: (query) Optional case-insensitive comma separated list of ask action results to filter the reporting turns. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsBotflowReportingturns(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, actionId: String? = nil, sessionId: String? = nil, language: String? = nil, askActionResults: AskActionResults_getAnalyticsBotflowReportingturns? = nil, completion: @escaping ((_ data: ReportingTurnsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsBotflowReportingturnsWithRequestBuilder(botFlowId: botFlowId, after: after, pageSize: pageSize, interval: interval, actionId: actionId, sessionId: sessionId, language: language, askActionResults: askActionResults)
        requestBuilder.execute { (response: Response<ReportingTurnsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Reporting Turns.
     - GET /api/v2/analytics/botflows/{botFlowId}/reportingturns
     - Returns the reporting turns grouped by session, in reverse chronological order from the date the session was created, with the reporting turns from the most recent session appearing at the start of the list. For pagination, clients should keep sending requests using the value of 'nextUri' in the response, until it's no longer present, only then have all items have been returned. Note: resources returned by this endpoint are not persisted indefinitely, as they are deleted after approximately, but not before, 10 days.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "botPrompts" : [ "botPrompts", "botPrompts" ],
    "userInput" : "userInput",
    "sessionId" : "sessionId",
    "askAction" : "{}",
    "askActionResult" : "SuccessCollection",
    "sessionEndDetails" : "{}",
    "intent" : "{}",
    "conversation" : "{}",
    "knowledge" : "{}"
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "botPrompts" : [ "botPrompts", "botPrompts" ],
    "userInput" : "userInput",
    "sessionId" : "sessionId",
    "askAction" : "{}",
    "askActionResult" : "SuccessCollection",
    "sessionEndDetails" : "{}",
    "intent" : "{}",
    "conversation" : "{}",
    "knowledge" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter actionId: (query) Optional action ID to get the reporting turns associated to a particular flow action (optional)
     - parameter sessionId: (query) Optional session ID to get the reporting turns for a particular session. Specifying a session ID alongside an action ID or a language or any ask action results is not allowed. (optional)
     - parameter language: (query) Optional language code to get the reporting turns for a particular language (optional)
     - parameter askActionResults: (query) Optional case-insensitive comma separated list of ask action results to filter the reporting turns. (optional)

     - returns: RequestBuilder<ReportingTurnsResponse> 
     */
    open class func getAnalyticsBotflowReportingturnsWithRequestBuilder(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, actionId: String? = nil, sessionId: String? = nil, language: String? = nil, askActionResults: AskActionResults_getAnalyticsBotflowReportingturns? = nil) -> RequestBuilder<ReportingTurnsResponse> {        
        var path = "/api/v2/analytics/botflows/{botFlowId}/reportingturns"
        let botFlowIdPreEscape = "\(botFlowId)"
        let botFlowIdPostEscape = botFlowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botFlowId}", with: botFlowIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize, 
            "interval": interval, 
            "actionId": actionId, 
            "sessionId": sessionId, 
            "language": language, 
            "askActionResults": askActionResults?.rawValue
        ])

        let requestBuilder: RequestBuilder<ReportingTurnsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum BotResultCategories_getAnalyticsBotflowSessions: String { 
        case unknown = "Unknown"
        case userExit = "UserExit"
        case botExit = "BotExit"
        case error = "Error"
        case recognitionFailure = "RecognitionFailure"
        case userDisconnect = "UserDisconnect"
        case botDisconnect = "BotDisconnect"
        case sessionExpired = "SessionExpired"
        case transfer = "Transfer"
    }

    
    
    /**
     Get Bot Flow Sessions.
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter botResultCategories: (query) Optional case-insensitive comma separated list of Bot Result Categories to filter sessions by. (optional)
     - parameter endLanguage: (query) Optional case-insensitive language code to filter sessions by the language the sessions ended in. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsBotflowSessions(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, botResultCategories: BotResultCategories_getAnalyticsBotflowSessions? = nil, endLanguage: String? = nil, completion: @escaping ((_ data: SessionsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsBotflowSessionsWithRequestBuilder(botFlowId: botFlowId, after: after, pageSize: pageSize, interval: interval, botResultCategories: botResultCategories, endLanguage: endLanguage)
        requestBuilder.execute { (response: Response<SessionsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Bot Flow Sessions.
     - GET /api/v2/analytics/botflows/{botFlowId}/sessions
     - Returns the bot flow sessions in reverse chronological order from the date they were created. For pagination, clients should keep sending requests using the value of 'nextUri' in the response, until it's no longer present, only then have all items have been returned. Note: resources returned by this endpoint are not persisted indefinitely, as they are deleted after approximately, but not before, 10 days.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "endLanguage" : "endLanguage",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "channel" : "{}",
    "language" : "language",
    "id" : "id",
    "flow" : "{}",
    "botResult" : "Unknown",
    "botResultCategory" : "Unknown",
    "conversation" : "{}"
  }, {
    "endLanguage" : "endLanguage",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "channel" : "{}",
    "language" : "language",
    "id" : "id",
    "flow" : "{}",
    "botResult" : "Unknown",
    "botResultCategory" : "Unknown",
    "conversation" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter botFlowId: (path) ID of the bot flow. 
     - parameter after: (query) The cursor that points to the ID of the last item in the list of entities that has been returned. (optional)
     - parameter pageSize: (query) Max number of entities to return. Maximum of 250 (optional)
     - parameter interval: (query) Date range filter based on the date the individual resources were completed. UTC is the default if no TZ is supplied, however alternate timezones can be used e.g: &#39;2022-11-22T09:11:11.111+08:00/2022-11-30T07:17:44.586-07&#39;. . Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter botResultCategories: (query) Optional case-insensitive comma separated list of Bot Result Categories to filter sessions by. (optional)
     - parameter endLanguage: (query) Optional case-insensitive language code to filter sessions by the language the sessions ended in. (optional)

     - returns: RequestBuilder<SessionsResponse> 
     */
    open class func getAnalyticsBotflowSessionsWithRequestBuilder(botFlowId: String, after: String? = nil, pageSize: String? = nil, interval: String? = nil, botResultCategories: BotResultCategories_getAnalyticsBotflowSessions? = nil, endLanguage: String? = nil) -> RequestBuilder<SessionsResponse> {        
        var path = "/api/v2/analytics/botflows/{botFlowId}/sessions"
        let botFlowIdPreEscape = "\(botFlowId)"
        let botFlowIdPostEscape = botFlowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{botFlowId}", with: botFlowIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "pageSize": pageSize, 
            "interval": interval, 
            "botResultCategories": botResultCategories?.rawValue, 
            "endLanguage": endLanguage
        ])

        let requestBuilder: RequestBuilder<SessionsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a conversation by id
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationDetails(conversationId: String, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributes?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationDetailsWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributes>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a conversation by id
     - GET /api/v2/analytics/conversations/{conversationId}/details
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversationStart" : "2000-01-23T04:56:07.000+00:00",
  "mediaStatsMinConversationMos" : 0.8008281904610115,
  "evaluations" : [ {
    "formId" : "formId",
    "queueId" : "queueId",
    "oTotalScore" : 5,
    "oTotalCriticalScore" : 1,
    "contextId" : "contextId",
    "assigneeId" : "assigneeId",
    "userId" : "userId",
    "evaluationId" : "evaluationId",
    "assigneeApplicable" : true,
    "deleted" : true,
    "formName" : "formName",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "rescored" : true,
    "calibrationId" : "calibrationId",
    "evaluationStatus" : "Finished",
    "evaluatorId" : "evaluatorId",
    "released" : true
  }, {
    "formId" : "formId",
    "queueId" : "queueId",
    "oTotalScore" : 5,
    "oTotalCriticalScore" : 1,
    "contextId" : "contextId",
    "assigneeId" : "assigneeId",
    "userId" : "userId",
    "evaluationId" : "evaluationId",
    "assigneeApplicable" : true,
    "deleted" : true,
    "formName" : "formName",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "rescored" : true,
    "calibrationId" : "calibrationId",
    "evaluationStatus" : "Finished",
    "evaluatorId" : "evaluatorId",
    "released" : true
  } ],
  "conversationInitiator" : "acd",
  "conversationId" : "conversationId",
  "surveys" : [ {
    "queueId" : "queueId",
    "surveyStatus" : "surveyStatus",
    "oSurveyTotalScore" : 2,
    "surveyId" : "surveyId",
    "surveyFormName" : "surveyFormName",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "surveyFormId" : "surveyFormId",
    "surveyFormContextId" : "surveyFormContextId",
    "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
    "surveyPromoterScore" : 5,
    "userId" : "userId"
  }, {
    "queueId" : "queueId",
    "surveyStatus" : "surveyStatus",
    "oSurveyTotalScore" : 2,
    "surveyId" : "surveyId",
    "surveyFormName" : "surveyFormName",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "surveyFormId" : "surveyFormId",
    "surveyFormContextId" : "surveyFormContextId",
    "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
    "surveyPromoterScore" : 5,
    "userId" : "userId"
  } ],
  "externalTag" : "externalTag",
  "resolutions" : [ {
    "queueId" : "queueId",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "nNextContactAvoided" : 7,
    "userId" : "userId"
  }, {
    "queueId" : "queueId",
    "eventTime" : "2000-01-23T04:56:07.000+00:00",
    "nNextContactAvoided" : 7,
    "userId" : "userId"
  } ],
  "originatingDirection" : "inbound",
  "divisionIds" : [ "divisionIds", "divisionIds" ],
  "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
  "mediaStatsMinConversationRFactor" : 6.027456183070403,
  "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
  "customerParticipation" : true,
  "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
  "selfServed" : true,
  "participants" : [ {
    "participantId" : "participantId",
    "sessions" : [ {
      "authenticated" : true,
      "usedRouting" : "Bullseye",
      "cobrowseRole" : "cobrowseRole",
      "monitoredParticipantId" : "monitoredParticipantId",
      "videoAddressSelf" : "videoAddressSelf",
      "agentOwned" : true,
      "waitingInteractionCounts" : [ 1, 1 ],
      "proposedAgents" : [ {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      }, {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      } ],
      "addressSelf" : "addressSelf",
      "skipEnabled" : true,
      "journeyActionMapId" : "journeyActionMapId",
      "remote" : "remote",
      "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
      "roomId" : "roomId",
      "messageType" : "messageType",
      "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
      "routingRule" : "routingRule",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "mediaCount" : 4,
      "dnis" : "dnis",
      "videoRoomId" : "videoRoomId",
      "flow" : "{}",
      "dispositionAnalyzer" : "dispositionAnalyzer",
      "addressOther" : "addressOther",
      "cobrowseRoomId" : "cobrowseRoomId",
      "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
      "protocolCallId" : "protocolCallId",
      "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
      "flowOutType" : "flowOutType",
      "mediaType" : "callback",
      "outboundCampaignId" : "outboundCampaignId",
      "addressTo" : "addressTo",
      "edgeId" : "edgeId",
      "timeoutSeconds" : 1,
      "metrics" : [ {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      }, {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      } ],
      "bargedParticipantId" : "bargedParticipantId",
      "cleared" : true,
      "journeyActionMapVersion" : 2,
      "mediaBridgeId" : "mediaBridgeId",
      "routingRuleType" : "Bullseye",
      "agentAssistantId" : "agentAssistantId",
      "deliveryStatus" : "DeliveryFailed",
      "screenShareRoomId" : "screenShareRoomId",
      "assignerId" : "assignerId",
      "outboundContactId" : "outboundContactId",
      "peerId" : "peerId",
      "remoteNameDisplayable" : "remoteNameDisplayable",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
      "bcc" : [ "bcc", "bcc" ],
      "agentBullseyeRing" : 9,
      "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
      "recording" : true,
      "screenShareAddressSelf" : "screenShareAddressSelf",
      "sharingScreen" : true,
      "sessionDnis" : "sessionDnis",
      "segments" : [ {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      }, {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
      "extendedDeliveryStatus" : "extendedDeliveryStatus",
      "agentGroups" : [ {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      }, {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      } ],
      "provider" : "provider",
      "journeyCustomerIdType" : "journeyCustomerIdType",
      "journeyCustomerId" : "journeyCustomerId",
      "callbackUserName" : "callbackUserName",
      "addressFrom" : "addressFrom",
      "flowInType" : "flowInType",
      "ani" : "ani",
      "direction" : "inbound",
      "cc" : [ "cc", "cc" ],
      "routingRing" : 7,
      "journeyCustomerSessionId" : "journeyCustomerSessionId",
      "sessionId" : "sessionId",
      "journeyActionId" : "journeyActionId",
      "eligibleAgentCounts" : [ 3, 3 ],
      "dispositionName" : "dispositionName",
      "scriptId" : "scriptId",
      "selectedAgentId" : "selectedAgentId",
      "coachedParticipantId" : "coachedParticipantId",
      "acwSkipped" : true,
      "mediaEndpointStats" : [ {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      }, {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      } ],
      "selectedAgentRank" : 1,
      "outboundContactListId" : "outboundContactListId"
    }, {
      "authenticated" : true,
      "usedRouting" : "Bullseye",
      "cobrowseRole" : "cobrowseRole",
      "monitoredParticipantId" : "monitoredParticipantId",
      "videoAddressSelf" : "videoAddressSelf",
      "agentOwned" : true,
      "waitingInteractionCounts" : [ 1, 1 ],
      "proposedAgents" : [ {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      }, {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      } ],
      "addressSelf" : "addressSelf",
      "skipEnabled" : true,
      "journeyActionMapId" : "journeyActionMapId",
      "remote" : "remote",
      "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
      "roomId" : "roomId",
      "messageType" : "messageType",
      "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
      "routingRule" : "routingRule",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "mediaCount" : 4,
      "dnis" : "dnis",
      "videoRoomId" : "videoRoomId",
      "flow" : "{}",
      "dispositionAnalyzer" : "dispositionAnalyzer",
      "addressOther" : "addressOther",
      "cobrowseRoomId" : "cobrowseRoomId",
      "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
      "protocolCallId" : "protocolCallId",
      "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
      "flowOutType" : "flowOutType",
      "mediaType" : "callback",
      "outboundCampaignId" : "outboundCampaignId",
      "addressTo" : "addressTo",
      "edgeId" : "edgeId",
      "timeoutSeconds" : 1,
      "metrics" : [ {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      }, {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      } ],
      "bargedParticipantId" : "bargedParticipantId",
      "cleared" : true,
      "journeyActionMapVersion" : 2,
      "mediaBridgeId" : "mediaBridgeId",
      "routingRuleType" : "Bullseye",
      "agentAssistantId" : "agentAssistantId",
      "deliveryStatus" : "DeliveryFailed",
      "screenShareRoomId" : "screenShareRoomId",
      "assignerId" : "assignerId",
      "outboundContactId" : "outboundContactId",
      "peerId" : "peerId",
      "remoteNameDisplayable" : "remoteNameDisplayable",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
      "bcc" : [ "bcc", "bcc" ],
      "agentBullseyeRing" : 9,
      "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
      "recording" : true,
      "screenShareAddressSelf" : "screenShareAddressSelf",
      "sharingScreen" : true,
      "sessionDnis" : "sessionDnis",
      "segments" : [ {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      }, {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
      "extendedDeliveryStatus" : "extendedDeliveryStatus",
      "agentGroups" : [ {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      }, {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      } ],
      "provider" : "provider",
      "journeyCustomerIdType" : "journeyCustomerIdType",
      "journeyCustomerId" : "journeyCustomerId",
      "callbackUserName" : "callbackUserName",
      "addressFrom" : "addressFrom",
      "flowInType" : "flowInType",
      "ani" : "ani",
      "direction" : "inbound",
      "cc" : [ "cc", "cc" ],
      "routingRing" : 7,
      "journeyCustomerSessionId" : "journeyCustomerSessionId",
      "sessionId" : "sessionId",
      "journeyActionId" : "journeyActionId",
      "eligibleAgentCounts" : [ 3, 3 ],
      "dispositionName" : "dispositionName",
      "scriptId" : "scriptId",
      "selectedAgentId" : "selectedAgentId",
      "coachedParticipantId" : "coachedParticipantId",
      "acwSkipped" : true,
      "mediaEndpointStats" : [ {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      }, {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      } ],
      "selectedAgentRank" : 1,
      "outboundContactListId" : "outboundContactListId"
    } ],
    "externalContactId" : "externalContactId",
    "purpose" : "acd",
    "teamId" : "teamId",
    "externalOrganizationId" : "externalOrganizationId",
    "participantName" : "participantName",
    "flaggedReason" : "general",
    "userId" : "userId"
  }, {
    "participantId" : "participantId",
    "sessions" : [ {
      "authenticated" : true,
      "usedRouting" : "Bullseye",
      "cobrowseRole" : "cobrowseRole",
      "monitoredParticipantId" : "monitoredParticipantId",
      "videoAddressSelf" : "videoAddressSelf",
      "agentOwned" : true,
      "waitingInteractionCounts" : [ 1, 1 ],
      "proposedAgents" : [ {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      }, {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      } ],
      "addressSelf" : "addressSelf",
      "skipEnabled" : true,
      "journeyActionMapId" : "journeyActionMapId",
      "remote" : "remote",
      "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
      "roomId" : "roomId",
      "messageType" : "messageType",
      "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
      "routingRule" : "routingRule",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "mediaCount" : 4,
      "dnis" : "dnis",
      "videoRoomId" : "videoRoomId",
      "flow" : "{}",
      "dispositionAnalyzer" : "dispositionAnalyzer",
      "addressOther" : "addressOther",
      "cobrowseRoomId" : "cobrowseRoomId",
      "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
      "protocolCallId" : "protocolCallId",
      "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
      "flowOutType" : "flowOutType",
      "mediaType" : "callback",
      "outboundCampaignId" : "outboundCampaignId",
      "addressTo" : "addressTo",
      "edgeId" : "edgeId",
      "timeoutSeconds" : 1,
      "metrics" : [ {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      }, {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      } ],
      "bargedParticipantId" : "bargedParticipantId",
      "cleared" : true,
      "journeyActionMapVersion" : 2,
      "mediaBridgeId" : "mediaBridgeId",
      "routingRuleType" : "Bullseye",
      "agentAssistantId" : "agentAssistantId",
      "deliveryStatus" : "DeliveryFailed",
      "screenShareRoomId" : "screenShareRoomId",
      "assignerId" : "assignerId",
      "outboundContactId" : "outboundContactId",
      "peerId" : "peerId",
      "remoteNameDisplayable" : "remoteNameDisplayable",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
      "bcc" : [ "bcc", "bcc" ],
      "agentBullseyeRing" : 9,
      "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
      "recording" : true,
      "screenShareAddressSelf" : "screenShareAddressSelf",
      "sharingScreen" : true,
      "sessionDnis" : "sessionDnis",
      "segments" : [ {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      }, {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
      "extendedDeliveryStatus" : "extendedDeliveryStatus",
      "agentGroups" : [ {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      }, {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      } ],
      "provider" : "provider",
      "journeyCustomerIdType" : "journeyCustomerIdType",
      "journeyCustomerId" : "journeyCustomerId",
      "callbackUserName" : "callbackUserName",
      "addressFrom" : "addressFrom",
      "flowInType" : "flowInType",
      "ani" : "ani",
      "direction" : "inbound",
      "cc" : [ "cc", "cc" ],
      "routingRing" : 7,
      "journeyCustomerSessionId" : "journeyCustomerSessionId",
      "sessionId" : "sessionId",
      "journeyActionId" : "journeyActionId",
      "eligibleAgentCounts" : [ 3, 3 ],
      "dispositionName" : "dispositionName",
      "scriptId" : "scriptId",
      "selectedAgentId" : "selectedAgentId",
      "coachedParticipantId" : "coachedParticipantId",
      "acwSkipped" : true,
      "mediaEndpointStats" : [ {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      }, {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      } ],
      "selectedAgentRank" : 1,
      "outboundContactListId" : "outboundContactListId"
    }, {
      "authenticated" : true,
      "usedRouting" : "Bullseye",
      "cobrowseRole" : "cobrowseRole",
      "monitoredParticipantId" : "monitoredParticipantId",
      "videoAddressSelf" : "videoAddressSelf",
      "agentOwned" : true,
      "waitingInteractionCounts" : [ 1, 1 ],
      "proposedAgents" : [ {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      }, {
        "proposedAgentId" : "proposedAgentId",
        "agentRank" : 6
      } ],
      "addressSelf" : "addressSelf",
      "skipEnabled" : true,
      "journeyActionMapId" : "journeyActionMapId",
      "remote" : "remote",
      "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
      "roomId" : "roomId",
      "messageType" : "messageType",
      "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
      "routingRule" : "routingRule",
      "requestedRoutings" : [ "Bullseye", "Bullseye" ],
      "mediaCount" : 4,
      "dnis" : "dnis",
      "videoRoomId" : "videoRoomId",
      "flow" : "{}",
      "dispositionAnalyzer" : "dispositionAnalyzer",
      "addressOther" : "addressOther",
      "cobrowseRoomId" : "cobrowseRoomId",
      "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
      "protocolCallId" : "protocolCallId",
      "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
      "flowOutType" : "flowOutType",
      "mediaType" : "callback",
      "outboundCampaignId" : "outboundCampaignId",
      "addressTo" : "addressTo",
      "edgeId" : "edgeId",
      "timeoutSeconds" : 1,
      "metrics" : [ {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      }, {
        "name" : "name",
        "emitDate" : "2000-01-23T04:56:07.000+00:00",
        "value" : 6
      } ],
      "bargedParticipantId" : "bargedParticipantId",
      "cleared" : true,
      "journeyActionMapVersion" : 2,
      "mediaBridgeId" : "mediaBridgeId",
      "routingRuleType" : "Bullseye",
      "agentAssistantId" : "agentAssistantId",
      "deliveryStatus" : "DeliveryFailed",
      "screenShareRoomId" : "screenShareRoomId",
      "assignerId" : "assignerId",
      "outboundContactId" : "outboundContactId",
      "peerId" : "peerId",
      "remoteNameDisplayable" : "remoteNameDisplayable",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
      "bcc" : [ "bcc", "bcc" ],
      "agentBullseyeRing" : 9,
      "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
      "recording" : true,
      "screenShareAddressSelf" : "screenShareAddressSelf",
      "sharingScreen" : true,
      "sessionDnis" : "sessionDnis",
      "segments" : [ {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      }, {
        "queueId" : "queueId",
        "conference" : true,
        "subject" : "subject",
        "groupId" : "groupId",
        "sourceConversationId" : "sourceConversationId",
        "errorCode" : "errorCode",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
        "wrapUpNote" : "wrapUpNote",
        "destinationSessionId" : "destinationSessionId",
        "disconnectType" : "client",
        "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
        "segmentStart" : "2000-01-23T04:56:07.000+00:00",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "videoMuted" : true,
        "audioMuted" : true,
        "q850ResponseCodes" : [ 3, 3 ],
        "wrapUpCode" : "wrapUpCode",
        "destinationConversationId" : "destinationConversationId",
        "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
        "sourceSessionId" : "sourceSessionId",
        "sipResponseCodes" : [ 6, 6 ],
        "requestedLanguageId" : "requestedLanguageId",
        "segmentType" : "alert",
        "properties" : [ {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        }, {
          "propertyType" : "bool",
          "property" : "property",
          "value" : "value"
        } ]
      } ],
      "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
      "extendedDeliveryStatus" : "extendedDeliveryStatus",
      "agentGroups" : [ {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      }, {
        "agentGroupType" : "Group",
        "agentGroupId" : "agentGroupId"
      } ],
      "provider" : "provider",
      "journeyCustomerIdType" : "journeyCustomerIdType",
      "journeyCustomerId" : "journeyCustomerId",
      "callbackUserName" : "callbackUserName",
      "addressFrom" : "addressFrom",
      "flowInType" : "flowInType",
      "ani" : "ani",
      "direction" : "inbound",
      "cc" : [ "cc", "cc" ],
      "routingRing" : 7,
      "journeyCustomerSessionId" : "journeyCustomerSessionId",
      "sessionId" : "sessionId",
      "journeyActionId" : "journeyActionId",
      "eligibleAgentCounts" : [ 3, 3 ],
      "dispositionName" : "dispositionName",
      "scriptId" : "scriptId",
      "selectedAgentId" : "selectedAgentId",
      "coachedParticipantId" : "coachedParticipantId",
      "acwSkipped" : true,
      "mediaEndpointStats" : [ {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      }, {
        "minRFactor" : 9.369310271410669,
        "underrunPackets" : 9,
        "overrunPackets" : 6,
        "maxLatencyMs" : 5,
        "minMos" : 9.965781217890562,
        "codecs" : [ "codecs", "codecs" ],
        "eventTime" : "2000-01-23T04:56:07.000+00:00",
        "receivedPackets" : 8,
        "duplicatePackets" : 1,
        "invalidPackets" : 4,
        "discardedPackets" : 7
      } ],
      "selectedAgentRank" : 1,
      "outboundContactListId" : "outboundContactListId"
    } ],
    "externalContactId" : "externalContactId",
    "purpose" : "acd",
    "teamId" : "teamId",
    "externalOrganizationId" : "externalOrganizationId",
    "participantName" : "participantName",
    "flaggedReason" : "general",
    "userId" : "userId"
  } ]
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributes> 
     */
    open class func getAnalyticsConversationDetailsWithRequestBuilder(conversationId: String) -> RequestBuilder<AnalyticsConversationWithoutAttributes> {        
        var path = "/api/v2/analytics/conversations/{conversationId}/details"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributes>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Gets multiple conversations by id
     
     - parameter _id: (query) Comma-separated conversation ids (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetails(_id: [String]? = nil, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributesMultiGetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsWithRequestBuilder(_id: _id)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributesMultiGetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Gets multiple conversations by id
     - GET /api/v2/analytics/conversations/details
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  }, {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter _id: (query) Comma-separated conversation ids (optional)

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> 
     */
    open class func getAnalyticsConversationsDetailsWithRequestBuilder(_id: [String]? = nil) -> RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> {        
        let path = "/api/v2/analytics/conversations/details"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id
        ])

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get status for async query for conversation details
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get status for async query for conversation details
     - GET /api/v2/analytics/conversations/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "errorMessage",
  "submissionDate" : "2000-01-23T04:56:07.000+00:00",
  "completionDate" : "2000-01-23T04:56:07.000+00:00",
  "state" : "QUEUED",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getAnalyticsConversationsDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {        
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Fetch a page of results for an async details job
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJobResults(jobId: String, cursor: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AnalyticsConversationAsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AnalyticsConversationAsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a page of results for an async details job
     - GET /api/v2/analytics/conversations/details/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "cursor",
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00",
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "attributes" : {
        "key" : "attributes"
      },
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "attributes" : {
        "key" : "attributes"
      },
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  }, {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "attributes" : {
        "key" : "attributes"
      },
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "attributes" : {
        "key" : "attributes"
      },
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)

     - returns: RequestBuilder<AnalyticsConversationAsyncQueryResponse> 
     */
    open class func getAnalyticsConversationsDetailsJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil, pageSize: Int? = nil) -> RequestBuilder<AnalyticsConversationAsyncQueryResponse> {        
        var path = "/api/v2/analytics/conversations/details/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "cursor": cursor, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AnalyticsConversationAsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Lookup the datalake availability date and time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsConversationsDetailsJobsAvailability(completion: @escaping ((_ data: DataAvailabilityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsConversationsDetailsJobsAvailabilityWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataAvailabilityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Lookup the datalake availability date and time
     - GET /api/v2/analytics/conversations/details/jobs/availability
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]

     - returns: RequestBuilder<DataAvailabilityResponse> 
     */
    open class func getAnalyticsConversationsDetailsJobsAvailabilityWithRequestBuilder() -> RequestBuilder<DataAvailabilityResponse> {        
        let path = "/api/v2/analytics/conversations/details/jobs/availability"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataAvailabilityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get analytics data retention setting
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsDataretentionSettings(completion: @escaping ((_ data: AnalyticsDataRetentionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsDataretentionSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<AnalyticsDataRetentionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get analytics data retention setting
     - GET /api/v2/analytics/dataretention/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "retentionDays" : 0,
  "dateModified" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]

     - returns: RequestBuilder<AnalyticsDataRetentionResponse> 
     */
    open class func getAnalyticsDataretentionSettingsWithRequestBuilder() -> RequestBuilder<AnalyticsDataRetentionResponse> {        
        let path = "/api/v2/analytics/dataretention/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsDataRetentionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get all view export requests for a user
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingExports(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ReportingExportJobListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingExportsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<ReportingExportJobListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all view export requests for a user
     - GET /api/v2/analytics/reporting/exports
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "pageCount" : 2,
  "pageNumber" : 5,
  "entities" : [ {
    "hasSummaryRow" : true,
    "downloadUrl" : "downloadUrl",
    "createdDateTime" : "2000-01-23T04:56:07.000+00:00",
    "hasSplitByMedia" : true,
    "locale" : "locale",
    "excludeEmptyRows" : true,
    "exportErrorMessagesType" : "FAILED_CONVERTING_EXPORT_JOB",
    "enabled" : true,
    "exportAllowedToRerun" : true,
    "modifiedDateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "includeDurationFormatInHeader" : true,
    "hasFormatDurations" : true,
    "durationFormat" : "Seconds",
    "period" : "period",
    "read" : true,
    "selfUri" : "https://openapi-generator.tech",
    "timeZone" : "timeZone",
    "csvDelimiter" : "SEMICOLON",
    "filter" : "{}",
    "selectedColumns" : [ {
      "columnOrder" : 6,
      "columnName" : "columnName"
    }, {
      "columnOrder" : 6,
      "columnName" : "columnName"
    } ],
    "emailStatuses" : {
      "key" : "Sent"
    },
    "emailErrorDescription" : "emailErrorDescription",
    "percentageComplete" : 0.8008281904610115,
    "hasSplitFilters" : true,
    "name" : "name",
    "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
    "interval" : "interval",
    "runId" : "runId",
    "hasCustomParticipantAttributes" : true,
    "recipientEmails" : [ "recipientEmails", "recipientEmails" ],
    "exportFormat" : "CSV",
    "status" : "SUBMITTED"
  }, {
    "hasSummaryRow" : true,
    "downloadUrl" : "downloadUrl",
    "createdDateTime" : "2000-01-23T04:56:07.000+00:00",
    "hasSplitByMedia" : true,
    "locale" : "locale",
    "excludeEmptyRows" : true,
    "exportErrorMessagesType" : "FAILED_CONVERTING_EXPORT_JOB",
    "enabled" : true,
    "exportAllowedToRerun" : true,
    "modifiedDateTime" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "includeDurationFormatInHeader" : true,
    "hasFormatDurations" : true,
    "durationFormat" : "Seconds",
    "period" : "period",
    "read" : true,
    "selfUri" : "https://openapi-generator.tech",
    "timeZone" : "timeZone",
    "csvDelimiter" : "SEMICOLON",
    "filter" : "{}",
    "selectedColumns" : [ {
      "columnOrder" : 6,
      "columnName" : "columnName"
    }, {
      "columnOrder" : 6,
      "columnName" : "columnName"
    } ],
    "emailStatuses" : {
      "key" : "Sent"
    },
    "emailErrorDescription" : "emailErrorDescription",
    "percentageComplete" : 0.8008281904610115,
    "hasSplitFilters" : true,
    "name" : "name",
    "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
    "interval" : "interval",
    "runId" : "runId",
    "hasCustomParticipantAttributes" : true,
    "recipientEmails" : [ "recipientEmails", "recipientEmails" ],
    "exportFormat" : "CSV",
    "status" : "SUBMITTED"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 1,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<ReportingExportJobListing> 
     */
    open class func getAnalyticsReportingExportsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ReportingExportJobListing> {        
        let path = "/api/v2/analytics/reporting/exports"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ReportingExportJobListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get all export metadata
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingExportsMetadata(completion: @escaping ((_ data: ReportingExportMetadataJobListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingExportsMetadataWithRequestBuilder()
        requestBuilder.execute { (response: Response<ReportingExportMetadataJobListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all export metadata
     - GET /api/v2/analytics/reporting/exports/metadata
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "requiredFilters" : [ "requiredFilters", "requiredFilters" ],
    "supportedFilters" : [ "supportedFilters", "supportedFilters" ],
    "requiredColumnIds" : [ "requiredColumnIds", "requiredColumnIds" ],
    "availableColumnIds" : [ "availableColumnIds", "availableColumnIds" ],
    "dependentColumnIds" : {
      "key" : [ "dependentColumnIds", "dependentColumnIds" ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
    "id" : "id",
    "dateLimitations" : "dateLimitations"
  }, {
    "requiredFilters" : [ "requiredFilters", "requiredFilters" ],
    "supportedFilters" : [ "supportedFilters", "supportedFilters" ],
    "requiredColumnIds" : [ "requiredColumnIds", "requiredColumnIds" ],
    "availableColumnIds" : [ "availableColumnIds", "availableColumnIds" ],
    "dependentColumnIds" : {
      "key" : [ "dependentColumnIds", "dependentColumnIds" ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
    "id" : "id",
    "dateLimitations" : "dateLimitations"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<ReportingExportMetadataJobListing> 
     */
    open class func getAnalyticsReportingExportsMetadataWithRequestBuilder() -> RequestBuilder<ReportingExportMetadataJobListing> {        
        let path = "/api/v2/analytics/reporting/exports/metadata"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportingExportMetadataJobListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Get list of reporting metadata.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter locale: (query) Locale (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingMetadata(pageNumber: Int? = nil, pageSize: Int? = nil, locale: String? = nil, completion: @escaping ((_ data: ReportMetaDataEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingMetadataWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, locale: locale)
        requestBuilder.execute { (response: Response<ReportMetaDataEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of reporting metadata.
     - GET /api/v2/analytics/reporting/metadata
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "exampleUrl" : "exampleUrl",
    "keywords" : [ "keywords", "keywords" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "title" : "title",
    "parameters" : [ {
      "parameterType" : "UUID",
      "domain" : "USERID",
      "name" : "name",
      "required" : true
    }, {
      "parameterType" : "UUID",
      "domain" : "USERID",
      "name" : "name",
      "required" : true
    } ],
    "availableLocales" : [ "availableLocales", "availableLocales" ]
  }, {
    "exampleUrl" : "exampleUrl",
    "keywords" : [ "keywords", "keywords" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "title" : "title",
    "parameters" : [ {
      "parameterType" : "UUID",
      "domain" : "USERID",
      "name" : "name",
      "required" : true
    }, {
      "parameterType" : "UUID",
      "domain" : "USERID",
      "name" : "name",
      "required" : true
    } ],
    "availableLocales" : [ "availableLocales", "availableLocales" ]
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter locale: (query) Locale (optional)

     - returns: RequestBuilder<ReportMetaDataEntityListing> 
     */
    open class func getAnalyticsReportingMetadataWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, locale: String? = nil) -> RequestBuilder<ReportMetaDataEntityListing> {        
        let path = "/api/v2/analytics/reporting/metadata"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "locale": locale
        ])

        let requestBuilder: RequestBuilder<ReportMetaDataEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a reporting metadata.
     
     - parameter reportId: (path) Report ID 
     - parameter locale: (query) Locale (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingReportIdMetadata(reportId: String, locale: String? = nil, completion: @escaping ((_ data: ReportMetaData?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingReportIdMetadataWithRequestBuilder(reportId: reportId, locale: locale)
        requestBuilder.execute { (response: Response<ReportMetaData>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a reporting metadata.
     - GET /api/v2/analytics/reporting/{reportId}/metadata
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "exampleUrl" : "exampleUrl",
  "keywords" : [ "keywords", "keywords" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "id" : "id",
  "title" : "title",
  "parameters" : [ {
    "parameterType" : "UUID",
    "domain" : "USERID",
    "name" : "name",
    "required" : true
  }, {
    "parameterType" : "UUID",
    "domain" : "USERID",
    "name" : "name",
    "required" : true
  } ],
  "availableLocales" : [ "availableLocales", "availableLocales" ]
}, statusCode=200}]
     
     - parameter reportId: (path) Report ID 
     - parameter locale: (query) Locale (optional)

     - returns: RequestBuilder<ReportMetaData> 
     */
    open class func getAnalyticsReportingReportIdMetadataWithRequestBuilder(reportId: String, locale: String? = nil) -> RequestBuilder<ReportMetaData> {        
        var path = "/api/v2/analytics/reporting/{reportId}/metadata"
        let reportIdPreEscape = "\(reportId)"
        let reportIdPostEscape = reportIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{reportId}", with: reportIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "locale": locale
        ])

        let requestBuilder: RequestBuilder<ReportMetaData>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get a list of report formats
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingReportformats(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingReportformatsWithRequestBuilder()
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of report formats
     - GET /api/v2/analytics/reporting/reportformats
     - Get a list of report formats.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example="", statusCode=200}]

     - returns: RequestBuilder<[String]> 
     */
    open class func getAnalyticsReportingReportformatsWithRequestBuilder() -> RequestBuilder<[String]> {        
        let path = "/api/v2/analytics/reporting/reportformats"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a scheduled report job.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingSchedule(scheduleId: String, completion: @escaping ((_ data: ReportSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingScheduleWithRequestBuilder(scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<ReportSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a scheduled report job.
     - GET /api/v2/analytics/reporting/schedules/{scheduleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "quartzCronExpression" : "quartzCronExpression",
  "reportId" : "reportId",
  "lastRun" : {
    "reportId" : "reportId",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "errorMessage" : "errorMessage",
    "runDurationMsec" : 0,
    "reportFormat" : "reportFormat",
    "id" : "id",
    "runTime" : "2000-01-23T04:56:07.000+00:00",
    "reportUrl" : "reportUrl",
    "scheduleUri" : "https://openapi-generator.tech",
    "runStatus" : "RUNNING"
  },
  "selfUri" : "https://openapi-generator.tech",
  "nextFireTime" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "timeZone" : "timeZone",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reportFormat" : "reportFormat",
  "locale" : "locale",
  "enabled" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "timePeriod" : "timePeriod",
  "interval" : "interval",
  "id" : "id",
  "parameters" : {
    "key" : "{}"
  }
}, statusCode=200}]
     
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<ReportSchedule> 
     */
    open class func getAnalyticsReportingScheduleWithRequestBuilder(scheduleId: String) -> RequestBuilder<ReportSchedule> {        
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Get list of completed scheduled report jobs.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingScheduleHistory(scheduleId: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ReportRunEntryEntityDomainListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingScheduleHistoryWithRequestBuilder(scheduleId: scheduleId, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<ReportRunEntryEntityDomainListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of completed scheduled report jobs.
     - GET /api/v2/analytics/reporting/schedules/{scheduleId}/history
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "reportId" : "reportId",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "errorMessage" : "errorMessage",
    "runDurationMsec" : 0,
    "reportFormat" : "reportFormat",
    "id" : "id",
    "runTime" : "2000-01-23T04:56:07.000+00:00",
    "reportUrl" : "reportUrl",
    "scheduleUri" : "https://openapi-generator.tech",
    "runStatus" : "RUNNING"
  }, {
    "reportId" : "reportId",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "errorMessage" : "errorMessage",
    "runDurationMsec" : 0,
    "reportFormat" : "reportFormat",
    "id" : "id",
    "runTime" : "2000-01-23T04:56:07.000+00:00",
    "reportUrl" : "reportUrl",
    "scheduleUri" : "https://openapi-generator.tech",
    "runStatus" : "RUNNING"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query)  (optional)

     - returns: RequestBuilder<ReportRunEntryEntityDomainListing> 
     */
    open class func getAnalyticsReportingScheduleHistoryWithRequestBuilder(scheduleId: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ReportRunEntryEntityDomainListing> {        
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}/history"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ReportRunEntryEntityDomainListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get most recently completed scheduled report job.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingScheduleHistoryLatest(scheduleId: String, completion: @escaping ((_ data: ReportRunEntry?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingScheduleHistoryLatestWithRequestBuilder(scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<ReportRunEntry>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get most recently completed scheduled report job.
     - GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/latest
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "reportId" : "reportId",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "errorMessage" : "errorMessage",
  "runDurationMsec" : 0,
  "reportFormat" : "reportFormat",
  "id" : "id",
  "runTime" : "2000-01-23T04:56:07.000+00:00",
  "reportUrl" : "reportUrl",
  "scheduleUri" : "https://openapi-generator.tech",
  "runStatus" : "RUNNING"
}, statusCode=200}]
     
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<ReportRunEntry> 
     */
    open class func getAnalyticsReportingScheduleHistoryLatestWithRequestBuilder(scheduleId: String) -> RequestBuilder<ReportRunEntry> {        
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}/history/latest"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportRunEntry>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     A completed scheduled report job
     
     - parameter runId: (path) Run ID 
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingScheduleHistoryRunId(runId: String, scheduleId: String, completion: @escaping ((_ data: ReportRunEntry?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingScheduleHistoryRunIdWithRequestBuilder(runId: runId, scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<ReportRunEntry>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     A completed scheduled report job
     - GET /api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}
     - A completed scheduled report job.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "reportId" : "reportId",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "errorMessage" : "errorMessage",
  "runDurationMsec" : 0,
  "reportFormat" : "reportFormat",
  "id" : "id",
  "runTime" : "2000-01-23T04:56:07.000+00:00",
  "reportUrl" : "reportUrl",
  "scheduleUri" : "https://openapi-generator.tech",
  "runStatus" : "RUNNING"
}, statusCode=200}]
     
     - parameter runId: (path) Run ID 
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<ReportRunEntry> 
     */
    open class func getAnalyticsReportingScheduleHistoryRunIdWithRequestBuilder(runId: String, scheduleId: String) -> RequestBuilder<ReportRunEntry> {        
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}"
        let runIdPreEscape = "\(runId)"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{runId}", with: runIdPostEscape, options: .literal, range: nil)
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportRunEntry>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a list of scheduled report jobs
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingSchedules(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ReportScheduleEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingSchedulesWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<ReportScheduleEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of scheduled report jobs
     - GET /api/v2/analytics/reporting/schedules
     - Get a list of scheduled report jobs.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "quartzCronExpression" : "quartzCronExpression",
    "reportId" : "reportId",
    "lastRun" : {
      "reportId" : "reportId",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "errorMessage" : "errorMessage",
      "runDurationMsec" : 0,
      "reportFormat" : "reportFormat",
      "id" : "id",
      "runTime" : "2000-01-23T04:56:07.000+00:00",
      "reportUrl" : "reportUrl",
      "scheduleUri" : "https://openapi-generator.tech",
      "runStatus" : "RUNNING"
    },
    "selfUri" : "https://openapi-generator.tech",
    "nextFireTime" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "timeZone" : "timeZone",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "reportFormat" : "reportFormat",
    "locale" : "locale",
    "enabled" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "timePeriod" : "timePeriod",
    "interval" : "interval",
    "id" : "id",
    "parameters" : {
      "key" : "{}"
    }
  }, {
    "quartzCronExpression" : "quartzCronExpression",
    "reportId" : "reportId",
    "lastRun" : {
      "reportId" : "reportId",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "errorMessage" : "errorMessage",
      "runDurationMsec" : 0,
      "reportFormat" : "reportFormat",
      "id" : "id",
      "runTime" : "2000-01-23T04:56:07.000+00:00",
      "reportUrl" : "reportUrl",
      "scheduleUri" : "https://openapi-generator.tech",
      "runStatus" : "RUNNING"
    },
    "selfUri" : "https://openapi-generator.tech",
    "nextFireTime" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "timeZone" : "timeZone",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "reportFormat" : "reportFormat",
    "locale" : "locale",
    "enabled" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "timePeriod" : "timePeriod",
    "interval" : "interval",
    "id" : "id",
    "parameters" : {
      "key" : "{}"
    }
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<ReportScheduleEntityListing> 
     */
    open class func getAnalyticsReportingSchedulesWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ReportScheduleEntityListing> {        
        let path = "/api/v2/analytics/reporting/schedules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ReportScheduleEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get AnalyticsReportingSettings for an organization
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingSettings(completion: @escaping ((_ data: AnalyticsReportingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<AnalyticsReportingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get AnalyticsReportingSettings for an organization
     - GET /api/v2/analytics/reporting/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "piiMaskingEnabled" : true,
  "queueAgentAccessObfuscation" : true,
  "myInteractionsPiiMaskingEnabled" : true
}, statusCode=200}]

     - returns: RequestBuilder<AnalyticsReportingSettings> 
     */
    open class func getAnalyticsReportingSettingsWithRequestBuilder() -> RequestBuilder<AnalyticsReportingSettings> {        
        let path = "/api/v2/analytics/reporting/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsReportingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get a list of report time periods.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsReportingTimeperiods(completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsReportingTimeperiodsWithRequestBuilder()
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of report time periods.
     - GET /api/v2/analytics/reporting/timeperiods
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example="", statusCode=200}]

     - returns: RequestBuilder<[String]> 
     */
    open class func getAnalyticsReportingTimeperiodsWithRequestBuilder() -> RequestBuilder<[String]> {        
        let path = "/api/v2/analytics/reporting/timeperiods"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get status for async query for user details
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get status for async query for user details
     - GET /api/v2/analytics/users/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "errorMessage",
  "submissionDate" : "2000-01-23T04:56:07.000+00:00",
  "completionDate" : "2000-01-23T04:56:07.000+00:00",
  "state" : "QUEUED",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {        
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Fetch a page of results for an async query
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJobResults(jobId: String, cursor: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AnalyticsUserDetailsAsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsAsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a page of results for an async query
     - GET /api/v2/analytics/users/details/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "cursor",
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00",
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  }, {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  } ]
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)

     - returns: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> 
     */
    open class func getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil, pageSize: Int? = nil) -> RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> {        
        var path = "/api/v2/analytics/users/details/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "cursor": cursor, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Lookup the datalake availability date and time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJobsAvailability(completion: @escaping ((_ data: DataAvailabilityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobsAvailabilityWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataAvailabilityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Lookup the datalake availability date and time
     - GET /api/v2/analytics/users/details/jobs/availability
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]

     - returns: RequestBuilder<DataAvailabilityResponse> 
     */
    open class func getAnalyticsUsersDetailsJobsAvailabilityWithRequestBuilder() -> RequestBuilder<DataAvailabilityResponse> {        
        let path = "/api/v2/analytics/users/details/jobs/availability"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataAvailabilityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Patch AnalyticsReportingSettings values for an organization
     
     - parameter body: (body) AnalyticsReportingSettingsRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchAnalyticsReportingSettings(body: AnalyticsReportingSettings, completion: @escaping ((_ data: AnalyticsReportingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = patchAnalyticsReportingSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsReportingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch AnalyticsReportingSettings values for an organization
     - PATCH /api/v2/analytics/reporting/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "piiMaskingEnabled" : true,
  "queueAgentAccessObfuscation" : true,
  "myInteractionsPiiMaskingEnabled" : true
}, statusCode=200}]
     
     - parameter body: (body) AnalyticsReportingSettingsRequest 

     - returns: RequestBuilder<AnalyticsReportingSettings> 
     */
    open class func patchAnalyticsReportingSettingsWithRequestBuilder(body: AnalyticsReportingSettings) -> RequestBuilder<AnalyticsReportingSettings> {        
        let path = "/api/v2/analytics/reporting/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsReportingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Query for action aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsActionsAggregatesQuery(body: ActionAggregationQuery, completion: @escaping ((_ data: ActionAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsActionsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ActionAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for action aggregates
     - POST /api/v2/analytics/actions/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<ActionAggregateQueryResponse> 
     */
    open class func postAnalyticsActionsAggregatesQueryWithRequestBuilder(body: ActionAggregationQuery) -> RequestBuilder<ActionAggregateQueryResponse> {        
        let path = "/api/v2/analytics/actions/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for bot aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsBotsAggregatesQuery(body: BotAggregationQuery, completion: @escaping ((_ data: BotAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsBotsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BotAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for bot aggregates
     - POST /api/v2/analytics/bots/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<BotAggregateQueryResponse> 
     */
    open class func postAnalyticsBotsAggregatesQueryWithRequestBuilder(body: BotAggregationQuery) -> RequestBuilder<BotAggregateQueryResponse> {        
        let path = "/api/v2/analytics/bots/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BotAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Index conversation properties
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationDetailsProperties(conversationId: String, body: PropertyIndexRequest, completion: @escaping ((_ data: PropertyIndexRequest?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationDetailsPropertiesWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<PropertyIndexRequest>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Index conversation properties
     - POST /api/v2/analytics/conversations/{conversationId}/details/properties
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "targetDate" : "2000-01-23T04:56:07.000+00:00",
  "sessionId" : "sessionId",
  "properties" : [ {
    "propertyType" : "bool",
    "property" : "property",
    "value" : "value"
  }, {
    "propertyType" : "bool",
    "property" : "property",
    "value" : "value"
  } ]
}, statusCode=202}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request 

     - returns: RequestBuilder<PropertyIndexRequest> 
     */
    open class func postAnalyticsConversationDetailsPropertiesWithRequestBuilder(conversationId: String, body: PropertyIndexRequest) -> RequestBuilder<PropertyIndexRequest> {        
        var path = "/api/v2/analytics/conversations/{conversationId}/details/properties"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PropertyIndexRequest>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for conversation aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsAggregatesQuery(body: ConversationAggregationQuery, completion: @escaping ((_ data: ConversationAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ConversationAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for conversation aggregates
     - POST /api/v2/analytics/conversations/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<ConversationAggregateQueryResponse> 
     */
    open class func postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body: ConversationAggregationQuery) -> RequestBuilder<ConversationAggregateQueryResponse> {        
        let path = "/api/v2/analytics/conversations/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConversationAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for conversation details asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsDetailsJobs(body: AsyncConversationQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsDetailsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for conversation details asynchronously
     - POST /api/v2/analytics/conversations/details/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "jobId"
}, statusCode=202}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postAnalyticsConversationsDetailsJobsWithRequestBuilder(body: AsyncConversationQuery) -> RequestBuilder<AsyncQueryResponse> {        
        let path = "/api/v2/analytics/conversations/details/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for conversation details
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsDetailsQuery(body: ConversationQuery, completion: @escaping ((_ data: AnalyticsConversationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsDetailsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsConversationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for conversation details
     - POST /api/v2/analytics/conversations/details/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalHits" : 6,
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  }, {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  } ],
  "aggregations" : [ {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  }, {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AnalyticsConversationQueryResponse> 
     */
    open class func postAnalyticsConversationsDetailsQueryWithRequestBuilder(body: ConversationQuery) -> RequestBuilder<AnalyticsConversationQueryResponse> {        
        let path = "/api/v2/analytics/conversations/details/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsTranscriptsQuery(body: TranscriptConversationDetailSearchRequest, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributesMultiGetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributesMultiGetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search resources.
     - POST /api/v2/analytics/conversations/transcripts/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  }, {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> 
     */
    open class func postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: TranscriptConversationDetailSearchRequest) -> RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> {        
        let path = "/api/v2/analytics/conversations/transcripts/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for evaluation aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsEvaluationsAggregatesQuery(body: EvaluationAggregationQuery, completion: @escaping ((_ data: EvaluationAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EvaluationAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for evaluation aggregates
     - POST /api/v2/analytics/evaluations/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<EvaluationAggregateQueryResponse> 
     */
    open class func postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body: EvaluationAggregationQuery) -> RequestBuilder<EvaluationAggregateQueryResponse> {        
        let path = "/api/v2/analytics/evaluations/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EvaluationAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for flow execution aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsFlowexecutionsAggregatesQuery(body: FlowExecutionAggregationQuery, completion: @escaping ((_ data: FlowExecutionAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsFlowexecutionsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FlowExecutionAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for flow execution aggregates
     - POST /api/v2/analytics/flowexecutions/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<FlowExecutionAggregateQueryResponse> 
     */
    open class func postAnalyticsFlowexecutionsAggregatesQueryWithRequestBuilder(body: FlowExecutionAggregationQuery) -> RequestBuilder<FlowExecutionAggregateQueryResponse> {        
        let path = "/api/v2/analytics/flowexecutions/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlowExecutionAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for flow aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsFlowsAggregatesQuery(body: FlowAggregationQuery, completion: @escaping ((_ data: FlowAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsFlowsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FlowAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for flow aggregates
     - POST /api/v2/analytics/flows/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<FlowAggregateQueryResponse> 
     */
    open class func postAnalyticsFlowsAggregatesQueryWithRequestBuilder(body: FlowAggregationQuery) -> RequestBuilder<FlowAggregateQueryResponse> {        
        let path = "/api/v2/analytics/flows/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlowAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for flow observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsFlowsObservationsQuery(body: FlowObservationQuery, completion: @escaping ((_ data: FlowObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsFlowsObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<FlowObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for flow observations
     - POST /api/v2/analytics/flows/observations/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<FlowObservationQueryResponse> 
     */
    open class func postAnalyticsFlowsObservationsQueryWithRequestBuilder(body: FlowObservationQuery) -> RequestBuilder<FlowObservationQueryResponse> {        
        let path = "/api/v2/analytics/flows/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FlowObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for journey aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsJourneysAggregatesQuery(body: JourneyAggregationQuery, completion: @escaping ((_ data: JourneyAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsJourneysAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<JourneyAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for journey aggregates
     - POST /api/v2/analytics/journeys/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<JourneyAggregateQueryResponse> 
     */
    open class func postAnalyticsJourneysAggregatesQueryWithRequestBuilder(body: JourneyAggregationQuery) -> RequestBuilder<JourneyAggregateQueryResponse> {        
        let path = "/api/v2/analytics/journeys/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JourneyAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for queue observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsQueuesObservationsQuery(body: QueueObservationQuery, completion: @escaping ((_ data: QueueObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<QueueObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for queue observations
     - POST /api/v2/analytics/queues/observations/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "systemToOrganizationMappings", "systemToOrganizationMappings" ]
  },
  "results" : [ {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<QueueObservationQueryResponse> 
     */
    open class func postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: QueueObservationQuery) -> RequestBuilder<QueueObservationQueryResponse> {        
        let path = "/api/v2/analytics/queues/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for limits rate limit aggregates. Data populated when limits are exceeded or are close to being exceeded
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsRatelimitsAggregatesQuery(body: RateLimitAggregationQuery, completion: @escaping ((_ data: RateLimitAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsRatelimitsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RateLimitAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for limits rate limit aggregates. Data populated when limits are exceeded or are close to being exceeded
     - POST /api/v2/analytics/ratelimits/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<RateLimitAggregateQueryResponse> 
     */
    open class func postAnalyticsRatelimitsAggregatesQueryWithRequestBuilder(body: RateLimitAggregationQuery) -> RequestBuilder<RateLimitAggregateQueryResponse> {        
        let path = "/api/v2/analytics/ratelimits/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RateLimitAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Generate a view export request
     
     - parameter body: (body) ReportingExportJobRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingExports(body: ReportingExportJobRequest, completion: @escaping ((_ data: ReportingExportJobResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingExportsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ReportingExportJobResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Generate a view export request
     - POST /api/v2/analytics/reporting/exports
     - This API creates a reporting export but the desired way to export analytics data is to use the analytics query APIs instead
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "hasSummaryRow" : true,
  "downloadUrl" : "downloadUrl",
  "createdDateTime" : "2000-01-23T04:56:07.000+00:00",
  "hasSplitByMedia" : true,
  "locale" : "locale",
  "excludeEmptyRows" : true,
  "exportErrorMessagesType" : "FAILED_CONVERTING_EXPORT_JOB",
  "enabled" : true,
  "exportAllowedToRerun" : true,
  "modifiedDateTime" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "includeDurationFormatInHeader" : true,
  "hasFormatDurations" : true,
  "durationFormat" : "Seconds",
  "period" : "period",
  "read" : true,
  "selfUri" : "https://openapi-generator.tech",
  "timeZone" : "timeZone",
  "csvDelimiter" : "SEMICOLON",
  "filter" : "{}",
  "selectedColumns" : [ {
    "columnOrder" : 6,
    "columnName" : "columnName"
  }, {
    "columnOrder" : 6,
    "columnName" : "columnName"
  } ],
  "emailStatuses" : {
    "key" : "Sent"
  },
  "emailErrorDescription" : "emailErrorDescription",
  "percentageComplete" : 0.8008281904610115,
  "hasSplitFilters" : true,
  "name" : "name",
  "viewType" : "QUEUE_PERFORMANCE_SUMMARY_VIEW",
  "interval" : "interval",
  "runId" : "runId",
  "hasCustomParticipantAttributes" : true,
  "recipientEmails" : [ "recipientEmails", "recipientEmails" ],
  "exportFormat" : "CSV",
  "status" : "SUBMITTED"
}, statusCode=200}]
     
     - parameter body: (body) ReportingExportJobRequest 

     - returns: RequestBuilder<ReportingExportJobResponse> 
     */
    open class func postAnalyticsReportingExportsWithRequestBuilder(body: ReportingExportJobRequest) -> RequestBuilder<ReportingExportJobResponse> {        
        let path = "/api/v2/analytics/reporting/exports"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportingExportJobResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Place a scheduled report immediately into the reporting queue
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingScheduleRunreport(scheduleId: String, completion: @escaping ((_ data: RunNowResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingScheduleRunreportWithRequestBuilder(scheduleId: scheduleId)
        requestBuilder.execute { (response: Response<RunNowResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Place a scheduled report immediately into the reporting queue
     - POST /api/v2/analytics/reporting/schedules/{scheduleId}/runreport
     - This route is deprecated, please use POST:api/v2/analytics/reporting/exports/{exportId}/execute instead
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id"
}, statusCode=202}]
     
     - parameter scheduleId: (path) Schedule ID 

     - returns: RequestBuilder<RunNowResponse> 
     */
    open class func postAnalyticsReportingScheduleRunreportWithRequestBuilder(scheduleId: String) -> RequestBuilder<RunNowResponse> {        
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}/runreport"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RunNowResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a scheduled report job
     
     - parameter body: (body) ReportSchedule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsReportingSchedules(body: ReportSchedule, completion: @escaping ((_ data: ReportSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsReportingSchedulesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ReportSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a scheduled report job
     - POST /api/v2/analytics/reporting/schedules
     - This route is deprecated, please use POST:api/v2/analytics/reporting/exports instead
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "quartzCronExpression" : "quartzCronExpression",
  "reportId" : "reportId",
  "lastRun" : {
    "reportId" : "reportId",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "errorMessage" : "errorMessage",
    "runDurationMsec" : 0,
    "reportFormat" : "reportFormat",
    "id" : "id",
    "runTime" : "2000-01-23T04:56:07.000+00:00",
    "reportUrl" : "reportUrl",
    "scheduleUri" : "https://openapi-generator.tech",
    "runStatus" : "RUNNING"
  },
  "selfUri" : "https://openapi-generator.tech",
  "nextFireTime" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "timeZone" : "timeZone",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reportFormat" : "reportFormat",
  "locale" : "locale",
  "enabled" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "timePeriod" : "timePeriod",
  "interval" : "interval",
  "id" : "id",
  "parameters" : {
    "key" : "{}"
  }
}, statusCode=200}]
     
     - parameter body: (body) ReportSchedule 

     - returns: RequestBuilder<ReportSchedule> 
     */
    open class func postAnalyticsReportingSchedulesWithRequestBuilder(body: ReportSchedule) -> RequestBuilder<ReportSchedule> {        
        let path = "/api/v2/analytics/reporting/schedules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for survey aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsSurveysAggregatesQuery(body: SurveyAggregationQuery, completion: @escaping ((_ data: SurveyAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsSurveysAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SurveyAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for survey aggregates
     - POST /api/v2/analytics/surveys/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<SurveyAggregateQueryResponse> 
     */
    open class func postAnalyticsSurveysAggregatesQueryWithRequestBuilder(body: SurveyAggregationQuery) -> RequestBuilder<SurveyAggregateQueryResponse> {        
        let path = "/api/v2/analytics/surveys/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SurveyAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for transcript aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsTranscriptsAggregatesQuery(body: TranscriptAggregationQuery, completion: @escaping ((_ data: TranscriptAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsTranscriptsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TranscriptAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for transcript aggregates
     - POST /api/v2/analytics/transcripts/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<TranscriptAggregateQueryResponse> 
     */
    open class func postAnalyticsTranscriptsAggregatesQueryWithRequestBuilder(body: TranscriptAggregationQuery) -> RequestBuilder<TranscriptAggregateQueryResponse> {        
        let path = "/api/v2/analytics/transcripts/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for user aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersAggregatesQuery(body: UserAggregationQuery, completion: @escaping ((_ data: UserAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user aggregates
     - POST /api/v2/analytics/users/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "systemToOrganizationMappings", "systemToOrganizationMappings" ]
  },
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserAggregateQueryResponse> 
     */
    open class func postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: UserAggregationQuery) -> RequestBuilder<UserAggregateQueryResponse> {        
        let path = "/api/v2/analytics/users/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for user details asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsJobs(body: AsyncUserDetailsQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user details asynchronously
     - POST /api/v2/analytics/users/details/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "jobId"
}, statusCode=202}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsJobsWithRequestBuilder(body: AsyncUserDetailsQuery) -> RequestBuilder<AsyncQueryResponse> {        
        let path = "/api/v2/analytics/users/details/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for user details
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsQuery(body: UserDetailsQuery, completion: @escaping ((_ data: AnalyticsUserDetailsQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user details
     - POST /api/v2/analytics/users/details/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalHits" : 0,
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  }, {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  } ],
  "aggregations" : [ {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  }, {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AnalyticsUserDetailsQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsQueryWithRequestBuilder(body: UserDetailsQuery) -> RequestBuilder<AnalyticsUserDetailsQueryResponse> {        
        let path = "/api/v2/analytics/users/details/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for user observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersObservationsQuery(body: UserObservationQuery, completion: @escaping ((_ data: UserObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user observations
     - POST /api/v2/analytics/users/observations/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserObservationQueryResponse> 
     */
    open class func postAnalyticsUsersObservationsQueryWithRequestBuilder(body: UserObservationQuery) -> RequestBuilder<UserObservationQueryResponse> {        
        let path = "/api/v2/analytics/users/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Update analytics data retention setting
     
     - parameter body: (body) retentionDays 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAnalyticsDataretentionSettings(body: UpdateAnalyticsDataRetentionRequest, completion: @escaping ((_ data: AnalyticsDataRetentionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putAnalyticsDataretentionSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsDataRetentionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update analytics data retention setting
     - PUT /api/v2/analytics/dataretention/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "retentionDays" : 0,
  "dateModified" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter body: (body) retentionDays 

     - returns: RequestBuilder<AnalyticsDataRetentionResponse> 
     */
    open class func putAnalyticsDataretentionSettingsWithRequestBuilder(body: UpdateAnalyticsDataRetentionRequest) -> RequestBuilder<AnalyticsDataRetentionResponse> {        
        let path = "/api/v2/analytics/dataretention/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsDataRetentionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a scheduled report job.
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter body: (body) ReportSchedule 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAnalyticsReportingSchedule(scheduleId: String, body: ReportSchedule, completion: @escaping ((_ data: ReportSchedule?,_ error: Error?) -> Void)) {
        let requestBuilder = putAnalyticsReportingScheduleWithRequestBuilder(scheduleId: scheduleId, body: body)
        requestBuilder.execute { (response: Response<ReportSchedule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a scheduled report job.
     - PUT /api/v2/analytics/reporting/schedules/{scheduleId}
     - This route is deprecated, please use PATCH:api/v2/analytics/reporting/exports/{exportId}/schedule instead
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "quartzCronExpression" : "quartzCronExpression",
  "reportId" : "reportId",
  "lastRun" : {
    "reportId" : "reportId",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "errorMessage" : "errorMessage",
    "runDurationMsec" : 0,
    "reportFormat" : "reportFormat",
    "id" : "id",
    "runTime" : "2000-01-23T04:56:07.000+00:00",
    "reportUrl" : "reportUrl",
    "scheduleUri" : "https://openapi-generator.tech",
    "runStatus" : "RUNNING"
  },
  "selfUri" : "https://openapi-generator.tech",
  "nextFireTime" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "timeZone" : "timeZone",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "reportFormat" : "reportFormat",
  "locale" : "locale",
  "enabled" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "timePeriod" : "timePeriod",
  "interval" : "interval",
  "id" : "id",
  "parameters" : {
    "key" : "{}"
  }
}, statusCode=200}]
     
     - parameter scheduleId: (path) Schedule ID 
     - parameter body: (body) ReportSchedule 

     - returns: RequestBuilder<ReportSchedule> 
     */
    open class func putAnalyticsReportingScheduleWithRequestBuilder(scheduleId: String, body: ReportSchedule) -> RequestBuilder<ReportSchedule> {        
        var path = "/api/v2/analytics/reporting/schedules/{scheduleId}"
        let scheduleIdPreEscape = "\(scheduleId)"
        let scheduleIdPostEscape = scheduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scheduleId}", with: scheduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ReportSchedule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
