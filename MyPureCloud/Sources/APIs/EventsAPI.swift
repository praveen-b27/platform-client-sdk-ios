//
// EventsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class EventsAPI {
    
    /**
     Publish Conversation Batch Events
     
     - parameter body: (body) batchRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postEventsConversations(body: BatchConversationEventRequest, completion: @escaping ((_ data: BatchEventResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postEventsConversationsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BatchEventResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Publish Conversation Batch Events
     - POST /api/v2/events/conversations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errors" : [ {
    "retryable" : true,
    "eventId" : "eventId",
    "message" : "message"
  }, {
    "retryable" : true,
    "eventId" : "eventId",
    "message" : "message"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) batchRequest 

     - returns: RequestBuilder<BatchEventResponse> 
     */
    open class func postEventsConversationsWithRequestBuilder(body: BatchConversationEventRequest) -> RequestBuilder<BatchEventResponse> {        
        let path = "/api/v2/events/conversations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchEventResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Publish User Presence Status Batch Events
     
     - parameter body: (body) batchRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postEventsUsersPresence(body: BatchUserPresenceEventRequest, completion: @escaping ((_ data: BatchEventResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postEventsUsersPresenceWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BatchEventResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Publish User Presence Status Batch Events
     - POST /api/v2/events/users/presence
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errors" : [ {
    "retryable" : true,
    "eventId" : "eventId",
    "message" : "message"
  }, {
    "retryable" : true,
    "eventId" : "eventId",
    "message" : "message"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) batchRequest 

     - returns: RequestBuilder<BatchEventResponse> 
     */
    open class func postEventsUsersPresenceWithRequestBuilder(body: BatchUserPresenceEventRequest) -> RequestBuilder<BatchEventResponse> {        
        let path = "/api/v2/events/users/presence"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchEventResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Publish Agent Routing Status Batch Events
     
     - parameter body: (body) batchRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postEventsUsersRoutingstatus(body: BatchUserRoutingStatusEventRequest, completion: @escaping ((_ data: BatchEventResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postEventsUsersRoutingstatusWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BatchEventResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Publish Agent Routing Status Batch Events
     - POST /api/v2/events/users/routingstatus
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errors" : [ {
    "retryable" : true,
    "eventId" : "eventId",
    "message" : "message"
  }, {
    "retryable" : true,
    "eventId" : "eventId",
    "message" : "message"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) batchRequest 

     - returns: RequestBuilder<BatchEventResponse> 
     */
    open class func postEventsUsersRoutingstatusWithRequestBuilder(body: BatchUserRoutingStatusEventRequest) -> RequestBuilder<BatchEventResponse> {        
        let path = "/api/v2/events/users/routingstatus"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BatchEventResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
