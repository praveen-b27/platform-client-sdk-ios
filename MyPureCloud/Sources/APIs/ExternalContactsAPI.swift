//
// ExternalContactsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ExternalContactsAPI {
    
    /**
     Delete an external contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsContact(contactId: String, completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsContactWithRequestBuilder(contactId: contactId)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an external contact
     - DELETE /api/v2/externalcontacts/contacts/{contactId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter contactId: (path) ExternalContact ID 

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteExternalcontactsContactWithRequestBuilder(contactId: String) -> RequestBuilder<JSON> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a note for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsContactNote(contactId: String, noteId: String, completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsContactNoteWithRequestBuilder(contactId: contactId, noteId: noteId)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a note for an external contact
     - DELETE /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteExternalcontactsContactNoteWithRequestBuilder(contactId: String, noteId: String) -> RequestBuilder<JSON> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsContactsSchema(schemaId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsContactsSchemaWithRequestBuilder(schemaId: schemaId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a schema
     - DELETE /api/v2/externalcontacts/contacts/schemas/{schemaId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter schemaId: (path) Schema ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteExternalcontactsContactsSchemaWithRequestBuilder(schemaId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/externalcontacts/contacts/schemas/{schemaId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsOrganization(externalOrganizationId: String, completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: externalOrganizationId)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an external organization
     - DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter externalOrganizationId: (path) External Organization ID 

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: String) -> RequestBuilder<JSON> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a note for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsOrganizationNote(externalOrganizationId: String, noteId: String, completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: externalOrganizationId, noteId: noteId)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a note for an external organization
     - DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: String, noteId: String) -> RequestBuilder<JSON> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Unlink the Trustor for this External Organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsOrganizationTrustor(externalOrganizationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsOrganizationTrustorWithRequestBuilder(externalOrganizationId: externalOrganizationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Unlink the Trustor for this External Organization
     - DELETE /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter externalOrganizationId: (path) External Organization ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteExternalcontactsOrganizationTrustorWithRequestBuilder(externalOrganizationId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a relationship
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteExternalcontactsRelationship(relationshipId: String, completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteExternalcontactsRelationshipWithRequestBuilder(relationshipId: relationshipId)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a relationship
     - DELETE /api/v2/externalcontacts/relationships/{relationshipId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter relationshipId: (path) Relationship Id 

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteExternalcontactsRelationshipWithRequestBuilder(relationshipId: String) -> RequestBuilder<JSON> {        
        var path = "/api/v2/externalcontacts/relationships/{relationshipId}"
        let relationshipIdPreEscape = "\(relationshipId)"
        let relationshipIdPostEscape = relationshipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relationshipId}", with: relationshipIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Fetch an external contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter expand: (query) which fields, if any, to expand (externalOrganization,externalDataSources) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContact(contactId: String, expand: [String]? = nil, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactWithRequestBuilder(contactId: contactId, expand: expand)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch an external contact
     - GET /api/v2/externalcontacts/contacts/{contactId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "lastName" : "lastName",
  "canonicalContact" : "{}",
  "workEmail" : "workEmail",
  "customFields" : {
    "key" : "{}"
  },
  "mergeOperation" : "{}",
  "title" : "title",
  "type" : "Ephemeral",
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "personalEmail" : "personalEmail",
  "mergeSet" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "externalSystemUrl" : "externalSystemUrl",
  "id" : "id",
  "otherEmail" : "otherEmail",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "homePhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "facebookId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "scopedId" : "scopedId"
    }, {
      "scopedId" : "scopedId"
    } ]
  },
  "selfUri" : "https://openapi-generator.tech",
  "lineId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "userId" : "userId"
    }, {
      "userId" : "userId"
    } ]
  },
  "externalOrganization" : {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  },
  "firstName" : "firstName",
  "otherPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "whatsAppId" : {
    "phoneNumber" : "{}",
    "displayName" : "displayName"
  },
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "middleName" : "middleName",
  "workPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "salutation" : "salutation",
  "cellPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "surveyOptOut" : true
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter expand: (query) which fields, if any, to expand (externalOrganization,externalDataSources) (optional)

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func getExternalcontactsContactWithRequestBuilder(contactId: String, expand: [String]? = nil) -> RequestBuilder<ExternalContact> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     List the identifiers for a contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactIdentifiers(contactId: String, completion: @escaping ((_ data: EntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactIdentifiersWithRequestBuilder(contactId: contactId)
        requestBuilder.execute { (response: Response<EntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List the identifiers for a contact
     - GET /api/v2/externalcontacts/contacts/{contactId}/identifiers
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ "{}", "{}" ]
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact ID 

     - returns: RequestBuilder<EntityListing> 
     */
    open class func getExternalcontactsContactIdentifiersWithRequestBuilder(contactId: String) -> RequestBuilder<EntityListing> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/identifiers"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Retrieve all sessions for a given external contact.
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter includeMerged: (query) Indicates whether to return sessions from all external contacts in the merge-set of the given one. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactJourneySessions(contactId: String, pageSize: String? = nil, after: String? = nil, includeMerged: Bool? = nil, completion: @escaping ((_ data: SessionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactJourneySessionsWithRequestBuilder(contactId: contactId, pageSize: pageSize, after: after, includeMerged: includeMerged)
        requestBuilder.execute { (response: Response<SessionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all sessions for a given external contact.
     - GET /api/v2/externalcontacts/contacts/{contactId}/journey/sessions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "screenviewCount" : 5,
    "shortId" : "shortId",
    "authenticated" : true,
    "lastPage" : "{}",
    "durationInSeconds" : 0,
    "searchTerms" : [ "searchTerms", "searchTerms" ],
    "conversationSubject" : "conversationSubject",
    "userAgentString" : "userAgentString",
    "eventCount" : 6,
    "type" : "type",
    "lastConnectedQueue" : "{}",
    "sdkLibrary" : "{}",
    "browser" : "{}",
    "customerId" : "customerId",
    "id" : "id",
    "customerIdType" : "customerIdType",
    "awayDate" : "2000-01-23T04:56:07.000+00:00",
    "lastAcdOutcome" : "Unknown",
    "attributeLists" : {
      "key" : {
        "dataType" : "dataType",
        "values" : [ "values", "values" ]
      }
    },
    "mktCampaign" : "{}",
    "conversation" : "{}",
    "ipOrganization" : "ipOrganization",
    "app" : "{}",
    "externalUrl" : "externalUrl",
    "networkConnectivity" : "{}",
    "endedDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "idleDate" : "2000-01-23T04:56:07.000+00:00",
    "ipAddress" : "ipAddress",
    "externalId" : "externalId",
    "lastUserDisconnectType" : "Unknown",
    "pageviewCount" : 1,
    "externalContact" : "{}",
    "originatingDirection" : "Unknown",
    "referrer" : "{}",
    "lastUserDisposition" : "{}",
    "outcomeAchievements" : [ {
      "achievedDate" : "2000-01-23T04:56:07.000+00:00",
      "outcome" : "{}"
    }, {
      "achievedDate" : "2000-01-23T04:56:07.000+00:00",
      "outcome" : "{}"
    } ],
    "lastConnectedUser" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "conversationChannels" : [ {
      "messageType" : "Unknown",
      "type" : "Unknown",
      "platform" : "platform"
    }, {
      "messageType" : "Unknown",
      "type" : "Unknown",
      "platform" : "platform"
    } ],
    "segmentAssignments" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+00:00",
      "segment" : "{}"
    }, {
      "assignedDate" : "2000-01-23T04:56:07.000+00:00",
      "segment" : "{}"
    } ],
    "lastEvent" : "{}",
    "attributes" : {
      "key" : {
        "dataType" : "dataType",
        "value" : "value"
      }
    },
    "device" : "{}",
    "geolocation" : "{}"
  }, {
    "screenviewCount" : 5,
    "shortId" : "shortId",
    "authenticated" : true,
    "lastPage" : "{}",
    "durationInSeconds" : 0,
    "searchTerms" : [ "searchTerms", "searchTerms" ],
    "conversationSubject" : "conversationSubject",
    "userAgentString" : "userAgentString",
    "eventCount" : 6,
    "type" : "type",
    "lastConnectedQueue" : "{}",
    "sdkLibrary" : "{}",
    "browser" : "{}",
    "customerId" : "customerId",
    "id" : "id",
    "customerIdType" : "customerIdType",
    "awayDate" : "2000-01-23T04:56:07.000+00:00",
    "lastAcdOutcome" : "Unknown",
    "attributeLists" : {
      "key" : {
        "dataType" : "dataType",
        "values" : [ "values", "values" ]
      }
    },
    "mktCampaign" : "{}",
    "conversation" : "{}",
    "ipOrganization" : "ipOrganization",
    "app" : "{}",
    "externalUrl" : "externalUrl",
    "networkConnectivity" : "{}",
    "endedDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "idleDate" : "2000-01-23T04:56:07.000+00:00",
    "ipAddress" : "ipAddress",
    "externalId" : "externalId",
    "lastUserDisconnectType" : "Unknown",
    "pageviewCount" : 1,
    "externalContact" : "{}",
    "originatingDirection" : "Unknown",
    "referrer" : "{}",
    "lastUserDisposition" : "{}",
    "outcomeAchievements" : [ {
      "achievedDate" : "2000-01-23T04:56:07.000+00:00",
      "outcome" : "{}"
    }, {
      "achievedDate" : "2000-01-23T04:56:07.000+00:00",
      "outcome" : "{}"
    } ],
    "lastConnectedUser" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "conversationChannels" : [ {
      "messageType" : "Unknown",
      "type" : "Unknown",
      "platform" : "platform"
    }, {
      "messageType" : "Unknown",
      "type" : "Unknown",
      "platform" : "platform"
    } ],
    "segmentAssignments" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+00:00",
      "segment" : "{}"
    }, {
      "assignedDate" : "2000-01-23T04:56:07.000+00:00",
      "segment" : "{}"
    } ],
    "lastEvent" : "{}",
    "attributes" : {
      "key" : {
        "dataType" : "dataType",
        "value" : "value"
      }
    },
    "device" : "{}",
    "geolocation" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter includeMerged: (query) Indicates whether to return sessions from all external contacts in the merge-set of the given one. (optional)

     - returns: RequestBuilder<SessionListing> 
     */
    open class func getExternalcontactsContactJourneySessionsWithRequestBuilder(contactId: String, pageSize: String? = nil, after: String? = nil, includeMerged: Bool? = nil) -> RequestBuilder<SessionListing> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/journey/sessions"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize, 
            "after": after, 
            "includeMerged": includeMerged
        ])

        let requestBuilder: RequestBuilder<SessionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Fetch a note for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactNote(contactId: String, noteId: String, expand: [String]? = nil, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactNoteWithRequestBuilder(contactId: contactId, noteId: noteId, expand: expand)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a note for an external contact
     - GET /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "noteText",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "entityType" : "contact",
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "entityId" : "entityId",
  "id" : "id",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<Note> 
     */
    open class func getExternalcontactsContactNoteWithRequestBuilder(contactId: String, noteId: String, expand: [String]? = nil) -> RequestBuilder<Note> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     List notes for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter sortOrder: (query) The Note field to sort by. Any of: [createDate]. Direction: [asc, desc].  e.g. \&quot;createDate:asc\&quot;, \&quot;createDate:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactNotes(contactId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: NoteListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactNotesWithRequestBuilder(contactId: contactId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<NoteListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List notes for an external contact
     - GET /api/v2/externalcontacts/contacts/{contactId}/notes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "noteText" : "noteText",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "entityType" : "contact",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "entityId" : "entityId",
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "noteText" : "noteText",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "entityType" : "contact",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "entityId" : "entityId",
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech",
  "partialResults" : true
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter sortOrder: (query) The Note field to sort by. Any of: [createDate]. Direction: [asc, desc].  e.g. \&quot;createDate:asc\&quot;, \&quot;createDate:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<NoteListing> 
     */
    open class func getExternalcontactsContactNotesWithRequestBuilder(contactId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<NoteListing> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<NoteListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Fetch an unresolved external contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter expand: (query) which fields, if any, to expand (externalOrganization,externalDataSources) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactUnresolved(contactId: String, expand: [String]? = nil, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactUnresolvedWithRequestBuilder(contactId: contactId, expand: expand)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch an unresolved external contact
     - GET /api/v2/externalcontacts/contacts/{contactId}/unresolved
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "lastName" : "lastName",
  "canonicalContact" : "{}",
  "workEmail" : "workEmail",
  "customFields" : {
    "key" : "{}"
  },
  "mergeOperation" : "{}",
  "title" : "title",
  "type" : "Ephemeral",
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "personalEmail" : "personalEmail",
  "mergeSet" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "externalSystemUrl" : "externalSystemUrl",
  "id" : "id",
  "otherEmail" : "otherEmail",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "homePhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "facebookId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "scopedId" : "scopedId"
    }, {
      "scopedId" : "scopedId"
    } ]
  },
  "selfUri" : "https://openapi-generator.tech",
  "lineId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "userId" : "userId"
    }, {
      "userId" : "userId"
    } ]
  },
  "externalOrganization" : {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  },
  "firstName" : "firstName",
  "otherPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "whatsAppId" : {
    "phoneNumber" : "{}",
    "displayName" : "displayName"
  },
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "middleName" : "middleName",
  "workPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "salutation" : "salutation",
  "cellPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "surveyOptOut" : true
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter expand: (query) which fields, if any, to expand (externalOrganization,externalDataSources) (optional)

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func getExternalcontactsContactUnresolvedWithRequestBuilder(contactId: String, expand: [String]? = nil) -> RequestBuilder<ExternalContact> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/unresolved"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     Search for external contacts
     
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter q: (query) User supplied search keywords (no special syntax is currently supported) (optional)
     - parameter sortOrder: (query) The External Contact field to sort by. Any of: [firstName, lastName, middleName, title]. Direction: [asc, desc]. e.g. \&quot;firstName:asc\&quot;, \&quot;title:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContacts(pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: ContactListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, q: q, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<ContactListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search for external contacts
     - GET /api/v2/externalcontacts/contacts
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "schema" : "{}",
    "lastName" : "lastName",
    "canonicalContact" : "{}",
    "workEmail" : "workEmail",
    "customFields" : {
      "key" : "{}"
    },
    "mergeOperation" : "{}",
    "title" : "title",
    "type" : "Ephemeral",
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "personalEmail" : "personalEmail",
    "mergeSet" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "externalSystemUrl" : "externalSystemUrl",
    "id" : "id",
    "otherEmail" : "otherEmail",
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "homePhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "facebookId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "scopedId" : "scopedId"
      }, {
        "scopedId" : "scopedId"
      } ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "lineId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "userId" : "userId"
      }, {
        "userId" : "userId"
      } ]
    },
    "externalOrganization" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "firstName" : "firstName",
    "otherPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "whatsAppId" : {
      "phoneNumber" : "{}",
      "displayName" : "displayName"
    },
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "middleName" : "middleName",
    "workPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "salutation" : "salutation",
    "cellPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "surveyOptOut" : true
  }, {
    "schema" : "{}",
    "lastName" : "lastName",
    "canonicalContact" : "{}",
    "workEmail" : "workEmail",
    "customFields" : {
      "key" : "{}"
    },
    "mergeOperation" : "{}",
    "title" : "title",
    "type" : "Ephemeral",
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "personalEmail" : "personalEmail",
    "mergeSet" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "externalSystemUrl" : "externalSystemUrl",
    "id" : "id",
    "otherEmail" : "otherEmail",
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "homePhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "facebookId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "scopedId" : "scopedId"
      }, {
        "scopedId" : "scopedId"
      } ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "lineId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "userId" : "userId"
      }, {
        "userId" : "userId"
      } ]
    },
    "externalOrganization" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "firstName" : "firstName",
    "otherPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "whatsAppId" : {
      "phoneNumber" : "{}",
      "displayName" : "displayName"
    },
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "middleName" : "middleName",
    "workPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "salutation" : "salutation",
    "cellPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "surveyOptOut" : true
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech",
  "partialResults" : true
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter q: (query) User supplied search keywords (no special syntax is currently supported) (optional)
     - parameter sortOrder: (query) The External Contact field to sort by. Any of: [firstName, lastName, middleName, title]. Direction: [asc, desc]. e.g. \&quot;firstName:asc\&quot;, \&quot;title:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<ContactListing> 
     */
    open class func getExternalcontactsContactsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<ContactListing> {        
        let path = "/api/v2/externalcontacts/contacts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "q": q, 
            "sortOrder": sortOrder, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<ContactListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactsSchema(schemaId: String, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactsSchemaWithRequestBuilder(schemaId: schemaId)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a schema
     - GET /api/v2/externalcontacts/contacts/schemas/{schemaId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func getExternalcontactsContactsSchemaWithRequestBuilder(schemaId: String) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/externalcontacts/contacts/schemas/{schemaId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a specific version of a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter versionId: (path) Schema version 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactsSchemaVersion(schemaId: String, versionId: String, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactsSchemaVersionWithRequestBuilder(schemaId: schemaId, versionId: versionId)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific version of a schema
     - GET /api/v2/externalcontacts/contacts/schemas/{schemaId}/versions/{versionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 
     - parameter versionId: (path) Schema version 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func getExternalcontactsContactsSchemaVersionWithRequestBuilder(schemaId: String, versionId: String) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/externalcontacts/contacts/schemas/{schemaId}/versions/{versionId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let versionIdPreEscape = "\(versionId)"
        let versionIdPostEscape = versionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionId}", with: versionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get all versions of an external contact's schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactsSchemaVersions(schemaId: String, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactsSchemaVersionsWithRequestBuilder(schemaId: schemaId)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all versions of an external contact's schema
     - GET /api/v2/externalcontacts/contacts/schemas/{schemaId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func getExternalcontactsContactsSchemaVersionsWithRequestBuilder(schemaId: String) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/externalcontacts/contacts/schemas/{schemaId}/versions"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get a list of schemas.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactsSchemas(completion: @escaping ((_ data: DataSchemaListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactsSchemasWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataSchemaListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of schemas.
     - GET /api/v2/externalcontacts/contacts/schemas
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "appliesTo" : [ "CONTACT", "CONTACT" ],
    "id" : "id",
    "version" : 0,
    "enabled" : true
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "appliesTo" : [ "CONTACT", "CONTACT" ],
    "id" : "id",
    "version" : 0,
    "enabled" : true
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<DataSchemaListing> 
     */
    open class func getExternalcontactsContactsSchemasWithRequestBuilder() -> RequestBuilder<DataSchemaListing> {        
        let path = "/api/v2/externalcontacts/contacts/schemas"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchemaListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum Expand_getExternalcontactsOrganization: String { 
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     Fetch an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter expand: (query) which fields, if any, to expand (externalDataSources) (optional)
     - parameter includeTrustors: (query) (true or false) whether or not to include trustor information embedded in the externalOrganization (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganization(externalOrganizationId: String, expand: Expand_getExternalcontactsOrganization? = nil, includeTrustors: Bool? = nil, completion: @escaping ((_ data: ExternalOrganization?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: externalOrganizationId, expand: expand, includeTrustors: includeTrustors)
        requestBuilder.execute { (response: Response<ExternalOrganization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch an external organization
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "companyType" : "companyType",
  "customFields" : {
    "key" : "{}"
  },
  "selfUri" : "https://openapi-generator.tech",
  "industry" : "industry",
  "employeeCount" : 6,
  "tickers" : [ {
    "symbol" : "symbol",
    "exchange" : "exchange"
  }, {
    "symbol" : "symbol",
    "exchange" : "exchange"
  } ],
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "primaryContactId" : "primaryContactId",
  "tags" : [ "tags", "tags" ],
  "revenue" : 1,
  "phoneNumber" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "externalSystemUrl" : "externalSystemUrl",
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "name" : "name",
  "faxNumber" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "trustor" : {
    "authorization" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "organization" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "enabled" : true
  },
  "websites" : [ "websites", "websites" ],
  "id" : "id",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter expand: (query) which fields, if any, to expand (externalDataSources) (optional)
     - parameter includeTrustors: (query) (true or false) whether or not to include trustor information embedded in the externalOrganization (optional)

     - returns: RequestBuilder<ExternalOrganization> 
     */
    open class func getExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: String, expand: Expand_getExternalcontactsOrganization? = nil, includeTrustors: Bool? = nil) -> RequestBuilder<ExternalOrganization> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue, 
            "includeTrustors": includeTrustors
        ])

        let requestBuilder: RequestBuilder<ExternalOrganization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    /**
     Search for external contacts in an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter q: (query) User supplied search keywords (no special syntax is currently supported) (optional)
     - parameter sortOrder: (query) The External Contact field to sort by. Any of: [firstName, lastName, middleName, title]. Direction: [asc, desc]. e.g. \&quot;firstName:asc\&quot;, \&quot;title:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationContacts(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: ContactListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationContactsWithRequestBuilder(externalOrganizationId: externalOrganizationId, pageSize: pageSize, pageNumber: pageNumber, q: q, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<ContactListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search for external contacts in an external organization
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "schema" : "{}",
    "lastName" : "lastName",
    "canonicalContact" : "{}",
    "workEmail" : "workEmail",
    "customFields" : {
      "key" : "{}"
    },
    "mergeOperation" : "{}",
    "title" : "title",
    "type" : "Ephemeral",
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "personalEmail" : "personalEmail",
    "mergeSet" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "externalSystemUrl" : "externalSystemUrl",
    "id" : "id",
    "otherEmail" : "otherEmail",
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "homePhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "facebookId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "scopedId" : "scopedId"
      }, {
        "scopedId" : "scopedId"
      } ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "lineId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "userId" : "userId"
      }, {
        "userId" : "userId"
      } ]
    },
    "externalOrganization" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "firstName" : "firstName",
    "otherPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "whatsAppId" : {
      "phoneNumber" : "{}",
      "displayName" : "displayName"
    },
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "middleName" : "middleName",
    "workPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "salutation" : "salutation",
    "cellPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "surveyOptOut" : true
  }, {
    "schema" : "{}",
    "lastName" : "lastName",
    "canonicalContact" : "{}",
    "workEmail" : "workEmail",
    "customFields" : {
      "key" : "{}"
    },
    "mergeOperation" : "{}",
    "title" : "title",
    "type" : "Ephemeral",
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "personalEmail" : "personalEmail",
    "mergeSet" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "externalSystemUrl" : "externalSystemUrl",
    "id" : "id",
    "otherEmail" : "otherEmail",
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "homePhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "facebookId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "scopedId" : "scopedId"
      }, {
        "scopedId" : "scopedId"
      } ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "lineId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "userId" : "userId"
      }, {
        "userId" : "userId"
      } ]
    },
    "externalOrganization" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "firstName" : "firstName",
    "otherPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "whatsAppId" : {
      "phoneNumber" : "{}",
      "displayName" : "displayName"
    },
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "middleName" : "middleName",
    "workPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "salutation" : "salutation",
    "cellPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "surveyOptOut" : true
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech",
  "partialResults" : true
}, statusCode=200}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter q: (query) User supplied search keywords (no special syntax is currently supported) (optional)
     - parameter sortOrder: (query) The External Contact field to sort by. Any of: [firstName, lastName, middleName, title]. Direction: [asc, desc]. e.g. \&quot;firstName:asc\&quot;, \&quot;title:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<ContactListing> 
     */
    open class func getExternalcontactsOrganizationContactsWithRequestBuilder(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<ContactListing> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "q": q, 
            "sortOrder": sortOrder, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<ContactListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Fetch a note for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationNote(externalOrganizationId: String, noteId: String, expand: [String]? = nil, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: externalOrganizationId, noteId: noteId, expand: expand)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a note for an external organization
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "noteText",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "entityType" : "contact",
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "entityId" : "entityId",
  "id" : "id",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<Note> 
     */
    open class func getExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: String, noteId: String, expand: [String]? = nil) -> RequestBuilder<Note> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     List notes for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter sortOrder: (query) The Note field to sort by. Any of: [createDate]. Direction: [asc, desc]. e.g. \&quot;createDate:asc\&quot;, \&quot;createDate:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationNotes(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: NoteListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationNotesWithRequestBuilder(externalOrganizationId: externalOrganizationId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<NoteListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List notes for an external organization
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "noteText" : "noteText",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "entityType" : "contact",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "entityId" : "entityId",
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "noteText" : "noteText",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "entityType" : "contact",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "entityId" : "entityId",
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech",
  "partialResults" : true
}, statusCode=200}]
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter sortOrder: (query) The Note field to sort by. Any of: [createDate]. Direction: [asc, desc]. e.g. \&quot;createDate:asc\&quot;, \&quot;createDate:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<NoteListing> 
     */
    open class func getExternalcontactsOrganizationNotesWithRequestBuilder(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<NoteListing> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<NoteListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getExternalcontactsOrganizationRelationships: String { 
        case externaldatasources = "externalDataSources"
    }

    
    
    /**
     Fetch a relationship for an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter sortOrder: (query) The Relationship field to sort by. Any of: [createDate, relationship]. Direction: [asc, desc]. e.g. \&quot;createDate:asc\&quot;, \&quot;relationship:desc\&quot; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationRelationships(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, expand: Expand_getExternalcontactsOrganizationRelationships? = nil, sortOrder: String? = nil, completion: @escaping ((_ data: RelationshipListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationRelationshipsWithRequestBuilder(externalOrganizationId: externalOrganizationId, pageSize: pageSize, pageNumber: pageNumber, expand: expand, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<RelationshipListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a relationship for an external organization
     - GET /api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "relationship" : "relationship",
    "user" : "{}",
    "externalOrganization" : "{}"
  }, {
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "relationship" : "relationship",
    "user" : "{}",
    "externalOrganization" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech",
  "partialResults" : true
}, statusCode=200}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter sortOrder: (query) The Relationship field to sort by. Any of: [createDate, relationship]. Direction: [asc, desc]. e.g. \&quot;createDate:asc\&quot;, \&quot;relationship:desc\&quot; (optional)

     - returns: RequestBuilder<RelationshipListing> 
     */
    open class func getExternalcontactsOrganizationRelationshipsWithRequestBuilder(externalOrganizationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, expand: Expand_getExternalcontactsOrganizationRelationships? = nil, sortOrder: String? = nil) -> RequestBuilder<RelationshipListing> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "expand": expand?.rawValue, 
            "sortOrder": sortOrder
        ])

        let requestBuilder: RequestBuilder<RelationshipListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     Search for external organizations
     
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter q: (query) Search query (optional)
     - parameter trustorId: (query) Search for external organizations by trustorIds (limit 25). If supplied, the &#39;q&#39; parameters is ignored. Items are returned in the order requested (optional)
     - parameter sortOrder: (query) The Organization field to sort by. Any of: [companyType, industry, name]. Direction: [asc, desc]. e.g. \&quot;companyType:asc\&quot;, \&quot;industry:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter includeTrustors: (query) (true or false) whether or not to include trustor information embedded in the externalOrganization (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizations(pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, trustorId: [String]? = nil, sortOrder: String? = nil, expand: [String]? = nil, includeTrustors: Bool? = nil, completion: @escaping ((_ data: ExternalOrganizationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, q: q, trustorId: trustorId, sortOrder: sortOrder, expand: expand, includeTrustors: includeTrustors)
        requestBuilder.execute { (response: Response<ExternalOrganizationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search for external organizations
     - GET /api/v2/externalcontacts/organizations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech",
  "partialResults" : true
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter pageNumber: (query) Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be &lt;&#x3D; 1,000) (optional)
     - parameter q: (query) Search query (optional)
     - parameter trustorId: (query) Search for external organizations by trustorIds (limit 25). If supplied, the &#39;q&#39; parameters is ignored. Items are returned in the order requested (optional)
     - parameter sortOrder: (query) The Organization field to sort by. Any of: [companyType, industry, name]. Direction: [asc, desc]. e.g. \&quot;companyType:asc\&quot;, \&quot;industry:desc\&quot; (optional)
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter includeTrustors: (query) (true or false) whether or not to include trustor information embedded in the externalOrganization (optional)

     - returns: RequestBuilder<ExternalOrganizationListing> 
     */
    open class func getExternalcontactsOrganizationsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, q: String? = nil, trustorId: [String]? = nil, sortOrder: String? = nil, expand: [String]? = nil, includeTrustors: Bool? = nil) -> RequestBuilder<ExternalOrganizationListing> {        
        let path = "/api/v2/externalcontacts/organizations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "q": q, 
            "trustorId": trustorId, 
            "sortOrder": sortOrder, 
            "expand": expand, 
            "includeTrustors": includeTrustors
        ])

        let requestBuilder: RequestBuilder<ExternalOrganizationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationsSchema(schemaId: String, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationsSchemaWithRequestBuilder(schemaId: schemaId)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a schema
     - GET /api/v2/externalcontacts/organizations/schemas/{schemaId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func getExternalcontactsOrganizationsSchemaWithRequestBuilder(schemaId: String) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/externalcontacts/organizations/schemas/{schemaId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a specific version of a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter versionId: (path) Schema version 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationsSchemaVersion(schemaId: String, versionId: String, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationsSchemaVersionWithRequestBuilder(schemaId: schemaId, versionId: versionId)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific version of a schema
     - GET /api/v2/externalcontacts/organizations/schemas/{schemaId}/versions/{versionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 
     - parameter versionId: (path) Schema version 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func getExternalcontactsOrganizationsSchemaVersionWithRequestBuilder(schemaId: String, versionId: String) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/externalcontacts/organizations/schemas/{schemaId}/versions/{versionId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let versionIdPreEscape = "\(versionId)"
        let versionIdPostEscape = versionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionId}", with: versionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get all versions of an external organization's schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationsSchemaVersions(schemaId: String, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationsSchemaVersionsWithRequestBuilder(schemaId: schemaId)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all versions of an external organization's schema
     - GET /api/v2/externalcontacts/organizations/schemas/{schemaId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func getExternalcontactsOrganizationsSchemaVersionsWithRequestBuilder(schemaId: String) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/externalcontacts/organizations/schemas/{schemaId}/versions"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get a list of schemas.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsOrganizationsSchemas(completion: @escaping ((_ data: DataSchemaListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsOrganizationsSchemasWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataSchemaListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of schemas.
     - GET /api/v2/externalcontacts/organizations/schemas
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "appliesTo" : [ "CONTACT", "CONTACT" ],
    "id" : "id",
    "version" : 0,
    "enabled" : true
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "appliesTo" : [ "CONTACT", "CONTACT" ],
    "id" : "id",
    "version" : 0,
    "enabled" : true
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<DataSchemaListing> 
     */
    open class func getExternalcontactsOrganizationsSchemasWithRequestBuilder() -> RequestBuilder<DataSchemaListing> {        
        let path = "/api/v2/externalcontacts/organizations/schemas"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchemaListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum Expand_getExternalcontactsRelationship: String { 
        case externaldatasources = "externalDataSources"
    }

    
    /**
     Fetch a relationship
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter expand: (query) which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsRelationship(relationshipId: String, expand: Expand_getExternalcontactsRelationship? = nil, completion: @escaping ((_ data: Relationship?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsRelationshipWithRequestBuilder(relationshipId: relationshipId, expand: expand)
        requestBuilder.execute { (response: Response<Relationship>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a relationship
     - GET /api/v2/externalcontacts/relationships/{relationshipId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "relationship" : "relationship",
  "user" : "{}",
  "externalOrganization" : "{}"
}, statusCode=200}]
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter expand: (query) which fields, if any, to expand (optional)

     - returns: RequestBuilder<Relationship> 
     */
    open class func getExternalcontactsRelationshipWithRequestBuilder(relationshipId: String, expand: Expand_getExternalcontactsRelationship? = nil) -> RequestBuilder<Relationship> {        
        var path = "/api/v2/externalcontacts/relationships/{relationshipId}"
        let relationshipIdPreEscape = "\(relationshipId)"
        let relationshipIdPostEscape = relationshipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relationshipId}", with: relationshipIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<Relationship>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Look up contacts and externalOrganizations based on an attribute. Maximum of 25 values returned.
     
     - parameter lookupVal: (query) User supplied value to lookup contacts/externalOrganizations (supports email addresses, e164 phone numbers, Twitter screen names) 
     - parameter expand: (query) which field, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsReversewhitepageslookup(lookupVal: String, expand: [String]? = nil, completion: @escaping ((_ data: ReverseWhitepagesLookupResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsReversewhitepageslookupWithRequestBuilder(lookupVal: lookupVal, expand: expand)
        requestBuilder.execute { (response: Response<ReverseWhitepagesLookupResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Look up contacts and externalOrganizations based on an attribute. Maximum of 25 values returned.
     - GET /api/v2/externalcontacts/reversewhitepageslookup
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalOrganizations" : [ {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "contacts" : [ {
    "schema" : "{}",
    "lastName" : "lastName",
    "canonicalContact" : "{}",
    "workEmail" : "workEmail",
    "customFields" : {
      "key" : "{}"
    },
    "mergeOperation" : "{}",
    "title" : "title",
    "type" : "Ephemeral",
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "personalEmail" : "personalEmail",
    "mergeSet" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "externalSystemUrl" : "externalSystemUrl",
    "id" : "id",
    "otherEmail" : "otherEmail",
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "homePhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "facebookId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "scopedId" : "scopedId"
      }, {
        "scopedId" : "scopedId"
      } ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "lineId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "userId" : "userId"
      }, {
        "userId" : "userId"
      } ]
    },
    "externalOrganization" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "firstName" : "firstName",
    "otherPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "whatsAppId" : {
      "phoneNumber" : "{}",
      "displayName" : "displayName"
    },
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "middleName" : "middleName",
    "workPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "salutation" : "salutation",
    "cellPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "surveyOptOut" : true
  }, {
    "schema" : "{}",
    "lastName" : "lastName",
    "canonicalContact" : "{}",
    "workEmail" : "workEmail",
    "customFields" : {
      "key" : "{}"
    },
    "mergeOperation" : "{}",
    "title" : "title",
    "type" : "Ephemeral",
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "personalEmail" : "personalEmail",
    "mergeSet" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "externalSystemUrl" : "externalSystemUrl",
    "id" : "id",
    "otherEmail" : "otherEmail",
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "homePhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "facebookId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "scopedId" : "scopedId"
      }, {
        "scopedId" : "scopedId"
      } ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "lineId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "userId" : "userId"
      }, {
        "userId" : "userId"
      } ]
    },
    "externalOrganization" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "firstName" : "firstName",
    "otherPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "whatsAppId" : {
      "phoneNumber" : "{}",
      "displayName" : "displayName"
    },
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "middleName" : "middleName",
    "workPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "salutation" : "salutation",
    "cellPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "surveyOptOut" : true
  } ]
}, statusCode=200}]
     
     - parameter lookupVal: (query) User supplied value to lookup contacts/externalOrganizations (supports email addresses, e164 phone numbers, Twitter screen names) 
     - parameter expand: (query) which field, if any, to expand (optional)

     - returns: RequestBuilder<ReverseWhitepagesLookupResult> 
     */
    open class func getExternalcontactsReversewhitepageslookupWithRequestBuilder(lookupVal: String, expand: [String]? = nil) -> RequestBuilder<ReverseWhitepagesLookupResult> {        
        let path = "/api/v2/externalcontacts/reversewhitepageslookup"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "lookupVal": lookupVal, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<ReverseWhitepagesLookupResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Scan for external contacts using paging
     
     - parameter limit: (query) The number of contacts per page; must be between 10 and 200, default is 100) (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsScanContacts(limit: Int? = nil, cursor: String? = nil, completion: @escaping ((_ data: CursorContactListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsScanContactsWithRequestBuilder(limit: limit, cursor: cursor)
        requestBuilder.execute { (response: Response<CursorContactListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Scan for external contacts using paging
     - GET /api/v2/externalcontacts/scan/contacts
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursors" : "{}",
  "entities" : [ {
    "schema" : "{}",
    "lastName" : "lastName",
    "canonicalContact" : "{}",
    "workEmail" : "workEmail",
    "customFields" : {
      "key" : "{}"
    },
    "mergeOperation" : "{}",
    "title" : "title",
    "type" : "Ephemeral",
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "personalEmail" : "personalEmail",
    "mergeSet" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "externalSystemUrl" : "externalSystemUrl",
    "id" : "id",
    "otherEmail" : "otherEmail",
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "homePhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "facebookId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "scopedId" : "scopedId"
      }, {
        "scopedId" : "scopedId"
      } ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "lineId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "userId" : "userId"
      }, {
        "userId" : "userId"
      } ]
    },
    "externalOrganization" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "firstName" : "firstName",
    "otherPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "whatsAppId" : {
      "phoneNumber" : "{}",
      "displayName" : "displayName"
    },
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "middleName" : "middleName",
    "workPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "salutation" : "salutation",
    "cellPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "surveyOptOut" : true
  }, {
    "schema" : "{}",
    "lastName" : "lastName",
    "canonicalContact" : "{}",
    "workEmail" : "workEmail",
    "customFields" : {
      "key" : "{}"
    },
    "mergeOperation" : "{}",
    "title" : "title",
    "type" : "Ephemeral",
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "personalEmail" : "personalEmail",
    "mergeSet" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "externalSystemUrl" : "externalSystemUrl",
    "id" : "id",
    "otherEmail" : "otherEmail",
    "createDate" : "2000-01-23T04:56:07.000+00:00",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "homePhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "facebookId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "scopedId" : "scopedId"
      }, {
        "scopedId" : "scopedId"
      } ]
    },
    "selfUri" : "https://openapi-generator.tech",
    "lineId" : {
      "displayName" : "displayName",
      "ids" : [ {
        "userId" : "userId"
      }, {
        "userId" : "userId"
      } ]
    },
    "externalOrganization" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "firstName" : "firstName",
    "otherPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "whatsAppId" : {
      "phoneNumber" : "{}",
      "displayName" : "displayName"
    },
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "middleName" : "middleName",
    "workPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "salutation" : "salutation",
    "cellPhone" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "surveyOptOut" : true
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter limit: (query) The number of contacts per page; must be between 10 and 200, default is 100) (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL (optional)

     - returns: RequestBuilder<CursorContactListing> 
     */
    open class func getExternalcontactsScanContactsWithRequestBuilder(limit: Int? = nil, cursor: String? = nil) -> RequestBuilder<CursorContactListing> {        
        let path = "/api/v2/externalcontacts/scan/contacts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<CursorContactListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Scan for notes using paging
     
     - parameter limit: (query) The number of notes per page; must be between 10 and 200, default is 100) (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsScanNotes(limit: Int? = nil, cursor: String? = nil, completion: @escaping ((_ data: CursorNoteListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsScanNotesWithRequestBuilder(limit: limit, cursor: cursor)
        requestBuilder.execute { (response: Response<CursorNoteListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Scan for notes using paging
     - GET /api/v2/externalcontacts/scan/notes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursors" : "{}",
  "entities" : [ {
    "noteText" : "noteText",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "entityType" : "contact",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "entityId" : "entityId",
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "noteText" : "noteText",
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "entityType" : "contact",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "entityId" : "entityId",
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter limit: (query) The number of notes per page; must be between 10 and 200, default is 100) (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL (optional)

     - returns: RequestBuilder<CursorNoteListing> 
     */
    open class func getExternalcontactsScanNotesWithRequestBuilder(limit: Int? = nil, cursor: String? = nil) -> RequestBuilder<CursorNoteListing> {        
        let path = "/api/v2/externalcontacts/scan/notes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<CursorNoteListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Scan for external organizations using paging
     
     - parameter limit: (query) The number of organizations per page; must be between 10 and 200, default is 100) (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsScanOrganizations(limit: Int? = nil, cursor: String? = nil, completion: @escaping ((_ data: CursorOrganizationListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsScanOrganizationsWithRequestBuilder(limit: limit, cursor: cursor)
        requestBuilder.execute { (response: Response<CursorOrganizationListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Scan for external organizations using paging
     - GET /api/v2/externalcontacts/scan/organizations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursors" : "{}",
  "entities" : [ {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter limit: (query) The number of organizations per page; must be between 10 and 200, default is 100) (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL (optional)

     - returns: RequestBuilder<CursorOrganizationListing> 
     */
    open class func getExternalcontactsScanOrganizationsWithRequestBuilder(limit: Int? = nil, cursor: String? = nil) -> RequestBuilder<CursorOrganizationListing> {        
        let path = "/api/v2/externalcontacts/scan/organizations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<CursorOrganizationListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Scan for relationships
     
     - parameter limit: (query) The number of relationships per page; must be between 10 and 200, default is 100) (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsScanRelationships(limit: Int? = nil, cursor: String? = nil, completion: @escaping ((_ data: CursorRelationshipListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsScanRelationshipsWithRequestBuilder(limit: limit, cursor: cursor)
        requestBuilder.execute { (response: Response<CursorRelationshipListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Scan for relationships
     - GET /api/v2/externalcontacts/scan/relationships
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursors" : "{}",
  "entities" : [ {
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "relationship" : "relationship",
    "user" : "{}",
    "externalOrganization" : "{}"
  }, {
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "relationship" : "relationship",
    "user" : "{}",
    "externalOrganization" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter limit: (query) The number of relationships per page; must be between 10 and 200, default is 100) (optional)
     - parameter cursor: (query) Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL (optional)

     - returns: RequestBuilder<CursorRelationshipListing> 
     */
    open class func getExternalcontactsScanRelationshipsWithRequestBuilder(limit: Int? = nil, cursor: String? = nil) -> RequestBuilder<CursorRelationshipListing> {        
        let path = "/api/v2/externalcontacts/scan/relationships"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(), 
            "cursor": cursor
        ])

        let requestBuilder: RequestBuilder<CursorRelationshipListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Claim or release identifiers for a contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter body: (body) ClaimRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchExternalcontactsContactIdentifiers(contactId: String, body: IdentifierClaimRequest, completion: @escaping ((_ data: ContactIdentifier?,_ error: Error?) -> Void)) {
        let requestBuilder = patchExternalcontactsContactIdentifiersWithRequestBuilder(contactId: contactId, body: body)
        requestBuilder.execute { (response: Response<ContactIdentifier>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Claim or release identifiers for a contact
     - PATCH /api/v2/externalcontacts/contacts/{contactId}/identifiers
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "type" : "SocialLine",
  "value" : "value"
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter body: (body) ClaimRequest 

     - returns: RequestBuilder<ContactIdentifier> 
     */
    open class func patchExternalcontactsContactIdentifiersWithRequestBuilder(contactId: String, body: IdentifierClaimRequest) -> RequestBuilder<ContactIdentifier> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/identifiers"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactIdentifier>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Bulk fetch contacts
     
     - parameter body: (body) Contact ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkContacts(body: BulkIdsRequest, completion: @escaping ((_ data: BulkFetchContactsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkContactsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkFetchContactsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk fetch contacts
     - POST /api/v2/externalcontacts/bulk/contacts
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 6, 6 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "lastName" : "lastName",
      "canonicalContact" : "{}",
      "workEmail" : "workEmail",
      "customFields" : {
        "key" : "{}"
      },
      "mergeOperation" : "{}",
      "title" : "title",
      "type" : "Ephemeral",
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "personalEmail" : "personalEmail",
      "mergeSet" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ],
      "externalSystemUrl" : "externalSystemUrl",
      "id" : "id",
      "otherEmail" : "otherEmail",
      "createDate" : "2000-01-23T04:56:07.000+00:00",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "homePhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "facebookId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "scopedId" : "scopedId"
        }, {
          "scopedId" : "scopedId"
        } ]
      },
      "selfUri" : "https://openapi-generator.tech",
      "lineId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "userId" : "userId"
        }, {
          "userId" : "userId"
        } ]
      },
      "externalOrganization" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "firstName" : "firstName",
      "otherPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "whatsAppId" : {
        "phoneNumber" : "{}",
        "displayName" : "displayName"
      },
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "middleName" : "middleName",
      "workPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "salutation" : "salutation",
      "cellPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "surveyOptOut" : true
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "lastName" : "lastName",
      "canonicalContact" : "{}",
      "workEmail" : "workEmail",
      "customFields" : {
        "key" : "{}"
      },
      "mergeOperation" : "{}",
      "title" : "title",
      "type" : "Ephemeral",
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "personalEmail" : "personalEmail",
      "mergeSet" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ],
      "externalSystemUrl" : "externalSystemUrl",
      "id" : "id",
      "otherEmail" : "otherEmail",
      "createDate" : "2000-01-23T04:56:07.000+00:00",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "homePhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "facebookId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "scopedId" : "scopedId"
        }, {
          "scopedId" : "scopedId"
        } ]
      },
      "selfUri" : "https://openapi-generator.tech",
      "lineId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "userId" : "userId"
        }, {
          "userId" : "userId"
        } ]
      },
      "externalOrganization" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "firstName" : "firstName",
      "otherPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "whatsAppId" : {
        "phoneNumber" : "{}",
        "displayName" : "displayName"
      },
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "middleName" : "middleName",
      "workPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "salutation" : "salutation",
      "cellPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "surveyOptOut" : true
    }
  } ],
  "errorCount" : 0
}, statusCode=200}]
     
     - parameter body: (body) Contact ids 

     - returns: RequestBuilder<BulkFetchContactsResponse> 
     */
    open class func postExternalcontactsBulkContactsWithRequestBuilder(body: BulkIdsRequest) -> RequestBuilder<BulkFetchContactsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/contacts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkFetchContactsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk add contacts
     
     - parameter body: (body) Contacts 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkContactsAdd(body: BulkContactsRequest, completion: @escaping ((_ data: BulkContactsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkContactsAddWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkContactsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk add contacts
     - POST /api/v2/externalcontacts/bulk/contacts/add
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 2, 2 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "schema" : "{}",
        "lastName" : "lastName",
        "canonicalContact" : "{}",
        "workEmail" : "workEmail",
        "customFields" : {
          "key" : "{}"
        },
        "mergeOperation" : "{}",
        "title" : "title",
        "type" : "Ephemeral",
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "personalEmail" : "personalEmail",
        "mergeSet" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id"
        } ],
        "externalSystemUrl" : "externalSystemUrl",
        "id" : "id",
        "otherEmail" : "otherEmail",
        "createDate" : "2000-01-23T04:56:07.000+00:00",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "homePhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "facebookId" : {
          "displayName" : "displayName",
          "ids" : [ {
            "scopedId" : "scopedId"
          }, {
            "scopedId" : "scopedId"
          } ]
        },
        "selfUri" : "https://openapi-generator.tech",
        "lineId" : {
          "displayName" : "displayName",
          "ids" : [ {
            "userId" : "userId"
          }, {
            "userId" : "userId"
          } ]
        },
        "externalOrganization" : {
          "schema" : "{}",
          "address" : {
            "address2" : "address2",
            "city" : "city",
            "address1" : "address1",
            "countryCode" : "countryCode",
            "postalCode" : "postalCode",
            "state" : "state"
          },
          "modifyDate" : "2000-01-23T04:56:07.000+00:00",
          "companyType" : "companyType",
          "customFields" : {
            "key" : "{}"
          },
          "selfUri" : "https://openapi-generator.tech",
          "industry" : "industry",
          "employeeCount" : 6,
          "tickers" : [ {
            "symbol" : "symbol",
            "exchange" : "exchange"
          }, {
            "symbol" : "symbol",
            "exchange" : "exchange"
          } ],
          "twitterId" : {
            "profileUrl" : "profileUrl",
            "name" : "name",
            "verified" : true,
            "id" : "id",
            "screenName" : "screenName"
          },
          "primaryContactId" : "primaryContactId",
          "tags" : [ "tags", "tags" ],
          "revenue" : 1,
          "phoneNumber" : {
            "extension" : 0,
            "normalizationCountryCode" : "normalizationCountryCode",
            "e164" : "e164",
            "acceptsSMS" : true,
            "countryCode" : "countryCode",
            "display" : "display",
            "userInput" : "userInput"
          },
          "externalSystemUrl" : "externalSystemUrl",
          "externalDataSources" : [ {
            "platform" : "SALESFORCE",
            "url" : "url"
          }, {
            "platform" : "SALESFORCE",
            "url" : "url"
          } ],
          "name" : "name",
          "faxNumber" : {
            "extension" : 0,
            "normalizationCountryCode" : "normalizationCountryCode",
            "e164" : "e164",
            "acceptsSMS" : true,
            "countryCode" : "countryCode",
            "display" : "display",
            "userInput" : "userInput"
          },
          "trustor" : {
            "authorization" : "{}",
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "createdBy" : "{}",
            "organization" : "{}",
            "selfUri" : "https://openapi-generator.tech",
            "id" : "id",
            "enabled" : true
          },
          "websites" : [ "websites", "websites" ],
          "id" : "id",
          "createDate" : "2000-01-23T04:56:07.000+00:00"
        },
        "firstName" : "firstName",
        "otherPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "whatsAppId" : {
          "phoneNumber" : "{}",
          "displayName" : "displayName"
        },
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "middleName" : "middleName",
        "workPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "salutation" : "salutation",
        "cellPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "surveyOptOut" : true
      },
      "status" : 5
    },
    "entity" : {
      "schema" : "{}",
      "lastName" : "lastName",
      "canonicalContact" : "{}",
      "workEmail" : "workEmail",
      "customFields" : {
        "key" : "{}"
      },
      "mergeOperation" : "{}",
      "title" : "title",
      "type" : "Ephemeral",
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "personalEmail" : "personalEmail",
      "mergeSet" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ],
      "externalSystemUrl" : "externalSystemUrl",
      "id" : "id",
      "otherEmail" : "otherEmail",
      "createDate" : "2000-01-23T04:56:07.000+00:00",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "homePhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "facebookId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "scopedId" : "scopedId"
        }, {
          "scopedId" : "scopedId"
        } ]
      },
      "selfUri" : "https://openapi-generator.tech",
      "lineId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "userId" : "userId"
        }, {
          "userId" : "userId"
        } ]
      },
      "externalOrganization" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "firstName" : "firstName",
      "otherPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "whatsAppId" : {
        "phoneNumber" : "{}",
        "displayName" : "displayName"
      },
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "middleName" : "middleName",
      "workPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "salutation" : "salutation",
      "cellPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "surveyOptOut" : true
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "schema" : "{}",
        "lastName" : "lastName",
        "canonicalContact" : "{}",
        "workEmail" : "workEmail",
        "customFields" : {
          "key" : "{}"
        },
        "mergeOperation" : "{}",
        "title" : "title",
        "type" : "Ephemeral",
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "personalEmail" : "personalEmail",
        "mergeSet" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id"
        } ],
        "externalSystemUrl" : "externalSystemUrl",
        "id" : "id",
        "otherEmail" : "otherEmail",
        "createDate" : "2000-01-23T04:56:07.000+00:00",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "homePhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "facebookId" : {
          "displayName" : "displayName",
          "ids" : [ {
            "scopedId" : "scopedId"
          }, {
            "scopedId" : "scopedId"
          } ]
        },
        "selfUri" : "https://openapi-generator.tech",
        "lineId" : {
          "displayName" : "displayName",
          "ids" : [ {
            "userId" : "userId"
          }, {
            "userId" : "userId"
          } ]
        },
        "externalOrganization" : {
          "schema" : "{}",
          "address" : {
            "address2" : "address2",
            "city" : "city",
            "address1" : "address1",
            "countryCode" : "countryCode",
            "postalCode" : "postalCode",
            "state" : "state"
          },
          "modifyDate" : "2000-01-23T04:56:07.000+00:00",
          "companyType" : "companyType",
          "customFields" : {
            "key" : "{}"
          },
          "selfUri" : "https://openapi-generator.tech",
          "industry" : "industry",
          "employeeCount" : 6,
          "tickers" : [ {
            "symbol" : "symbol",
            "exchange" : "exchange"
          }, {
            "symbol" : "symbol",
            "exchange" : "exchange"
          } ],
          "twitterId" : {
            "profileUrl" : "profileUrl",
            "name" : "name",
            "verified" : true,
            "id" : "id",
            "screenName" : "screenName"
          },
          "primaryContactId" : "primaryContactId",
          "tags" : [ "tags", "tags" ],
          "revenue" : 1,
          "phoneNumber" : {
            "extension" : 0,
            "normalizationCountryCode" : "normalizationCountryCode",
            "e164" : "e164",
            "acceptsSMS" : true,
            "countryCode" : "countryCode",
            "display" : "display",
            "userInput" : "userInput"
          },
          "externalSystemUrl" : "externalSystemUrl",
          "externalDataSources" : [ {
            "platform" : "SALESFORCE",
            "url" : "url"
          }, {
            "platform" : "SALESFORCE",
            "url" : "url"
          } ],
          "name" : "name",
          "faxNumber" : {
            "extension" : 0,
            "normalizationCountryCode" : "normalizationCountryCode",
            "e164" : "e164",
            "acceptsSMS" : true,
            "countryCode" : "countryCode",
            "display" : "display",
            "userInput" : "userInput"
          },
          "trustor" : {
            "authorization" : "{}",
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "createdBy" : "{}",
            "organization" : "{}",
            "selfUri" : "https://openapi-generator.tech",
            "id" : "id",
            "enabled" : true
          },
          "websites" : [ "websites", "websites" ],
          "id" : "id",
          "createDate" : "2000-01-23T04:56:07.000+00:00"
        },
        "firstName" : "firstName",
        "otherPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "whatsAppId" : {
          "phoneNumber" : "{}",
          "displayName" : "displayName"
        },
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "middleName" : "middleName",
        "workPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "salutation" : "salutation",
        "cellPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "surveyOptOut" : true
      },
      "status" : 5
    },
    "entity" : {
      "schema" : "{}",
      "lastName" : "lastName",
      "canonicalContact" : "{}",
      "workEmail" : "workEmail",
      "customFields" : {
        "key" : "{}"
      },
      "mergeOperation" : "{}",
      "title" : "title",
      "type" : "Ephemeral",
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "personalEmail" : "personalEmail",
      "mergeSet" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ],
      "externalSystemUrl" : "externalSystemUrl",
      "id" : "id",
      "otherEmail" : "otherEmail",
      "createDate" : "2000-01-23T04:56:07.000+00:00",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "homePhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "facebookId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "scopedId" : "scopedId"
        }, {
          "scopedId" : "scopedId"
        } ]
      },
      "selfUri" : "https://openapi-generator.tech",
      "lineId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "userId" : "userId"
        }, {
          "userId" : "userId"
        } ]
      },
      "externalOrganization" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "firstName" : "firstName",
      "otherPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "whatsAppId" : {
        "phoneNumber" : "{}",
        "displayName" : "displayName"
      },
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "middleName" : "middleName",
      "workPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "salutation" : "salutation",
      "cellPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "surveyOptOut" : true
    }
  } ],
  "errorCount" : 5
}, statusCode=200}]
     
     - parameter body: (body) Contacts 

     - returns: RequestBuilder<BulkContactsResponse> 
     */
    open class func postExternalcontactsBulkContactsAddWithRequestBuilder(body: BulkContactsRequest) -> RequestBuilder<BulkContactsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/contacts/add"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkContactsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk remove contacts
     
     - parameter body: (body) Contact ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkContactsRemove(body: BulkIdsRequest, completion: @escaping ((_ data: BulkDeleteResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkContactsRemoveWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkDeleteResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk remove contacts
     - POST /api/v2/externalcontacts/bulk/contacts/remove
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : "{}"
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : "{}"
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Contact ids 

     - returns: RequestBuilder<BulkDeleteResponse> 
     */
    open class func postExternalcontactsBulkContactsRemoveWithRequestBuilder(body: BulkIdsRequest) -> RequestBuilder<BulkDeleteResponse> {        
        let path = "/api/v2/externalcontacts/bulk/contacts/remove"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkDeleteResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk fetch unresolved ancestor contacts
     
     - parameter body: (body) Contact ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkContactsUnresolved(body: BulkIdsRequest, completion: @escaping ((_ data: BulkFetchContactsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkContactsUnresolvedWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkFetchContactsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk fetch unresolved ancestor contacts
     - POST /api/v2/externalcontacts/bulk/contacts/unresolved
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 6, 6 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "lastName" : "lastName",
      "canonicalContact" : "{}",
      "workEmail" : "workEmail",
      "customFields" : {
        "key" : "{}"
      },
      "mergeOperation" : "{}",
      "title" : "title",
      "type" : "Ephemeral",
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "personalEmail" : "personalEmail",
      "mergeSet" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ],
      "externalSystemUrl" : "externalSystemUrl",
      "id" : "id",
      "otherEmail" : "otherEmail",
      "createDate" : "2000-01-23T04:56:07.000+00:00",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "homePhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "facebookId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "scopedId" : "scopedId"
        }, {
          "scopedId" : "scopedId"
        } ]
      },
      "selfUri" : "https://openapi-generator.tech",
      "lineId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "userId" : "userId"
        }, {
          "userId" : "userId"
        } ]
      },
      "externalOrganization" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "firstName" : "firstName",
      "otherPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "whatsAppId" : {
        "phoneNumber" : "{}",
        "displayName" : "displayName"
      },
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "middleName" : "middleName",
      "workPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "salutation" : "salutation",
      "cellPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "surveyOptOut" : true
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "lastName" : "lastName",
      "canonicalContact" : "{}",
      "workEmail" : "workEmail",
      "customFields" : {
        "key" : "{}"
      },
      "mergeOperation" : "{}",
      "title" : "title",
      "type" : "Ephemeral",
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "personalEmail" : "personalEmail",
      "mergeSet" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ],
      "externalSystemUrl" : "externalSystemUrl",
      "id" : "id",
      "otherEmail" : "otherEmail",
      "createDate" : "2000-01-23T04:56:07.000+00:00",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "homePhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "facebookId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "scopedId" : "scopedId"
        }, {
          "scopedId" : "scopedId"
        } ]
      },
      "selfUri" : "https://openapi-generator.tech",
      "lineId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "userId" : "userId"
        }, {
          "userId" : "userId"
        } ]
      },
      "externalOrganization" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "firstName" : "firstName",
      "otherPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "whatsAppId" : {
        "phoneNumber" : "{}",
        "displayName" : "displayName"
      },
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "middleName" : "middleName",
      "workPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "salutation" : "salutation",
      "cellPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "surveyOptOut" : true
    }
  } ],
  "errorCount" : 0
}, statusCode=200}]
     
     - parameter body: (body) Contact ids 

     - returns: RequestBuilder<BulkFetchContactsResponse> 
     */
    open class func postExternalcontactsBulkContactsUnresolvedWithRequestBuilder(body: BulkIdsRequest) -> RequestBuilder<BulkFetchContactsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/contacts/unresolved"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkFetchContactsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk update contacts
     
     - parameter body: (body) Contacts 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkContactsUpdate(body: BulkContactsRequest, completion: @escaping ((_ data: BulkContactsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkContactsUpdateWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkContactsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk update contacts
     - POST /api/v2/externalcontacts/bulk/contacts/update
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 2, 2 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "schema" : "{}",
        "lastName" : "lastName",
        "canonicalContact" : "{}",
        "workEmail" : "workEmail",
        "customFields" : {
          "key" : "{}"
        },
        "mergeOperation" : "{}",
        "title" : "title",
        "type" : "Ephemeral",
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "personalEmail" : "personalEmail",
        "mergeSet" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id"
        } ],
        "externalSystemUrl" : "externalSystemUrl",
        "id" : "id",
        "otherEmail" : "otherEmail",
        "createDate" : "2000-01-23T04:56:07.000+00:00",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "homePhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "facebookId" : {
          "displayName" : "displayName",
          "ids" : [ {
            "scopedId" : "scopedId"
          }, {
            "scopedId" : "scopedId"
          } ]
        },
        "selfUri" : "https://openapi-generator.tech",
        "lineId" : {
          "displayName" : "displayName",
          "ids" : [ {
            "userId" : "userId"
          }, {
            "userId" : "userId"
          } ]
        },
        "externalOrganization" : {
          "schema" : "{}",
          "address" : {
            "address2" : "address2",
            "city" : "city",
            "address1" : "address1",
            "countryCode" : "countryCode",
            "postalCode" : "postalCode",
            "state" : "state"
          },
          "modifyDate" : "2000-01-23T04:56:07.000+00:00",
          "companyType" : "companyType",
          "customFields" : {
            "key" : "{}"
          },
          "selfUri" : "https://openapi-generator.tech",
          "industry" : "industry",
          "employeeCount" : 6,
          "tickers" : [ {
            "symbol" : "symbol",
            "exchange" : "exchange"
          }, {
            "symbol" : "symbol",
            "exchange" : "exchange"
          } ],
          "twitterId" : {
            "profileUrl" : "profileUrl",
            "name" : "name",
            "verified" : true,
            "id" : "id",
            "screenName" : "screenName"
          },
          "primaryContactId" : "primaryContactId",
          "tags" : [ "tags", "tags" ],
          "revenue" : 1,
          "phoneNumber" : {
            "extension" : 0,
            "normalizationCountryCode" : "normalizationCountryCode",
            "e164" : "e164",
            "acceptsSMS" : true,
            "countryCode" : "countryCode",
            "display" : "display",
            "userInput" : "userInput"
          },
          "externalSystemUrl" : "externalSystemUrl",
          "externalDataSources" : [ {
            "platform" : "SALESFORCE",
            "url" : "url"
          }, {
            "platform" : "SALESFORCE",
            "url" : "url"
          } ],
          "name" : "name",
          "faxNumber" : {
            "extension" : 0,
            "normalizationCountryCode" : "normalizationCountryCode",
            "e164" : "e164",
            "acceptsSMS" : true,
            "countryCode" : "countryCode",
            "display" : "display",
            "userInput" : "userInput"
          },
          "trustor" : {
            "authorization" : "{}",
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "createdBy" : "{}",
            "organization" : "{}",
            "selfUri" : "https://openapi-generator.tech",
            "id" : "id",
            "enabled" : true
          },
          "websites" : [ "websites", "websites" ],
          "id" : "id",
          "createDate" : "2000-01-23T04:56:07.000+00:00"
        },
        "firstName" : "firstName",
        "otherPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "whatsAppId" : {
          "phoneNumber" : "{}",
          "displayName" : "displayName"
        },
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "middleName" : "middleName",
        "workPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "salutation" : "salutation",
        "cellPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "surveyOptOut" : true
      },
      "status" : 5
    },
    "entity" : {
      "schema" : "{}",
      "lastName" : "lastName",
      "canonicalContact" : "{}",
      "workEmail" : "workEmail",
      "customFields" : {
        "key" : "{}"
      },
      "mergeOperation" : "{}",
      "title" : "title",
      "type" : "Ephemeral",
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "personalEmail" : "personalEmail",
      "mergeSet" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ],
      "externalSystemUrl" : "externalSystemUrl",
      "id" : "id",
      "otherEmail" : "otherEmail",
      "createDate" : "2000-01-23T04:56:07.000+00:00",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "homePhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "facebookId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "scopedId" : "scopedId"
        }, {
          "scopedId" : "scopedId"
        } ]
      },
      "selfUri" : "https://openapi-generator.tech",
      "lineId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "userId" : "userId"
        }, {
          "userId" : "userId"
        } ]
      },
      "externalOrganization" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "firstName" : "firstName",
      "otherPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "whatsAppId" : {
        "phoneNumber" : "{}",
        "displayName" : "displayName"
      },
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "middleName" : "middleName",
      "workPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "salutation" : "salutation",
      "cellPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "surveyOptOut" : true
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "schema" : "{}",
        "lastName" : "lastName",
        "canonicalContact" : "{}",
        "workEmail" : "workEmail",
        "customFields" : {
          "key" : "{}"
        },
        "mergeOperation" : "{}",
        "title" : "title",
        "type" : "Ephemeral",
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "personalEmail" : "personalEmail",
        "mergeSet" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id"
        } ],
        "externalSystemUrl" : "externalSystemUrl",
        "id" : "id",
        "otherEmail" : "otherEmail",
        "createDate" : "2000-01-23T04:56:07.000+00:00",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "homePhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "facebookId" : {
          "displayName" : "displayName",
          "ids" : [ {
            "scopedId" : "scopedId"
          }, {
            "scopedId" : "scopedId"
          } ]
        },
        "selfUri" : "https://openapi-generator.tech",
        "lineId" : {
          "displayName" : "displayName",
          "ids" : [ {
            "userId" : "userId"
          }, {
            "userId" : "userId"
          } ]
        },
        "externalOrganization" : {
          "schema" : "{}",
          "address" : {
            "address2" : "address2",
            "city" : "city",
            "address1" : "address1",
            "countryCode" : "countryCode",
            "postalCode" : "postalCode",
            "state" : "state"
          },
          "modifyDate" : "2000-01-23T04:56:07.000+00:00",
          "companyType" : "companyType",
          "customFields" : {
            "key" : "{}"
          },
          "selfUri" : "https://openapi-generator.tech",
          "industry" : "industry",
          "employeeCount" : 6,
          "tickers" : [ {
            "symbol" : "symbol",
            "exchange" : "exchange"
          }, {
            "symbol" : "symbol",
            "exchange" : "exchange"
          } ],
          "twitterId" : {
            "profileUrl" : "profileUrl",
            "name" : "name",
            "verified" : true,
            "id" : "id",
            "screenName" : "screenName"
          },
          "primaryContactId" : "primaryContactId",
          "tags" : [ "tags", "tags" ],
          "revenue" : 1,
          "phoneNumber" : {
            "extension" : 0,
            "normalizationCountryCode" : "normalizationCountryCode",
            "e164" : "e164",
            "acceptsSMS" : true,
            "countryCode" : "countryCode",
            "display" : "display",
            "userInput" : "userInput"
          },
          "externalSystemUrl" : "externalSystemUrl",
          "externalDataSources" : [ {
            "platform" : "SALESFORCE",
            "url" : "url"
          }, {
            "platform" : "SALESFORCE",
            "url" : "url"
          } ],
          "name" : "name",
          "faxNumber" : {
            "extension" : 0,
            "normalizationCountryCode" : "normalizationCountryCode",
            "e164" : "e164",
            "acceptsSMS" : true,
            "countryCode" : "countryCode",
            "display" : "display",
            "userInput" : "userInput"
          },
          "trustor" : {
            "authorization" : "{}",
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "createdBy" : "{}",
            "organization" : "{}",
            "selfUri" : "https://openapi-generator.tech",
            "id" : "id",
            "enabled" : true
          },
          "websites" : [ "websites", "websites" ],
          "id" : "id",
          "createDate" : "2000-01-23T04:56:07.000+00:00"
        },
        "firstName" : "firstName",
        "otherPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "whatsAppId" : {
          "phoneNumber" : "{}",
          "displayName" : "displayName"
        },
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "middleName" : "middleName",
        "workPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "salutation" : "salutation",
        "cellPhone" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "surveyOptOut" : true
      },
      "status" : 5
    },
    "entity" : {
      "schema" : "{}",
      "lastName" : "lastName",
      "canonicalContact" : "{}",
      "workEmail" : "workEmail",
      "customFields" : {
        "key" : "{}"
      },
      "mergeOperation" : "{}",
      "title" : "title",
      "type" : "Ephemeral",
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "personalEmail" : "personalEmail",
      "mergeSet" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id"
      } ],
      "externalSystemUrl" : "externalSystemUrl",
      "id" : "id",
      "otherEmail" : "otherEmail",
      "createDate" : "2000-01-23T04:56:07.000+00:00",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "homePhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "facebookId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "scopedId" : "scopedId"
        }, {
          "scopedId" : "scopedId"
        } ]
      },
      "selfUri" : "https://openapi-generator.tech",
      "lineId" : {
        "displayName" : "displayName",
        "ids" : [ {
          "userId" : "userId"
        }, {
          "userId" : "userId"
        } ]
      },
      "externalOrganization" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "firstName" : "firstName",
      "otherPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "whatsAppId" : {
        "phoneNumber" : "{}",
        "displayName" : "displayName"
      },
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "middleName" : "middleName",
      "workPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "salutation" : "salutation",
      "cellPhone" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "surveyOptOut" : true
    }
  } ],
  "errorCount" : 5
}, statusCode=200}]
     
     - parameter body: (body) Contacts 

     - returns: RequestBuilder<BulkContactsResponse> 
     */
    open class func postExternalcontactsBulkContactsUpdateWithRequestBuilder(body: BulkContactsRequest) -> RequestBuilder<BulkContactsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/contacts/update"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkContactsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk fetch notes
     
     - parameter body: (body) Note ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkNotes(body: BulkIdsRequest, completion: @escaping ((_ data: BulkFetchNotesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkNotesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkFetchNotesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk fetch notes
     - POST /api/v2/externalcontacts/bulk/notes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 6, 6 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "noteText" : "noteText",
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "entityType" : "contact",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "entityId" : "entityId",
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "noteText" : "noteText",
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "entityType" : "contact",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "entityId" : "entityId",
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  } ],
  "errorCount" : 0
}, statusCode=200}]
     
     - parameter body: (body) Note ids 

     - returns: RequestBuilder<BulkFetchNotesResponse> 
     */
    open class func postExternalcontactsBulkNotesWithRequestBuilder(body: BulkIdsRequest) -> RequestBuilder<BulkFetchNotesResponse> {        
        let path = "/api/v2/externalcontacts/bulk/notes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkFetchNotesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk add notes
     
     - parameter body: (body) Notes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkNotesAdd(body: BulkNotesRequest, completion: @escaping ((_ data: BulkNotesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkNotesAddWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkNotesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk add notes
     - POST /api/v2/externalcontacts/bulk/notes/add
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "noteText" : "noteText",
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "entityType" : "contact",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "selfUri" : "https://openapi-generator.tech",
        "entityId" : "entityId",
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "status" : 0
    },
    "entity" : {
      "noteText" : "noteText",
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "entityType" : "contact",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "entityId" : "entityId",
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "noteText" : "noteText",
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "entityType" : "contact",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "selfUri" : "https://openapi-generator.tech",
        "entityId" : "entityId",
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "status" : 0
    },
    "entity" : {
      "noteText" : "noteText",
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "entityType" : "contact",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "entityId" : "entityId",
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Notes 

     - returns: RequestBuilder<BulkNotesResponse> 
     */
    open class func postExternalcontactsBulkNotesAddWithRequestBuilder(body: BulkNotesRequest) -> RequestBuilder<BulkNotesResponse> {        
        let path = "/api/v2/externalcontacts/bulk/notes/add"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkNotesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk remove notes
     
     - parameter body: (body) Note ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkNotesRemove(body: BulkIdsRequest, completion: @escaping ((_ data: BulkDeleteResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkNotesRemoveWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkDeleteResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk remove notes
     - POST /api/v2/externalcontacts/bulk/notes/remove
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : "{}"
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : "{}"
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Note ids 

     - returns: RequestBuilder<BulkDeleteResponse> 
     */
    open class func postExternalcontactsBulkNotesRemoveWithRequestBuilder(body: BulkIdsRequest) -> RequestBuilder<BulkDeleteResponse> {        
        let path = "/api/v2/externalcontacts/bulk/notes/remove"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkDeleteResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk update notes
     
     - parameter body: (body) Notes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkNotesUpdate(body: BulkNotesRequest, completion: @escaping ((_ data: BulkNotesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkNotesUpdateWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkNotesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk update notes
     - POST /api/v2/externalcontacts/bulk/notes/update
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "noteText" : "noteText",
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "entityType" : "contact",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "selfUri" : "https://openapi-generator.tech",
        "entityId" : "entityId",
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "status" : 0
    },
    "entity" : {
      "noteText" : "noteText",
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "entityType" : "contact",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "entityId" : "entityId",
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "noteText" : "noteText",
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "entityType" : "contact",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "selfUri" : "https://openapi-generator.tech",
        "entityId" : "entityId",
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "status" : 0
    },
    "entity" : {
      "noteText" : "noteText",
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "entityType" : "contact",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "entityId" : "entityId",
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Notes 

     - returns: RequestBuilder<BulkNotesResponse> 
     */
    open class func postExternalcontactsBulkNotesUpdateWithRequestBuilder(body: BulkNotesRequest) -> RequestBuilder<BulkNotesResponse> {        
        let path = "/api/v2/externalcontacts/bulk/notes/update"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkNotesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk fetch organizations
     
     - parameter body: (body) Organizations ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkOrganizations(body: BulkIdsRequest, completion: @escaping ((_ data: BulkFetchOrganizationsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkOrganizationsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkFetchOrganizationsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk fetch organizations
     - POST /api/v2/externalcontacts/bulk/organizations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 6, 6 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  } ],
  "errorCount" : 0
}, statusCode=200}]
     
     - parameter body: (body) Organizations ids 

     - returns: RequestBuilder<BulkFetchOrganizationsResponse> 
     */
    open class func postExternalcontactsBulkOrganizationsWithRequestBuilder(body: BulkIdsRequest) -> RequestBuilder<BulkFetchOrganizationsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/organizations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkFetchOrganizationsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk add organizations
     
     - parameter body: (body) Organizations 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkOrganizationsAdd(body: BulkOrganizationsRequest, completion: @escaping ((_ data: BulkOrganizationsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkOrganizationsAddWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkOrganizationsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk add organizations
     - POST /api/v2/externalcontacts/bulk/organizations/add
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Organizations 

     - returns: RequestBuilder<BulkOrganizationsResponse> 
     */
    open class func postExternalcontactsBulkOrganizationsAddWithRequestBuilder(body: BulkOrganizationsRequest) -> RequestBuilder<BulkOrganizationsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/organizations/add"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkOrganizationsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk remove organizations
     
     - parameter body: (body) Organization ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkOrganizationsRemove(body: BulkIdsRequest, completion: @escaping ((_ data: BulkDeleteResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkOrganizationsRemoveWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkDeleteResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk remove organizations
     - POST /api/v2/externalcontacts/bulk/organizations/remove
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : "{}"
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : "{}"
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Organization ids 

     - returns: RequestBuilder<BulkDeleteResponse> 
     */
    open class func postExternalcontactsBulkOrganizationsRemoveWithRequestBuilder(body: BulkIdsRequest) -> RequestBuilder<BulkDeleteResponse> {        
        let path = "/api/v2/externalcontacts/bulk/organizations/remove"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkDeleteResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk update organizations
     
     - parameter body: (body) Organizations 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkOrganizationsUpdate(body: BulkOrganizationsRequest, completion: @escaping ((_ data: BulkOrganizationsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkOrganizationsUpdateWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkOrganizationsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk update organizations
     - POST /api/v2/externalcontacts/bulk/organizations/update
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "schema" : "{}",
        "address" : {
          "address2" : "address2",
          "city" : "city",
          "address1" : "address1",
          "countryCode" : "countryCode",
          "postalCode" : "postalCode",
          "state" : "state"
        },
        "modifyDate" : "2000-01-23T04:56:07.000+00:00",
        "companyType" : "companyType",
        "customFields" : {
          "key" : "{}"
        },
        "selfUri" : "https://openapi-generator.tech",
        "industry" : "industry",
        "employeeCount" : 6,
        "tickers" : [ {
          "symbol" : "symbol",
          "exchange" : "exchange"
        }, {
          "symbol" : "symbol",
          "exchange" : "exchange"
        } ],
        "twitterId" : {
          "profileUrl" : "profileUrl",
          "name" : "name",
          "verified" : true,
          "id" : "id",
          "screenName" : "screenName"
        },
        "primaryContactId" : "primaryContactId",
        "tags" : [ "tags", "tags" ],
        "revenue" : 1,
        "phoneNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "externalSystemUrl" : "externalSystemUrl",
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "name" : "name",
        "faxNumber" : {
          "extension" : 0,
          "normalizationCountryCode" : "normalizationCountryCode",
          "e164" : "e164",
          "acceptsSMS" : true,
          "countryCode" : "countryCode",
          "display" : "display",
          "userInput" : "userInput"
        },
        "trustor" : {
          "authorization" : "{}",
          "dateCreated" : "2000-01-23T04:56:07.000+00:00",
          "createdBy" : "{}",
          "organization" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "id" : "id",
          "enabled" : true
        },
        "websites" : [ "websites", "websites" ],
        "id" : "id",
        "createDate" : "2000-01-23T04:56:07.000+00:00"
      },
      "status" : 0
    },
    "entity" : {
      "schema" : "{}",
      "address" : {
        "address2" : "address2",
        "city" : "city",
        "address1" : "address1",
        "countryCode" : "countryCode",
        "postalCode" : "postalCode",
        "state" : "state"
      },
      "modifyDate" : "2000-01-23T04:56:07.000+00:00",
      "companyType" : "companyType",
      "customFields" : {
        "key" : "{}"
      },
      "selfUri" : "https://openapi-generator.tech",
      "industry" : "industry",
      "employeeCount" : 6,
      "tickers" : [ {
        "symbol" : "symbol",
        "exchange" : "exchange"
      }, {
        "symbol" : "symbol",
        "exchange" : "exchange"
      } ],
      "twitterId" : {
        "profileUrl" : "profileUrl",
        "name" : "name",
        "verified" : true,
        "id" : "id",
        "screenName" : "screenName"
      },
      "primaryContactId" : "primaryContactId",
      "tags" : [ "tags", "tags" ],
      "revenue" : 1,
      "phoneNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "externalSystemUrl" : "externalSystemUrl",
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "name" : "name",
      "faxNumber" : {
        "extension" : 0,
        "normalizationCountryCode" : "normalizationCountryCode",
        "e164" : "e164",
        "acceptsSMS" : true,
        "countryCode" : "countryCode",
        "display" : "display",
        "userInput" : "userInput"
      },
      "trustor" : {
        "authorization" : "{}",
        "dateCreated" : "2000-01-23T04:56:07.000+00:00",
        "createdBy" : "{}",
        "organization" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "enabled" : true
      },
      "websites" : [ "websites", "websites" ],
      "id" : "id",
      "createDate" : "2000-01-23T04:56:07.000+00:00"
    }
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Organizations 

     - returns: RequestBuilder<BulkOrganizationsResponse> 
     */
    open class func postExternalcontactsBulkOrganizationsUpdateWithRequestBuilder(body: BulkOrganizationsRequest) -> RequestBuilder<BulkOrganizationsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/organizations/update"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkOrganizationsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk fetch relationships
     
     - parameter body: (body) Relationships ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkRelationships(body: BulkIdsRequest, completion: @escaping ((_ data: BulkFetchRelationshipsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkRelationshipsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkFetchRelationshipsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk fetch relationships
     - POST /api/v2/externalcontacts/bulk/relationships
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 6, 6 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "relationship" : "relationship",
      "user" : "{}",
      "externalOrganization" : "{}"
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : {
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "relationship" : "relationship",
      "user" : "{}",
      "externalOrganization" : "{}"
    }
  } ],
  "errorCount" : 0
}, statusCode=200}]
     
     - parameter body: (body) Relationships ids 

     - returns: RequestBuilder<BulkFetchRelationshipsResponse> 
     */
    open class func postExternalcontactsBulkRelationshipsWithRequestBuilder(body: BulkIdsRequest) -> RequestBuilder<BulkFetchRelationshipsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/relationships"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkFetchRelationshipsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk add relationships
     
     - parameter body: (body) Relationships 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkRelationshipsAdd(body: BulkRelationshipsRequest, completion: @escaping ((_ data: BulkRelationshipsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkRelationshipsAddWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkRelationshipsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk add relationships
     - POST /api/v2/externalcontacts/bulk/relationships/add
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "relationship" : "relationship",
        "user" : "{}",
        "externalOrganization" : "{}"
      },
      "status" : 0
    },
    "entity" : {
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "relationship" : "relationship",
      "user" : "{}",
      "externalOrganization" : "{}"
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "relationship" : "relationship",
        "user" : "{}",
        "externalOrganization" : "{}"
      },
      "status" : 0
    },
    "entity" : {
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "relationship" : "relationship",
      "user" : "{}",
      "externalOrganization" : "{}"
    }
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Relationships 

     - returns: RequestBuilder<BulkRelationshipsResponse> 
     */
    open class func postExternalcontactsBulkRelationshipsAddWithRequestBuilder(body: BulkRelationshipsRequest) -> RequestBuilder<BulkRelationshipsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/relationships/add"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkRelationshipsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk remove relationships
     
     - parameter body: (body) Relationships ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkRelationshipsRemove(body: BulkIdsRequest, completion: @escaping ((_ data: BulkDeleteResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkRelationshipsRemoveWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkDeleteResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk remove relationships
     - POST /api/v2/externalcontacts/bulk/relationships/remove
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : "{}"
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "id" : "id"
      },
      "status" : 0
    },
    "entity" : "{}"
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Relationships ids 

     - returns: RequestBuilder<BulkDeleteResponse> 
     */
    open class func postExternalcontactsBulkRelationshipsRemoveWithRequestBuilder(body: BulkIdsRequest) -> RequestBuilder<BulkDeleteResponse> {        
        let path = "/api/v2/externalcontacts/bulk/relationships/remove"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkDeleteResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Bulk update relationships
     
     - parameter body: (body) Relationships 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsBulkRelationshipsUpdate(body: BulkRelationshipsRequest, completion: @escaping ((_ data: BulkRelationshipsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsBulkRelationshipsUpdateWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BulkRelationshipsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk update relationships
     - POST /api/v2/externalcontacts/bulk/relationships/update
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorIndexes" : [ 1, 1 ],
  "results" : [ {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "relationship" : "relationship",
        "user" : "{}",
        "externalOrganization" : "{}"
      },
      "status" : 0
    },
    "entity" : {
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "relationship" : "relationship",
      "user" : "{}",
      "externalOrganization" : "{}"
    }
  }, {
    "success" : true,
    "id" : "id",
    "error" : {
      "retryable" : true,
      "code" : "code",
      "details" : [ {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      }, {
        "fieldName" : "fieldName",
        "message" : "message",
        "value" : "value"
      } ],
      "message" : "message",
      "entity" : {
        "externalDataSources" : [ {
          "platform" : "SALESFORCE",
          "url" : "url"
        }, {
          "platform" : "SALESFORCE",
          "url" : "url"
        } ],
        "selfUri" : "https://openapi-generator.tech",
        "id" : "id",
        "relationship" : "relationship",
        "user" : "{}",
        "externalOrganization" : "{}"
      },
      "status" : 0
    },
    "entity" : {
      "externalDataSources" : [ {
        "platform" : "SALESFORCE",
        "url" : "url"
      }, {
        "platform" : "SALESFORCE",
        "url" : "url"
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "relationship" : "relationship",
      "user" : "{}",
      "externalOrganization" : "{}"
    }
  } ],
  "errorCount" : 6
}, statusCode=200}]
     
     - parameter body: (body) Relationships 

     - returns: RequestBuilder<BulkRelationshipsResponse> 
     */
    open class func postExternalcontactsBulkRelationshipsUpdateWithRequestBuilder(body: BulkRelationshipsRequest) -> RequestBuilder<BulkRelationshipsResponse> {        
        let path = "/api/v2/externalcontacts/bulk/relationships/update"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BulkRelationshipsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Create a note for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter body: (body) ExternalContact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsContactNotes(contactId: String, body: Note, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsContactNotesWithRequestBuilder(contactId: contactId, body: body)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a note for an external contact
     - POST /api/v2/externalcontacts/contacts/{contactId}/notes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "noteText",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "entityType" : "contact",
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "entityId" : "entityId",
  "id" : "id",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter body: (body) ExternalContact 

     - returns: RequestBuilder<Note> 
     */
    open class func postExternalcontactsContactNotesWithRequestBuilder(contactId: String, body: Note) -> RequestBuilder<Note> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Promote an observed contact (ephemeral or identified) to a curated contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsContactPromotion(contactId: String, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsContactPromotionWithRequestBuilder(contactId: contactId)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Promote an observed contact (ephemeral or identified) to a curated contact
     - POST /api/v2/externalcontacts/contacts/{contactId}/promotion
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "lastName" : "lastName",
  "canonicalContact" : "{}",
  "workEmail" : "workEmail",
  "customFields" : {
    "key" : "{}"
  },
  "mergeOperation" : "{}",
  "title" : "title",
  "type" : "Ephemeral",
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "personalEmail" : "personalEmail",
  "mergeSet" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "externalSystemUrl" : "externalSystemUrl",
  "id" : "id",
  "otherEmail" : "otherEmail",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "homePhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "facebookId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "scopedId" : "scopedId"
    }, {
      "scopedId" : "scopedId"
    } ]
  },
  "selfUri" : "https://openapi-generator.tech",
  "lineId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "userId" : "userId"
    }, {
      "userId" : "userId"
    } ]
  },
  "externalOrganization" : {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  },
  "firstName" : "firstName",
  "otherPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "whatsAppId" : {
    "phoneNumber" : "{}",
    "displayName" : "displayName"
  },
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "middleName" : "middleName",
  "workPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "salutation" : "salutation",
  "cellPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "surveyOptOut" : true
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact ID 

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func postExternalcontactsContactPromotionWithRequestBuilder(contactId: String) -> RequestBuilder<ExternalContact> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/promotion"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create an external contact
     
     - parameter body: (body) ExternalContact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsContacts(body: ExternalContact, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsContactsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an external contact
     - POST /api/v2/externalcontacts/contacts
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "lastName" : "lastName",
  "canonicalContact" : "{}",
  "workEmail" : "workEmail",
  "customFields" : {
    "key" : "{}"
  },
  "mergeOperation" : "{}",
  "title" : "title",
  "type" : "Ephemeral",
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "personalEmail" : "personalEmail",
  "mergeSet" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "externalSystemUrl" : "externalSystemUrl",
  "id" : "id",
  "otherEmail" : "otherEmail",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "homePhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "facebookId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "scopedId" : "scopedId"
    }, {
      "scopedId" : "scopedId"
    } ]
  },
  "selfUri" : "https://openapi-generator.tech",
  "lineId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "userId" : "userId"
    }, {
      "userId" : "userId"
    } ]
  },
  "externalOrganization" : {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  },
  "firstName" : "firstName",
  "otherPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "whatsAppId" : {
    "phoneNumber" : "{}",
    "displayName" : "displayName"
  },
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "middleName" : "middleName",
  "workPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "salutation" : "salutation",
  "cellPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "surveyOptOut" : true
}, statusCode=200}]
     
     - parameter body: (body) ExternalContact 

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func postExternalcontactsContactsWithRequestBuilder(body: ExternalContact) -> RequestBuilder<ExternalContact> {        
        let path = "/api/v2/externalcontacts/contacts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a schema
     
     - parameter body: (body) Schema 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsContactsSchemas(body: DataSchema, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsContactsSchemasWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a schema
     - POST /api/v2/externalcontacts/contacts/schemas
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter body: (body) Schema 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func postExternalcontactsContactsSchemasWithRequestBuilder(body: DataSchema) -> RequestBuilder<DataSchema> {        
        let path = "/api/v2/externalcontacts/contacts/schemas"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Fetch a contact using an identifier type and value.
     
     - parameter identifier: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsIdentifierlookup(identifier: ContactIdentifier, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsIdentifierlookupWithRequestBuilder(identifier: identifier)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a contact using an identifier type and value.
     - POST /api/v2/externalcontacts/identifierlookup
     - Phone number identifier values must be provided with the country code and a leading '+' symbol. Example: \"+1 704 298 4733\"
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "lastName" : "lastName",
  "canonicalContact" : "{}",
  "workEmail" : "workEmail",
  "customFields" : {
    "key" : "{}"
  },
  "mergeOperation" : "{}",
  "title" : "title",
  "type" : "Ephemeral",
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "personalEmail" : "personalEmail",
  "mergeSet" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "externalSystemUrl" : "externalSystemUrl",
  "id" : "id",
  "otherEmail" : "otherEmail",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "homePhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "facebookId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "scopedId" : "scopedId"
    }, {
      "scopedId" : "scopedId"
    } ]
  },
  "selfUri" : "https://openapi-generator.tech",
  "lineId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "userId" : "userId"
    }, {
      "userId" : "userId"
    } ]
  },
  "externalOrganization" : {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  },
  "firstName" : "firstName",
  "otherPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "whatsAppId" : {
    "phoneNumber" : "{}",
    "displayName" : "displayName"
  },
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "middleName" : "middleName",
  "workPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "salutation" : "salutation",
  "cellPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "surveyOptOut" : true
}, statusCode=200}]
     
     - parameter identifier: (body)  

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func postExternalcontactsIdentifierlookupWithRequestBuilder(identifier: ContactIdentifier) -> RequestBuilder<ExternalContact> {        
        let path = "/api/v2/externalcontacts/identifierlookup"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: identifier)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Merge two contacts into a new contact record
     
     - parameter body: (body) MergeRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsMergeContacts(body: MergeRequest, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsMergeContactsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Merge two contacts into a new contact record
     - POST /api/v2/externalcontacts/merge/contacts
     - Two curated contacts cannot be merged. Refer to the Contact Merging article on the Developer Center for details
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "lastName" : "lastName",
  "canonicalContact" : "{}",
  "workEmail" : "workEmail",
  "customFields" : {
    "key" : "{}"
  },
  "mergeOperation" : "{}",
  "title" : "title",
  "type" : "Ephemeral",
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "personalEmail" : "personalEmail",
  "mergeSet" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "externalSystemUrl" : "externalSystemUrl",
  "id" : "id",
  "otherEmail" : "otherEmail",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "homePhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "facebookId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "scopedId" : "scopedId"
    }, {
      "scopedId" : "scopedId"
    } ]
  },
  "selfUri" : "https://openapi-generator.tech",
  "lineId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "userId" : "userId"
    }, {
      "userId" : "userId"
    } ]
  },
  "externalOrganization" : {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  },
  "firstName" : "firstName",
  "otherPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "whatsAppId" : {
    "phoneNumber" : "{}",
    "displayName" : "displayName"
  },
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "middleName" : "middleName",
  "workPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "salutation" : "salutation",
  "cellPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "surveyOptOut" : true
}, statusCode=200}]
     
     - parameter body: (body) MergeRequest 

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func postExternalcontactsMergeContactsWithRequestBuilder(body: MergeRequest) -> RequestBuilder<ExternalContact> {        
        let path = "/api/v2/externalcontacts/merge/contacts"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Create a note for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter body: (body) ExternalContact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsOrganizationNotes(externalOrganizationId: String, body: Note, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsOrganizationNotesWithRequestBuilder(externalOrganizationId: externalOrganizationId, body: body)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a note for an external organization
     - POST /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "noteText",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "entityType" : "contact",
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "entityId" : "entityId",
  "id" : "id",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter body: (body) ExternalContact 

     - returns: RequestBuilder<Note> 
     */
    open class func postExternalcontactsOrganizationNotesWithRequestBuilder(externalOrganizationId: String, body: Note) -> RequestBuilder<Note> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create an external organization
     
     - parameter body: (body) ExternalOrganization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsOrganizations(body: ExternalOrganization, completion: @escaping ((_ data: ExternalOrganization?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsOrganizationsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ExternalOrganization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an external organization
     - POST /api/v2/externalcontacts/organizations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "companyType" : "companyType",
  "customFields" : {
    "key" : "{}"
  },
  "selfUri" : "https://openapi-generator.tech",
  "industry" : "industry",
  "employeeCount" : 6,
  "tickers" : [ {
    "symbol" : "symbol",
    "exchange" : "exchange"
  }, {
    "symbol" : "symbol",
    "exchange" : "exchange"
  } ],
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "primaryContactId" : "primaryContactId",
  "tags" : [ "tags", "tags" ],
  "revenue" : 1,
  "phoneNumber" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "externalSystemUrl" : "externalSystemUrl",
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "name" : "name",
  "faxNumber" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "trustor" : {
    "authorization" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "organization" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "enabled" : true
  },
  "websites" : [ "websites", "websites" ],
  "id" : "id",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter body: (body) ExternalOrganization 

     - returns: RequestBuilder<ExternalOrganization> 
     */
    open class func postExternalcontactsOrganizationsWithRequestBuilder(body: ExternalOrganization) -> RequestBuilder<ExternalOrganization> {        
        let path = "/api/v2/externalcontacts/organizations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalOrganization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a schema
     
     - parameter body: (body) Schema 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsOrganizationsSchemas(body: DataSchema, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsOrganizationsSchemasWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a schema
     - POST /api/v2/externalcontacts/organizations/schemas
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter body: (body) Schema 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func postExternalcontactsOrganizationsSchemasWithRequestBuilder(body: DataSchema) -> RequestBuilder<DataSchema> {        
        let path = "/api/v2/externalcontacts/organizations/schemas"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a relationship
     
     - parameter body: (body) Relationship 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postExternalcontactsRelationships(body: Relationship, completion: @escaping ((_ data: Relationship?,_ error: Error?) -> Void)) {
        let requestBuilder = postExternalcontactsRelationshipsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Relationship>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a relationship
     - POST /api/v2/externalcontacts/relationships
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "relationship" : "relationship",
  "user" : "{}",
  "externalOrganization" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Relationship 

     - returns: RequestBuilder<Relationship> 
     */
    open class func postExternalcontactsRelationshipsWithRequestBuilder(body: Relationship) -> RequestBuilder<Relationship> {        
        let path = "/api/v2/externalcontacts/relationships"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Relationship>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update an external contact
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter body: (body) ExternalContact 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsContact(contactId: String, body: ExternalContact, completion: @escaping ((_ data: ExternalContact?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsContactWithRequestBuilder(contactId: contactId, body: body)
        requestBuilder.execute { (response: Response<ExternalContact>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an external contact
     - PUT /api/v2/externalcontacts/contacts/{contactId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "lastName" : "lastName",
  "canonicalContact" : "{}",
  "workEmail" : "workEmail",
  "customFields" : {
    "key" : "{}"
  },
  "mergeOperation" : "{}",
  "title" : "title",
  "type" : "Ephemeral",
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "personalEmail" : "personalEmail",
  "mergeSet" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "externalSystemUrl" : "externalSystemUrl",
  "id" : "id",
  "otherEmail" : "otherEmail",
  "createDate" : "2000-01-23T04:56:07.000+00:00",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "homePhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "facebookId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "scopedId" : "scopedId"
    }, {
      "scopedId" : "scopedId"
    } ]
  },
  "selfUri" : "https://openapi-generator.tech",
  "lineId" : {
    "displayName" : "displayName",
    "ids" : [ {
      "userId" : "userId"
    }, {
      "userId" : "userId"
    } ]
  },
  "externalOrganization" : {
    "schema" : "{}",
    "address" : {
      "address2" : "address2",
      "city" : "city",
      "address1" : "address1",
      "countryCode" : "countryCode",
      "postalCode" : "postalCode",
      "state" : "state"
    },
    "modifyDate" : "2000-01-23T04:56:07.000+00:00",
    "companyType" : "companyType",
    "customFields" : {
      "key" : "{}"
    },
    "selfUri" : "https://openapi-generator.tech",
    "industry" : "industry",
    "employeeCount" : 6,
    "tickers" : [ {
      "symbol" : "symbol",
      "exchange" : "exchange"
    }, {
      "symbol" : "symbol",
      "exchange" : "exchange"
    } ],
    "twitterId" : {
      "profileUrl" : "profileUrl",
      "name" : "name",
      "verified" : true,
      "id" : "id",
      "screenName" : "screenName"
    },
    "primaryContactId" : "primaryContactId",
    "tags" : [ "tags", "tags" ],
    "revenue" : 1,
    "phoneNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "externalSystemUrl" : "externalSystemUrl",
    "externalDataSources" : [ {
      "platform" : "SALESFORCE",
      "url" : "url"
    }, {
      "platform" : "SALESFORCE",
      "url" : "url"
    } ],
    "name" : "name",
    "faxNumber" : {
      "extension" : 0,
      "normalizationCountryCode" : "normalizationCountryCode",
      "e164" : "e164",
      "acceptsSMS" : true,
      "countryCode" : "countryCode",
      "display" : "display",
      "userInput" : "userInput"
    },
    "trustor" : {
      "authorization" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "createdBy" : "{}",
      "organization" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id",
      "enabled" : true
    },
    "websites" : [ "websites", "websites" ],
    "id" : "id",
    "createDate" : "2000-01-23T04:56:07.000+00:00"
  },
  "firstName" : "firstName",
  "otherPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "whatsAppId" : {
    "phoneNumber" : "{}",
    "displayName" : "displayName"
  },
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "middleName" : "middleName",
  "workPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "salutation" : "salutation",
  "cellPhone" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "surveyOptOut" : true
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter body: (body) ExternalContact 

     - returns: RequestBuilder<ExternalContact> 
     */
    open class func putExternalcontactsContactWithRequestBuilder(contactId: String, body: ExternalContact) -> RequestBuilder<ExternalContact> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalContact>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     Update a note for an external contact
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter body: (body) Note 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsContactNote(contactId: String, noteId: String, body: Note, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsContactNoteWithRequestBuilder(contactId: contactId, noteId: noteId, body: body)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a note for an external contact
     - PUT /api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "noteText",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "entityType" : "contact",
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "entityId" : "entityId",
  "id" : "id",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact Id 
     - parameter noteId: (path) Note Id 
     - parameter body: (body) Note 

     - returns: RequestBuilder<Note> 
     */
    open class func putExternalcontactsContactNoteWithRequestBuilder(contactId: String, noteId: String, body: Note) -> RequestBuilder<Note> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter body: (body) Data Schema 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsContactsSchema(schemaId: String, body: DataSchema, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsContactsSchemaWithRequestBuilder(schemaId: schemaId, body: body)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a schema
     - PUT /api/v2/externalcontacts/contacts/schemas/{schemaId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 
     - parameter body: (body) Data Schema 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func putExternalcontactsContactsSchemaWithRequestBuilder(schemaId: String, body: DataSchema) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/externalcontacts/contacts/schemas/{schemaId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Associate/disassociate an external contact with a conversation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter body: (body) ConversationAssociation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsConversation(conversationId: String, body: ConversationAssociation, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsConversationWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Associate/disassociate an external contact with a conversation
     - PUT /api/v2/externalcontacts/conversations/{conversationId}
     - To associate, supply a value for the externalContactId.  To disassociate, do not include the property at all.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter conversationId: (path) Conversation ID 
     - parameter body: (body) ConversationAssociation 

     - returns: RequestBuilder<Void> 
     */
    open class func putExternalcontactsConversationWithRequestBuilder(conversationId: String, body: ConversationAssociation) -> RequestBuilder<Void> {        
        var path = "/api/v2/externalcontacts/conversations/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update an external organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter body: (body) ExternalOrganization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsOrganization(externalOrganizationId: String, body: ExternalOrganization, completion: @escaping ((_ data: ExternalOrganization?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: externalOrganizationId, body: body)
        requestBuilder.execute { (response: Response<ExternalOrganization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an external organization
     - PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schema" : "{}",
  "address" : {
    "address2" : "address2",
    "city" : "city",
    "address1" : "address1",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "state" : "state"
  },
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "companyType" : "companyType",
  "customFields" : {
    "key" : "{}"
  },
  "selfUri" : "https://openapi-generator.tech",
  "industry" : "industry",
  "employeeCount" : 6,
  "tickers" : [ {
    "symbol" : "symbol",
    "exchange" : "exchange"
  }, {
    "symbol" : "symbol",
    "exchange" : "exchange"
  } ],
  "twitterId" : {
    "profileUrl" : "profileUrl",
    "name" : "name",
    "verified" : true,
    "id" : "id",
    "screenName" : "screenName"
  },
  "primaryContactId" : "primaryContactId",
  "tags" : [ "tags", "tags" ],
  "revenue" : 1,
  "phoneNumber" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "externalSystemUrl" : "externalSystemUrl",
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "name" : "name",
  "faxNumber" : {
    "extension" : 0,
    "normalizationCountryCode" : "normalizationCountryCode",
    "e164" : "e164",
    "acceptsSMS" : true,
    "countryCode" : "countryCode",
    "display" : "display",
    "userInput" : "userInput"
  },
  "trustor" : {
    "authorization" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "organization" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "enabled" : true
  },
  "websites" : [ "websites", "websites" ],
  "id" : "id",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter body: (body) ExternalOrganization 

     - returns: RequestBuilder<ExternalOrganization> 
     */
    open class func putExternalcontactsOrganizationWithRequestBuilder(externalOrganizationId: String, body: ExternalOrganization) -> RequestBuilder<ExternalOrganization> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalOrganization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     Update a note for an external organization
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter body: (body) Note 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsOrganizationNote(externalOrganizationId: String, noteId: String, body: Note, completion: @escaping ((_ data: Note?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: externalOrganizationId, noteId: noteId, body: body)
        requestBuilder.execute { (response: Response<Note>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a note for an external organization
     - PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "noteText" : "noteText",
  "modifyDate" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "entityType" : "contact",
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "entityId" : "entityId",
  "id" : "id",
  "createDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter externalOrganizationId: (path) External Organization Id 
     - parameter noteId: (path) Note Id 
     - parameter body: (body) Note 

     - returns: RequestBuilder<Note> 
     */
    open class func putExternalcontactsOrganizationNoteWithRequestBuilder(externalOrganizationId: String, noteId: String, body: Note) -> RequestBuilder<Note> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let noteIdPreEscape = "\(noteId)"
        let noteIdPostEscape = noteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{noteId}", with: noteIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Note>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Links a Trustor with an External Organization
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter trustorId: (path) Trustor ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId: String, trustorId: String, completion: @escaping ((_ data: ExternalOrganizationTrustorLink?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsOrganizationTrustorTrustorIdWithRequestBuilder(externalOrganizationId: externalOrganizationId, trustorId: trustorId)
        requestBuilder.execute { (response: Response<ExternalOrganizationTrustorLink>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Links a Trustor with an External Organization
     - PUT /api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "externalOrganizationId" : "externalOrganizationId",
  "trustorOrgId" : "trustorOrgId",
  "externalOrganizationUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter externalOrganizationId: (path) External Organization ID 
     - parameter trustorId: (path) Trustor ID 

     - returns: RequestBuilder<ExternalOrganizationTrustorLink> 
     */
    open class func putExternalcontactsOrganizationTrustorTrustorIdWithRequestBuilder(externalOrganizationId: String, trustorId: String) -> RequestBuilder<ExternalOrganizationTrustorLink> {        
        var path = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}"
        let externalOrganizationIdPreEscape = "\(externalOrganizationId)"
        let externalOrganizationIdPostEscape = externalOrganizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{externalOrganizationId}", with: externalOrganizationIdPostEscape, options: .literal, range: nil)
        let trustorIdPreEscape = "\(trustorId)"
        let trustorIdPostEscape = trustorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustorId}", with: trustorIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalOrganizationTrustorLink>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a schema
     
     - parameter schemaId: (path) Schema ID 
     - parameter body: (body) Data Schema 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsOrganizationsSchema(schemaId: String, body: DataSchema, completion: @escaping ((_ data: DataSchema?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsOrganizationsSchemaWithRequestBuilder(schemaId: schemaId, body: body)
        requestBuilder.execute { (response: Response<DataSchema>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a schema
     - PUT /api/v2/externalcontacts/organizations/schemas/{schemaId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "jsonSchema" : "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "appliesTo" : [ "CONTACT", "CONTACT" ],
  "id" : "id",
  "version" : 0,
  "enabled" : true
}, statusCode=200}]
     
     - parameter schemaId: (path) Schema ID 
     - parameter body: (body) Data Schema 

     - returns: RequestBuilder<DataSchema> 
     */
    open class func putExternalcontactsOrganizationsSchemaWithRequestBuilder(schemaId: String, body: DataSchema) -> RequestBuilder<DataSchema> {        
        var path = "/api/v2/externalcontacts/organizations/schemas/{schemaId}"
        let schemaIdPreEscape = "\(schemaId)"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataSchema>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a relationship
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter body: (body) Relationship 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putExternalcontactsRelationship(relationshipId: String, body: Relationship, completion: @escaping ((_ data: Relationship?,_ error: Error?) -> Void)) {
        let requestBuilder = putExternalcontactsRelationshipWithRequestBuilder(relationshipId: relationshipId, body: body)
        requestBuilder.execute { (response: Response<Relationship>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a relationship
     - PUT /api/v2/externalcontacts/relationships/{relationshipId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalDataSources" : [ {
    "platform" : "SALESFORCE",
    "url" : "url"
  }, {
    "platform" : "SALESFORCE",
    "url" : "url"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "relationship" : "relationship",
  "user" : "{}",
  "externalOrganization" : "{}"
}, statusCode=200}]
     
     - parameter relationshipId: (path) Relationship Id 
     - parameter body: (body) Relationship 

     - returns: RequestBuilder<Relationship> 
     */
    open class func putExternalcontactsRelationshipWithRequestBuilder(relationshipId: String, body: Relationship) -> RequestBuilder<Relationship> {        
        var path = "/api/v2/externalcontacts/relationships/{relationshipId}"
        let relationshipIdPreEscape = "\(relationshipId)"
        let relationshipIdPostEscape = relationshipIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relationshipId}", with: relationshipIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Relationship>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
