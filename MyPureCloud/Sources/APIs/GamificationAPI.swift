//
// GamificationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class GamificationAPI {
    
    /**
     Delete an External Metric Definition
     
     - parameter metricId: (path) Specifies the External Metric Definition ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEmployeeperformanceExternalmetricsDefinition(metricId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteEmployeeperformanceExternalmetricsDefinitionWithRequestBuilder(metricId: metricId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an External Metric Definition
     - DELETE /api/v2/employeeperformance/externalmetrics/definitions/{metricId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter metricId: (path) Specifies the External Metric Definition ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteEmployeeperformanceExternalmetricsDefinitionWithRequestBuilder(metricId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/employeeperformance/externalmetrics/definitions/{metricId}"
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Get an External Metric Definition
     
     - parameter metricId: (path) Specifies the External Metric Definition ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEmployeeperformanceExternalmetricsDefinition(metricId: String, completion: @escaping ((_ data: ExternalMetricDefinition?,_ error: Error?) -> Void)) {
        let requestBuilder = getEmployeeperformanceExternalmetricsDefinitionWithRequestBuilder(metricId: metricId)
        requestBuilder.execute { (response: Response<ExternalMetricDefinition>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get an External Metric Definition
     - GET /api/v2/employeeperformance/externalmetrics/definitions/{metricId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unit" : "Seconds",
  "unitDefinition" : "unitDefinition",
  "defaultObjectiveType" : "HigherIsBetter",
  "precision" : 0,
  "dateLastRefreshed" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "inUse" : true,
  "id" : "id",
  "retentionMonths" : 6,
  "enabled" : true
}, statusCode=200}]
     
     - parameter metricId: (path) Specifies the External Metric Definition ID 

     - returns: RequestBuilder<ExternalMetricDefinition> 
     */
    open class func getEmployeeperformanceExternalmetricsDefinitionWithRequestBuilder(metricId: String) -> RequestBuilder<ExternalMetricDefinition> {        
        var path = "/api/v2/employeeperformance/externalmetrics/definitions/{metricId}"
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalMetricDefinition>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a list of External Metric Definitions of an organization, sorted by name in ascending order
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEmployeeperformanceExternalmetricsDefinitions(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: ExternalMetricDefinitionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getEmployeeperformanceExternalmetricsDefinitionsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<ExternalMetricDefinitionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of External Metric Definitions of an organization, sorted by name in ascending order
     - GET /api/v2/employeeperformance/externalmetrics/definitions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "unit" : "Seconds",
    "unitDefinition" : "unitDefinition",
    "defaultObjectiveType" : "HigherIsBetter",
    "precision" : 0,
    "dateLastRefreshed" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "inUse" : true,
    "id" : "id",
    "retentionMonths" : 6,
    "enabled" : true
  }, {
    "unit" : "Seconds",
    "unitDefinition" : "unitDefinition",
    "defaultObjectiveType" : "HigherIsBetter",
    "precision" : 0,
    "dateLastRefreshed" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "inUse" : true,
    "id" : "id",
    "retentionMonths" : 6,
    "enabled" : true
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)

     - returns: RequestBuilder<ExternalMetricDefinitionListing> 
     */
    open class func getEmployeeperformanceExternalmetricsDefinitionsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<ExternalMetricDefinitionListing> {        
        let path = "/api/v2/employeeperformance/externalmetrics/definitions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ExternalMetricDefinitionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationInsights: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    public enum Granularity_getGamificationInsights: String { 
        case weekly = "Weekly"
        case monthly = "Monthly"
    }

    
    
    
    
    
    
    public enum SortKey_getGamificationInsights: String { 
        case percentofgoal = "percentOfGoal"
        case percentofgoalchange = "percentOfGoalChange"
        case overallpercentofgoal = "overallPercentOfGoal"
        case overallpercentofgoalchange = "overallPercentOfGoalChange"
        case value = "value"
        case valuechange = "valueChange"
    }

    
    
    
    public enum SortOrder_getGamificationInsights: String { 
        case asc = "asc"
        case desc = "desc"
    }

    
    
    /**
     Get insights summary
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortKey: (query) Sort key (optional)
     - parameter sortMetricId: (query) Sort Metric Id (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter userIds: (query) A list of up to 100 comma-separated user Ids (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationInsights(filterType: FilterType_getGamificationInsights, filterId: String, granularity: Granularity_getGamificationInsights, comparativePeriodStartWorkday: Date, primaryPeriodStartWorkday: Date, pageSize: Int? = nil, pageNumber: Int? = nil, sortKey: SortKey_getGamificationInsights? = nil, sortMetricId: String? = nil, sortOrder: SortOrder_getGamificationInsights? = nil, userIds: String? = nil, completion: @escaping ((_ data: InsightsSummary?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationInsightsWithRequestBuilder(filterType: filterType, filterId: filterId, granularity: granularity, comparativePeriodStartWorkday: comparativePeriodStartWorkday, primaryPeriodStartWorkday: primaryPeriodStartWorkday, pageSize: pageSize, pageNumber: pageNumber, sortKey: sortKey, sortMetricId: sortMetricId, sortOrder: sortOrder, userIds: userIds)
        requestBuilder.execute { (response: Response<InsightsSummary>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get insights summary
     - GET /api/v2/gamification/insights
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "total" : 2,
  "pageCount" : 7,
  "pageNumber" : 5,
  "performanceProfile" : "{}",
  "entities" : [ {
    "overallData" : "{}",
    "ranking" : 1,
    "user" : "{}",
    "metricData" : [ {
      "percentOfGoalChange" : 0.8008281904610115,
      "metric" : "{}",
      "valueChange" : 6.027456183070403,
      "comparativePeriod" : "{}",
      "primaryPeriod" : "{}"
    }, {
      "percentOfGoalChange" : 0.8008281904610115,
      "metric" : "{}",
      "valueChange" : 6.027456183070403,
      "comparativePeriod" : "{}",
      "primaryPeriod" : "{}"
    } ]
  }, {
    "overallData" : "{}",
    "ranking" : 1,
    "user" : "{}",
    "metricData" : [ {
      "percentOfGoalChange" : 0.8008281904610115,
      "metric" : "{}",
      "valueChange" : 6.027456183070403,
      "comparativePeriod" : "{}",
      "primaryPeriod" : "{}"
    }, {
      "percentOfGoalChange" : 0.8008281904610115,
      "metric" : "{}",
      "valueChange" : 6.027456183070403,
      "comparativePeriod" : "{}",
      "primaryPeriod" : "{}"
    } ]
  } ],
  "granularity" : "Daily",
  "comparativePeriod" : "{}",
  "pageSize" : 5,
  "primaryPeriod" : "{}"
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortKey: (query) Sort key (optional)
     - parameter sortMetricId: (query) Sort Metric Id (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter userIds: (query) A list of up to 100 comma-separated user Ids (optional)

     - returns: RequestBuilder<InsightsSummary> 
     */
    open class func getGamificationInsightsWithRequestBuilder(filterType: FilterType_getGamificationInsights, filterId: String, granularity: Granularity_getGamificationInsights, comparativePeriodStartWorkday: Date, primaryPeriodStartWorkday: Date, pageSize: Int? = nil, pageNumber: Int? = nil, sortKey: SortKey_getGamificationInsights? = nil, sortMetricId: String? = nil, sortOrder: SortOrder_getGamificationInsights? = nil, userIds: String? = nil) -> RequestBuilder<InsightsSummary> {        
        let path = "/api/v2/gamification/insights"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "granularity": granularity.rawValue, 
            "comparativePeriodStartWorkday": comparativePeriodStartWorkday.encodeToJSON(), 
            "primaryPeriodStartWorkday": primaryPeriodStartWorkday.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortKey": sortKey?.rawValue, 
            "sortMetricId": sortMetricId, 
            "sortOrder": sortOrder?.rawValue, 
            "userIds": userIds
        ])

        let requestBuilder: RequestBuilder<InsightsSummary>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationInsightsDetails: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    public enum Granularity_getGamificationInsightsDetails: String { 
        case weekly = "Weekly"
        case monthly = "Monthly"
    }

    
    
    
    /**
     Get insights details for the current user
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationInsightsDetails(filterType: FilterType_getGamificationInsightsDetails, filterId: String, granularity: Granularity_getGamificationInsightsDetails, comparativePeriodStartWorkday: Date, primaryPeriodStartWorkday: Date, completion: @escaping ((_ data: InsightsDetails?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationInsightsDetailsWithRequestBuilder(filterType: filterType, filterId: filterId, granularity: granularity, comparativePeriodStartWorkday: comparativePeriodStartWorkday, primaryPeriodStartWorkday: primaryPeriodStartWorkday)
        requestBuilder.execute { (response: Response<InsightsDetails>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get insights details for the current user
     - GET /api/v2/gamification/insights/details
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "overallData" : "{}",
  "granularity" : "Daily",
  "comparativePeriod" : "{}",
  "primaryPeriod" : "{}",
  "user" : "{}",
  "metricData" : [ {
    "percentOfGoalChange" : 0.8008281904610115,
    "metric" : "{}",
    "valueChange" : 6.027456183070403,
    "comparativePeriod" : "{}",
    "primaryPeriod" : "{}"
  }, {
    "percentOfGoalChange" : 0.8008281904610115,
    "metric" : "{}",
    "valueChange" : 6.027456183070403,
    "comparativePeriod" : "{}",
    "primaryPeriod" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<InsightsDetails> 
     */
    open class func getGamificationInsightsDetailsWithRequestBuilder(filterType: FilterType_getGamificationInsightsDetails, filterId: String, granularity: Granularity_getGamificationInsightsDetails, comparativePeriodStartWorkday: Date, primaryPeriodStartWorkday: Date) -> RequestBuilder<InsightsDetails> {        
        let path = "/api/v2/gamification/insights/details"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "granularity": granularity.rawValue, 
            "comparativePeriodStartWorkday": comparativePeriodStartWorkday.encodeToJSON(), 
            "primaryPeriodStartWorkday": primaryPeriodStartWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InsightsDetails>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationInsightsGroupsTrends: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    public enum Granularity_getGamificationInsightsGroupsTrends: String { 
        case daily = "Daily"
        case weekly = "Weekly"
        case monthly = "Monthly"
    }

    
    
    
    
    
    /**
     Get insights overall trend for the current user
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter comparativePeriodEndWorkday: (query) The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodEndWorkday: (query) The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationInsightsGroupsTrends(filterType: FilterType_getGamificationInsightsGroupsTrends, filterId: String, granularity: Granularity_getGamificationInsightsGroupsTrends, comparativePeriodStartWorkday: Date, comparativePeriodEndWorkday: Date, primaryPeriodStartWorkday: Date, primaryPeriodEndWorkday: Date, completion: @escaping ((_ data: InsightsTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationInsightsGroupsTrendsWithRequestBuilder(filterType: filterType, filterId: filterId, granularity: granularity, comparativePeriodStartWorkday: comparativePeriodStartWorkday, comparativePeriodEndWorkday: comparativePeriodEndWorkday, primaryPeriodStartWorkday: primaryPeriodStartWorkday, primaryPeriodEndWorkday: primaryPeriodEndWorkday)
        requestBuilder.execute { (response: Response<InsightsTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get insights overall trend for the current user
     - GET /api/v2/gamification/insights/groups/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "total" : "{}",
  "performanceProfile" : "{}",
  "entities" : [ {
    "metric" : "{}",
    "trends" : "{}"
  }, {
    "metric" : "{}",
    "trends" : "{}"
  } ],
  "granularity" : "Daily",
  "comparativePeriod" : "{}",
  "primaryPeriod" : "{}"
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter comparativePeriodEndWorkday: (query) The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodEndWorkday: (query) The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<InsightsTrend> 
     */
    open class func getGamificationInsightsGroupsTrendsWithRequestBuilder(filterType: FilterType_getGamificationInsightsGroupsTrends, filterId: String, granularity: Granularity_getGamificationInsightsGroupsTrends, comparativePeriodStartWorkday: Date, comparativePeriodEndWorkday: Date, primaryPeriodStartWorkday: Date, primaryPeriodEndWorkday: Date) -> RequestBuilder<InsightsTrend> {        
        let path = "/api/v2/gamification/insights/groups/trends"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "granularity": granularity.rawValue, 
            "comparativePeriodStartWorkday": comparativePeriodStartWorkday.encodeToJSON(), 
            "comparativePeriodEndWorkday": comparativePeriodEndWorkday.encodeToJSON(), 
            "primaryPeriodStartWorkday": primaryPeriodStartWorkday.encodeToJSON(), 
            "primaryPeriodEndWorkday": primaryPeriodEndWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InsightsTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationInsightsGroupsTrendsAll: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    public enum Granularity_getGamificationInsightsGroupsTrendsAll: String { 
        case daily = "Daily"
        case weekly = "Weekly"
        case monthly = "Monthly"
    }

    
    
    
    
    
    /**
     Get insights overall trend
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter comparativePeriodEndWorkday: (query) The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodEndWorkday: (query) The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationInsightsGroupsTrendsAll(filterType: FilterType_getGamificationInsightsGroupsTrendsAll, filterId: String, granularity: Granularity_getGamificationInsightsGroupsTrendsAll, comparativePeriodStartWorkday: Date, comparativePeriodEndWorkday: Date, primaryPeriodStartWorkday: Date, primaryPeriodEndWorkday: Date, completion: @escaping ((_ data: InsightsTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationInsightsGroupsTrendsAllWithRequestBuilder(filterType: filterType, filterId: filterId, granularity: granularity, comparativePeriodStartWorkday: comparativePeriodStartWorkday, comparativePeriodEndWorkday: comparativePeriodEndWorkday, primaryPeriodStartWorkday: primaryPeriodStartWorkday, primaryPeriodEndWorkday: primaryPeriodEndWorkday)
        requestBuilder.execute { (response: Response<InsightsTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get insights overall trend
     - GET /api/v2/gamification/insights/groups/trends/all
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "total" : "{}",
  "performanceProfile" : "{}",
  "entities" : [ {
    "metric" : "{}",
    "trends" : "{}"
  }, {
    "metric" : "{}",
    "trends" : "{}"
  } ],
  "granularity" : "Daily",
  "comparativePeriod" : "{}",
  "primaryPeriod" : "{}"
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter comparativePeriodEndWorkday: (query) The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodEndWorkday: (query) The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<InsightsTrend> 
     */
    open class func getGamificationInsightsGroupsTrendsAllWithRequestBuilder(filterType: FilterType_getGamificationInsightsGroupsTrendsAll, filterId: String, granularity: Granularity_getGamificationInsightsGroupsTrendsAll, comparativePeriodStartWorkday: Date, comparativePeriodEndWorkday: Date, primaryPeriodStartWorkday: Date, primaryPeriodEndWorkday: Date) -> RequestBuilder<InsightsTrend> {        
        let path = "/api/v2/gamification/insights/groups/trends/all"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "granularity": granularity.rawValue, 
            "comparativePeriodStartWorkday": comparativePeriodStartWorkday.encodeToJSON(), 
            "comparativePeriodEndWorkday": comparativePeriodEndWorkday.encodeToJSON(), 
            "primaryPeriodStartWorkday": primaryPeriodStartWorkday.encodeToJSON(), 
            "primaryPeriodEndWorkday": primaryPeriodEndWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InsightsTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationInsightsMembers: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    public enum Granularity_getGamificationInsightsMembers: String { 
        case weekly = "Weekly"
        case monthly = "Monthly"
    }

    
    
    /**
     Query users in a profile during a period of time
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter startWorkday: (query) The start work day. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationInsightsMembers(filterType: FilterType_getGamificationInsightsMembers, filterId: String, granularity: Granularity_getGamificationInsightsMembers, startWorkday: Date, completion: @escaping ((_ data: InsightsAgents?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationInsightsMembersWithRequestBuilder(filterType: filterType, filterId: filterId, granularity: granularity, startWorkday: startWorkday)
        requestBuilder.execute { (response: Response<InsightsAgents>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query users in a profile during a period of time
     - GET /api/v2/gamification/insights/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "dateEndWorkday" : "2000-01-23",
  "entities" : [ {
    "manager" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "manager" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "granularity" : "Daily",
  "dateStartWorkday" : "2000-01-23"
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter startWorkday: (query) The start work day. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<InsightsAgents> 
     */
    open class func getGamificationInsightsMembersWithRequestBuilder(filterType: FilterType_getGamificationInsightsMembers, filterId: String, granularity: Granularity_getGamificationInsightsMembers, startWorkday: Date) -> RequestBuilder<InsightsAgents> {        
        let path = "/api/v2/gamification/insights/members"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "granularity": granularity.rawValue, 
            "startWorkday": startWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InsightsAgents>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationInsightsTrends: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    public enum Granularity_getGamificationInsightsTrends: String { 
        case daily = "Daily"
        case weekly = "Weekly"
    }

    
    
    
    
    
    /**
     Get insights user trend for the current user
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter comparativePeriodEndWorkday: (query) The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodEndWorkday: (query) The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationInsightsTrends(filterType: FilterType_getGamificationInsightsTrends, filterId: String, granularity: Granularity_getGamificationInsightsTrends, comparativePeriodStartWorkday: Date, comparativePeriodEndWorkday: Date, primaryPeriodStartWorkday: Date, primaryPeriodEndWorkday: Date, completion: @escaping ((_ data: UserInsightsTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationInsightsTrendsWithRequestBuilder(filterType: filterType, filterId: filterId, granularity: granularity, comparativePeriodStartWorkday: comparativePeriodStartWorkday, comparativePeriodEndWorkday: comparativePeriodEndWorkday, primaryPeriodStartWorkday: primaryPeriodStartWorkday, primaryPeriodEndWorkday: primaryPeriodEndWorkday)
        requestBuilder.execute { (response: Response<UserInsightsTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get insights user trend for the current user
     - GET /api/v2/gamification/insights/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "total" : "{}",
  "performanceProfile" : "{}",
  "entities" : [ {
    "metric" : "{}",
    "trends" : "{}"
  }, {
    "metric" : "{}",
    "trends" : "{}"
  } ],
  "granularity" : "Daily",
  "comparativePeriod" : "{}",
  "primaryPeriod" : "{}",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter comparativePeriodEndWorkday: (query) The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodEndWorkday: (query) The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<UserInsightsTrend> 
     */
    open class func getGamificationInsightsTrendsWithRequestBuilder(filterType: FilterType_getGamificationInsightsTrends, filterId: String, granularity: Granularity_getGamificationInsightsTrends, comparativePeriodStartWorkday: Date, comparativePeriodEndWorkday: Date, primaryPeriodStartWorkday: Date, primaryPeriodEndWorkday: Date) -> RequestBuilder<UserInsightsTrend> {        
        let path = "/api/v2/gamification/insights/trends"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "granularity": granularity.rawValue, 
            "comparativePeriodStartWorkday": comparativePeriodStartWorkday.encodeToJSON(), 
            "comparativePeriodEndWorkday": comparativePeriodEndWorkday.encodeToJSON(), 
            "primaryPeriodStartWorkday": primaryPeriodStartWorkday.encodeToJSON(), 
            "primaryPeriodEndWorkday": primaryPeriodEndWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<UserInsightsTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum FilterType_getGamificationInsightsUserDetails: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    public enum Granularity_getGamificationInsightsUserDetails: String { 
        case weekly = "Weekly"
        case monthly = "Monthly"
    }

    
    
    
    /**
     Get insights details for the user
     
     - parameter userId: (path) The ID of a user. 
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationInsightsUserDetails(userId: String, filterType: FilterType_getGamificationInsightsUserDetails, filterId: String, granularity: Granularity_getGamificationInsightsUserDetails, comparativePeriodStartWorkday: Date, primaryPeriodStartWorkday: Date, completion: @escaping ((_ data: InsightsDetails?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationInsightsUserDetailsWithRequestBuilder(userId: userId, filterType: filterType, filterId: filterId, granularity: granularity, comparativePeriodStartWorkday: comparativePeriodStartWorkday, primaryPeriodStartWorkday: primaryPeriodStartWorkday)
        requestBuilder.execute { (response: Response<InsightsDetails>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get insights details for the user
     - GET /api/v2/gamification/insights/users/{userId}/details
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "overallData" : "{}",
  "granularity" : "Daily",
  "comparativePeriod" : "{}",
  "primaryPeriod" : "{}",
  "user" : "{}",
  "metricData" : [ {
    "percentOfGoalChange" : 0.8008281904610115,
    "metric" : "{}",
    "valueChange" : 6.027456183070403,
    "comparativePeriod" : "{}",
    "primaryPeriod" : "{}"
  }, {
    "percentOfGoalChange" : 0.8008281904610115,
    "metric" : "{}",
    "valueChange" : 6.027456183070403,
    "comparativePeriod" : "{}",
    "primaryPeriod" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter userId: (path) The ID of a user. 
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<InsightsDetails> 
     */
    open class func getGamificationInsightsUserDetailsWithRequestBuilder(userId: String, filterType: FilterType_getGamificationInsightsUserDetails, filterId: String, granularity: Granularity_getGamificationInsightsUserDetails, comparativePeriodStartWorkday: Date, primaryPeriodStartWorkday: Date) -> RequestBuilder<InsightsDetails> {        
        var path = "/api/v2/gamification/insights/users/{userId}/details"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "granularity": granularity.rawValue, 
            "comparativePeriodStartWorkday": comparativePeriodStartWorkday.encodeToJSON(), 
            "primaryPeriodStartWorkday": primaryPeriodStartWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InsightsDetails>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum FilterType_getGamificationInsightsUserTrends: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    public enum Granularity_getGamificationInsightsUserTrends: String { 
        case daily = "Daily"
        case weekly = "Weekly"
    }

    
    
    
    
    
    /**
     Get insights user trend for the user
     
     - parameter userId: (path) The ID of a user. 
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter comparativePeriodEndWorkday: (query) The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodEndWorkday: (query) The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationInsightsUserTrends(userId: String, filterType: FilterType_getGamificationInsightsUserTrends, filterId: String, granularity: Granularity_getGamificationInsightsUserTrends, comparativePeriodStartWorkday: Date, comparativePeriodEndWorkday: Date, primaryPeriodStartWorkday: Date, primaryPeriodEndWorkday: Date, completion: @escaping ((_ data: UserInsightsTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationInsightsUserTrendsWithRequestBuilder(userId: userId, filterType: filterType, filterId: filterId, granularity: granularity, comparativePeriodStartWorkday: comparativePeriodStartWorkday, comparativePeriodEndWorkday: comparativePeriodEndWorkday, primaryPeriodStartWorkday: primaryPeriodStartWorkday, primaryPeriodEndWorkday: primaryPeriodEndWorkday)
        requestBuilder.execute { (response: Response<UserInsightsTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get insights user trend for the user
     - GET /api/v2/gamification/insights/users/{userId}/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "total" : "{}",
  "performanceProfile" : "{}",
  "entities" : [ {
    "metric" : "{}",
    "trends" : "{}"
  }, {
    "metric" : "{}",
    "trends" : "{}"
  } ],
  "granularity" : "Daily",
  "comparativePeriod" : "{}",
  "primaryPeriod" : "{}",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path) The ID of a user. 
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter granularity: (query) Granularity 
     - parameter comparativePeriodStartWorkday: (query) The start work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter comparativePeriodEndWorkday: (query) The end work day of comparative period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodStartWorkday: (query) The start work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter primaryPeriodEndWorkday: (query) The end work day of primary period. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<UserInsightsTrend> 
     */
    open class func getGamificationInsightsUserTrendsWithRequestBuilder(userId: String, filterType: FilterType_getGamificationInsightsUserTrends, filterId: String, granularity: Granularity_getGamificationInsightsUserTrends, comparativePeriodStartWorkday: Date, comparativePeriodEndWorkday: Date, primaryPeriodStartWorkday: Date, primaryPeriodEndWorkday: Date) -> RequestBuilder<UserInsightsTrend> {        
        var path = "/api/v2/gamification/insights/users/{userId}/trends"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "granularity": granularity.rawValue, 
            "comparativePeriodStartWorkday": comparativePeriodStartWorkday.encodeToJSON(), 
            "comparativePeriodEndWorkday": comparativePeriodEndWorkday.encodeToJSON(), 
            "primaryPeriodStartWorkday": primaryPeriodStartWorkday.encodeToJSON(), 
            "primaryPeriodEndWorkday": primaryPeriodEndWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<UserInsightsTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Leaderboard of the requesting user's division or performance profile
     
     - parameter startWorkday: (query) Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter metricId: (query) Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationLeaderboard(startWorkday: Date, endWorkday: Date, metricId: String? = nil, completion: @escaping ((_ data: Leaderboard?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationLeaderboardWithRequestBuilder(startWorkday: startWorkday, endWorkday: endWorkday, metricId: metricId)
        requestBuilder.execute { (response: Response<Leaderboard>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Leaderboard of the requesting user's division or performance profile
     - GET /api/v2/gamification/leaderboard
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "metric" : "{}",
  "dateEndWorkday" : "2000-01-23",
  "dateStartWorkday" : "2000-01-23",
  "leaders" : [ {
    "rank" : 0,
    "user" : "{}",
    "points" : 6
  }, {
    "rank" : 0,
    "user" : "{}",
    "points" : 6
  } ],
  "userRank" : "{}"
}, statusCode=200}]
     
     - parameter startWorkday: (query) Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter metricId: (query) Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given. (optional)

     - returns: RequestBuilder<Leaderboard> 
     */
    open class func getGamificationLeaderboardWithRequestBuilder(startWorkday: Date, endWorkday: Date, metricId: String? = nil) -> RequestBuilder<Leaderboard> {        
        let path = "/api/v2/gamification/leaderboard"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "metricId": metricId
        ])

        let requestBuilder: RequestBuilder<Leaderboard>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationLeaderboardAll: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    
    /**
     Leaderboard by filter type
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division or performance profile Id 
     - parameter startWorkday: (query) Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter metricId: (query) Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationLeaderboardAll(filterType: FilterType_getGamificationLeaderboardAll, filterId: String, startWorkday: Date, endWorkday: Date, metricId: String? = nil, completion: @escaping ((_ data: Leaderboard?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationLeaderboardAllWithRequestBuilder(filterType: filterType, filterId: filterId, startWorkday: startWorkday, endWorkday: endWorkday, metricId: metricId)
        requestBuilder.execute { (response: Response<Leaderboard>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Leaderboard by filter type
     - GET /api/v2/gamification/leaderboard/all
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "metric" : "{}",
  "dateEndWorkday" : "2000-01-23",
  "dateStartWorkday" : "2000-01-23",
  "leaders" : [ {
    "rank" : 0,
    "user" : "{}",
    "points" : 6
  }, {
    "rank" : 0,
    "user" : "{}",
    "points" : 6
  } ],
  "userRank" : "{}"
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division or performance profile Id 
     - parameter startWorkday: (query) Start workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday to retrieve for the leaderboard. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter metricId: (query) Metric Id for which the leaderboard is to be generated. The total points is used if nothing is given. (optional)

     - returns: RequestBuilder<Leaderboard> 
     */
    open class func getGamificationLeaderboardAllWithRequestBuilder(filterType: FilterType_getGamificationLeaderboardAll, filterId: String, startWorkday: Date, endWorkday: Date, metricId: String? = nil) -> RequestBuilder<Leaderboard> {        
        let path = "/api/v2/gamification/leaderboard/all"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "metricId": metricId
        ])

        let requestBuilder: RequestBuilder<Leaderboard>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationLeaderboardAllBestpoints: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    /**
     Best Points by division or performance profile
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division or performance profile Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationLeaderboardAllBestpoints(filterType: FilterType_getGamificationLeaderboardAllBestpoints, filterId: String, completion: @escaping ((_ data: OverallBestPoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationLeaderboardAllBestpointsWithRequestBuilder(filterType: filterType, filterId: filterId)
        requestBuilder.execute { (response: Response<OverallBestPoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Best Points by division or performance profile
     - GET /api/v2/gamification/leaderboard/all/bestpoints
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "bestPoints" : [ {
    "granularityType" : "Daily",
    "dateEndWorkday" : "2000-01-23",
    "count" : 0,
    "dateStartWorkday" : "2000-01-23",
    "users" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "points" : 6
  }, {
    "granularityType" : "Daily",
    "dateEndWorkday" : "2000-01-23",
    "count" : 0,
    "dateStartWorkday" : "2000-01-23",
    "users" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "points" : 6
  } ]
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division or performance profile Id 

     - returns: RequestBuilder<OverallBestPoints> 
     */
    open class func getGamificationLeaderboardAllBestpointsWithRequestBuilder(filterType: FilterType_getGamificationLeaderboardAllBestpoints, filterId: String) -> RequestBuilder<OverallBestPoints> {        
        let path = "/api/v2/gamification/leaderboard/all/bestpoints"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId
        ])

        let requestBuilder: RequestBuilder<OverallBestPoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Best Points of the requesting user's current performance profile or division
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationLeaderboardBestpoints(completion: @escaping ((_ data: OverallBestPoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationLeaderboardBestpointsWithRequestBuilder()
        requestBuilder.execute { (response: Response<OverallBestPoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Best Points of the requesting user's current performance profile or division
     - GET /api/v2/gamification/leaderboard/bestpoints
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "bestPoints" : [ {
    "granularityType" : "Daily",
    "dateEndWorkday" : "2000-01-23",
    "count" : 0,
    "dateStartWorkday" : "2000-01-23",
    "users" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "points" : 6
  }, {
    "granularityType" : "Daily",
    "dateEndWorkday" : "2000-01-23",
    "count" : 0,
    "dateStartWorkday" : "2000-01-23",
    "users" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "points" : 6
  } ]
}, statusCode=200}]

     - returns: RequestBuilder<OverallBestPoints> 
     */
    open class func getGamificationLeaderboardBestpointsWithRequestBuilder() -> RequestBuilder<OverallBestPoints> {        
        let path = "/api/v2/gamification/leaderboard/bestpoints"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OverallBestPoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Metric definition by id
     
     - parameter metricDefinitionId: (path) metric definition id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationMetricdefinition(metricDefinitionId: String, completion: @escaping ((_ data: MetricDefinition?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationMetricdefinitionWithRequestBuilder(metricDefinitionId: metricDefinitionId)
        requestBuilder.execute { (response: Response<MetricDefinition>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Metric definition by id
     - GET /api/v2/gamification/metricdefinitions/{metricDefinitionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unitType" : "None",
  "mediaTypeFilteringAllowed" : true,
  "initialDirectionFilteringAllowed" : true,
  "defaultObjective" : "{}",
  "divisorMetrics" : [ "divisorMetrics", "divisorMetrics" ],
  "queueFilteringAllowed" : true,
  "lockTemplateId" : "lockTemplateId",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dividendMetrics" : [ "dividendMetrics", "dividendMetrics" ],
  "id" : "id",
  "shortName" : "shortName"
}, statusCode=200}]
     
     - parameter metricDefinitionId: (path) metric definition id 

     - returns: RequestBuilder<MetricDefinition> 
     */
    open class func getGamificationMetricdefinitionWithRequestBuilder(metricDefinitionId: String) -> RequestBuilder<MetricDefinition> {        
        var path = "/api/v2/gamification/metricdefinitions/{metricDefinitionId}"
        let metricDefinitionIdPreEscape = "\(metricDefinitionId)"
        let metricDefinitionIdPostEscape = metricDefinitionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricDefinitionId}", with: metricDefinitionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MetricDefinition>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     All metric definitions
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationMetricdefinitions(completion: @escaping ((_ data: GetMetricDefinitionsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationMetricdefinitionsWithRequestBuilder()
        requestBuilder.execute { (response: Response<GetMetricDefinitionsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     All metric definitions
     - GET /api/v2/gamification/metricdefinitions
     - Retrieves the metric definitions and their corresponding default objectives used to create a gamified metric
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "unitType" : "None",
    "mediaTypeFilteringAllowed" : true,
    "initialDirectionFilteringAllowed" : true,
    "defaultObjective" : "{}",
    "divisorMetrics" : [ "divisorMetrics", "divisorMetrics" ],
    "queueFilteringAllowed" : true,
    "lockTemplateId" : "lockTemplateId",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dividendMetrics" : [ "dividendMetrics", "dividendMetrics" ],
    "id" : "id",
    "shortName" : "shortName"
  }, {
    "unitType" : "None",
    "mediaTypeFilteringAllowed" : true,
    "initialDirectionFilteringAllowed" : true,
    "defaultObjective" : "{}",
    "divisorMetrics" : [ "divisorMetrics", "divisorMetrics" ],
    "queueFilteringAllowed" : true,
    "lockTemplateId" : "lockTemplateId",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dividendMetrics" : [ "dividendMetrics", "dividendMetrics" ],
    "id" : "id",
    "shortName" : "shortName"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<GetMetricDefinitionsResponse> 
     */
    open class func getGamificationMetricdefinitionsWithRequestBuilder() -> RequestBuilder<GetMetricDefinitionsResponse> {        
        let path = "/api/v2/gamification/metricdefinitions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetMetricDefinitionsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Performance profile by id
     
     - parameter profileId: (path) performanceProfileId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfile(profileId: String, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfileWithRequestBuilder(profileId: profileId)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Performance profile by id
     - GET /api/v2/gamification/profiles/{profileId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "metricOrders" : [ "metricOrders", "metricOrders" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "maxLeaderboardRankSize" : 1,
  "memberCount" : 6,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "active" : true,
  "id" : "id",
  "reportingIntervals" : [ {
    "intervalType" : "Day",
    "intervalValue" : 0
  }, {
    "intervalType" : "Day",
    "intervalValue" : 0
  } ]
}, statusCode=200}]
     
     - parameter profileId: (path) performanceProfileId 

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func getGamificationProfileWithRequestBuilder(profileId: String) -> RequestBuilder<PerformanceProfile> {        
        var path = "/api/v2/gamification/profiles/{profileId}"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Members of a given performance profile
     
     - parameter profileId: (path) Profile Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfileMembers(profileId: String, completion: @escaping ((_ data: MemberListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfileMembersWithRequestBuilder(profileId: profileId)
        requestBuilder.execute { (response: Response<MemberListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Members of a given performance profile
     - GET /api/v2/gamification/profiles/{profileId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter profileId: (path) Profile Id 

     - returns: RequestBuilder<MemberListing> 
     */
    open class func getGamificationProfileMembersWithRequestBuilder(profileId: String) -> RequestBuilder<MemberListing> {        
        var path = "/api/v2/gamification/profiles/{profileId}/members"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MemberListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Performance profile gamified metric by id
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter metricId: (path) Metric Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfileMetric(profileId: String, metricId: String, workday: Date? = nil, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfileMetricWithRequestBuilder(profileId: profileId, metricId: metricId, workday: workday)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Performance profile gamified metric by id
     - GET /api/v2/gamification/profiles/{profileId}/metrics/{metricId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "timeDisplayUnit" : "None",
  "precision" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "dateUnlinked" : "2000-01-23",
  "performanceProfileId" : "performanceProfileId",
  "objective" : "{}",
  "metricDefinitionId" : "metricDefinitionId",
  "linkedMetric" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "sourcePerformanceProfile" : "{}",
  "id" : "id",
  "externalMetricDefinitionId" : "externalMetricDefinitionId"
}, statusCode=200}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter metricId: (path) Metric Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<Metric> 
     */
    open class func getGamificationProfileMetricWithRequestBuilder(profileId: String, metricId: String, workday: Date? = nil) -> RequestBuilder<Metric> {        
        var path = "/api/v2/gamification/profiles/{profileId}/metrics/{metricId}"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "workday": workday?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     All gamified metrics for a given performance profile
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter metricIds: (query) List of metric ids to filter the response (Optional, comma-separated). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfileMetrics(profileId: String, expand: [String]? = nil, workday: Date? = nil, metricIds: String? = nil, completion: @escaping ((_ data: GetMetricResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfileMetricsWithRequestBuilder(profileId: profileId, expand: expand, workday: workday, metricIds: metricIds)
        requestBuilder.execute { (response: Response<GetMetricResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     All gamified metrics for a given performance profile
     - GET /api/v2/gamification/profiles/{profileId}/metrics
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "timeDisplayUnit" : "None",
    "precision" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateUnlinked" : "2000-01-23",
    "performanceProfileId" : "performanceProfileId",
    "objective" : "{}",
    "metricDefinitionId" : "metricDefinitionId",
    "linkedMetric" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "sourcePerformanceProfile" : "{}",
    "id" : "id",
    "externalMetricDefinitionId" : "externalMetricDefinitionId"
  }, {
    "timeDisplayUnit" : "None",
    "precision" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateUnlinked" : "2000-01-23",
    "performanceProfileId" : "performanceProfileId",
    "objective" : "{}",
    "metricDefinitionId" : "metricDefinitionId",
    "linkedMetric" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "sourcePerformanceProfile" : "{}",
    "id" : "id",
    "externalMetricDefinitionId" : "externalMetricDefinitionId"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter metricIds: (query) List of metric ids to filter the response (Optional, comma-separated). (optional)

     - returns: RequestBuilder<GetMetricResponse> 
     */
    open class func getGamificationProfileMetricsWithRequestBuilder(profileId: String, expand: [String]? = nil, workday: Date? = nil, metricIds: String? = nil) -> RequestBuilder<GetMetricResponse> {        
        var path = "/api/v2/gamification/profiles/{profileId}/metrics"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand, 
            "workday": workday?.encodeToJSON(), 
            "metricIds": metricIds
        ])

        let requestBuilder: RequestBuilder<GetMetricResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     All metrics for a given performance profile with objective details such as order and maxPoints
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfileMetricsObjectivedetails(profileId: String, workday: Date? = nil, completion: @escaping ((_ data: GetMetricsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfileMetricsObjectivedetailsWithRequestBuilder(profileId: profileId, workday: workday)
        requestBuilder.execute { (response: Response<GetMetricsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     All metrics for a given performance profile with objective details such as order and maxPoints
     - GET /api/v2/gamification/profiles/{profileId}/metrics/objectivedetails
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "timeDisplayUnit" : "None",
    "precision" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "dateUnlinked" : "2000-01-23",
    "performanceProfileId" : "performanceProfileId",
    "enabled" : true,
    "unitType" : "None",
    "metricDefinitionId" : "metricDefinitionId",
    "linkedMetric" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "templateName" : "templateName",
    "maxPoints" : 1,
    "unitDefinition" : "unitDefinition",
    "name" : "name",
    "sourcePerformanceProfile" : "{}",
    "id" : "id",
    "metricDefinitionName" : "metricDefinitionName",
    "externalMetricDefinitionId" : "externalMetricDefinitionId",
    "order" : 6
  }, {
    "timeDisplayUnit" : "None",
    "precision" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "dateUnlinked" : "2000-01-23",
    "performanceProfileId" : "performanceProfileId",
    "enabled" : true,
    "unitType" : "None",
    "metricDefinitionId" : "metricDefinitionId",
    "linkedMetric" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "templateName" : "templateName",
    "maxPoints" : 1,
    "unitDefinition" : "unitDefinition",
    "name" : "name",
    "sourcePerformanceProfile" : "{}",
    "id" : "id",
    "metricDefinitionName" : "metricDefinitionName",
    "externalMetricDefinitionId" : "externalMetricDefinitionId",
    "order" : 6
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter workday: (query) The objective query workday. If not specified, then it retrieves the current objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<GetMetricsResponse> 
     */
    open class func getGamificationProfileMetricsObjectivedetailsWithRequestBuilder(profileId: String, workday: Date? = nil) -> RequestBuilder<GetMetricsResponse> {        
        var path = "/api/v2/gamification/profiles/{profileId}/metrics/objectivedetails"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "workday": workday?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<GetMetricsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     All performance profiles
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfiles(completion: @escaping ((_ data: GetProfilesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfilesWithRequestBuilder()
        requestBuilder.execute { (response: Response<GetProfilesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     All performance profiles
     - GET /api/v2/gamification/profiles
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "division" : "{}",
    "metricOrders" : [ "metricOrders", "metricOrders" ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "maxLeaderboardRankSize" : 1,
    "memberCount" : 6,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "active" : true,
    "id" : "id",
    "reportingIntervals" : [ {
      "intervalType" : "Day",
      "intervalValue" : 0
    }, {
      "intervalType" : "Day",
      "intervalValue" : 0
    } ]
  }, {
    "division" : "{}",
    "metricOrders" : [ "metricOrders", "metricOrders" ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "maxLeaderboardRankSize" : 1,
    "memberCount" : 6,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "active" : true,
    "id" : "id",
    "reportingIntervals" : [ {
      "intervalType" : "Day",
      "intervalValue" : 0
    }, {
      "intervalType" : "Day",
      "intervalValue" : 0
    } ]
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<GetProfilesResponse> 
     */
    open class func getGamificationProfilesWithRequestBuilder() -> RequestBuilder<GetProfilesResponse> {        
        let path = "/api/v2/gamification/profiles"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetProfilesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Performance profile of a user
     
     - parameter userId: (path)  
     - parameter workday: (query) Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfilesUser(userId: String, workday: Date? = nil, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfilesUserWithRequestBuilder(userId: userId, workday: workday)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Performance profile of a user
     - GET /api/v2/gamification/profiles/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "metricOrders" : [ "metricOrders", "metricOrders" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "maxLeaderboardRankSize" : 1,
  "memberCount" : 6,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "active" : true,
  "id" : "id",
  "reportingIntervals" : [ {
    "intervalType" : "Day",
    "intervalValue" : 0
  }, {
    "intervalType" : "Day",
    "intervalValue" : 0
  } ]
}, statusCode=200}]
     
     - parameter userId: (path)  
     - parameter workday: (query) Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func getGamificationProfilesUserWithRequestBuilder(userId: String, workday: Date? = nil) -> RequestBuilder<PerformanceProfile> {        
        var path = "/api/v2/gamification/profiles/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "workday": workday?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Performance profile of the requesting user
     
     - parameter workday: (query) Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationProfilesUsersMe(workday: Date? = nil, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationProfilesUsersMeWithRequestBuilder(workday: workday)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Performance profile of the requesting user
     - GET /api/v2/gamification/profiles/users/me
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "metricOrders" : [ "metricOrders", "metricOrders" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "maxLeaderboardRankSize" : 1,
  "memberCount" : 6,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "active" : true,
  "id" : "id",
  "reportingIntervals" : [ {
    "intervalType" : "Day",
    "intervalValue" : 0
  }, {
    "intervalType" : "Day",
    "intervalValue" : 0
  } ]
}, statusCode=200}]
     
     - parameter workday: (query) Target querying workday. If not provided, then queries the current performance profile. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func getGamificationProfilesUsersMeWithRequestBuilder(workday: Date? = nil) -> RequestBuilder<PerformanceProfile> {        
        let path = "/api/v2/gamification/profiles/users/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "workday": workday?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Workday performance metrics of the requesting user
     
     - parameter workday: (query) Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecards(workday: Date, expand: [String]? = nil, completion: @escaping ((_ data: WorkdayMetricListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsWithRequestBuilder(workday: workday, expand: expand)
        requestBuilder.execute { (response: Response<WorkdayMetricListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Workday performance metrics of the requesting user
     - GET /api/v2/gamification/scorecards
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "evaluationDetails" : [ {
      "evaluationId" : "evaluationId",
      "mediaTypes" : [ "callback", "callback" ],
      "evaluationScore" : 9.301444243932576,
      "maxPoints" : 3,
      "conversationId" : "conversationId",
      "conversationDate" : "2000-01-23T04:56:07.000+00:00",
      "conversationEndDate" : "2000-01-23T04:56:07.000+00:00",
      "formName" : "formName",
      "points" : 7
    }, {
      "evaluationId" : "evaluationId",
      "mediaTypes" : [ "callback", "callback" ],
      "evaluationScore" : 9.301444243932576,
      "maxPoints" : 3,
      "conversationId" : "conversationId",
      "conversationDate" : "2000-01-23T04:56:07.000+00:00",
      "conversationEndDate" : "2000-01-23T04:56:07.000+00:00",
      "formName" : "formName",
      "points" : 7
    } ],
    "punctualityEvents" : [ {
      "activityCodeId" : "activityCodeId",
      "activityCode" : "activityCode",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 5,
      "activityName" : "activityName",
      "delta" : 2.3021358869347655,
      "description" : "description",
      "category" : "category",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+00:00",
      "bullseye" : true,
      "points" : 5
    }, {
      "activityCodeId" : "activityCodeId",
      "activityCode" : "activityCode",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 5,
      "activityName" : "activityName",
      "delta" : 2.3021358869347655,
      "description" : "description",
      "category" : "category",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+00:00",
      "bullseye" : true,
      "points" : 5
    } ],
    "metric" : "{}",
    "maxPoints" : 6,
    "value" : 1.4658129805029452,
    "objective" : "{}",
    "points" : 0
  }, {
    "evaluationDetails" : [ {
      "evaluationId" : "evaluationId",
      "mediaTypes" : [ "callback", "callback" ],
      "evaluationScore" : 9.301444243932576,
      "maxPoints" : 3,
      "conversationId" : "conversationId",
      "conversationDate" : "2000-01-23T04:56:07.000+00:00",
      "conversationEndDate" : "2000-01-23T04:56:07.000+00:00",
      "formName" : "formName",
      "points" : 7
    }, {
      "evaluationId" : "evaluationId",
      "mediaTypes" : [ "callback", "callback" ],
      "evaluationScore" : 9.301444243932576,
      "maxPoints" : 3,
      "conversationId" : "conversationId",
      "conversationDate" : "2000-01-23T04:56:07.000+00:00",
      "conversationEndDate" : "2000-01-23T04:56:07.000+00:00",
      "formName" : "formName",
      "points" : 7
    } ],
    "punctualityEvents" : [ {
      "activityCodeId" : "activityCodeId",
      "activityCode" : "activityCode",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 5,
      "activityName" : "activityName",
      "delta" : 2.3021358869347655,
      "description" : "description",
      "category" : "category",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+00:00",
      "bullseye" : true,
      "points" : 5
    }, {
      "activityCodeId" : "activityCodeId",
      "activityCode" : "activityCode",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 5,
      "activityName" : "activityName",
      "delta" : 2.3021358869347655,
      "description" : "description",
      "category" : "category",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+00:00",
      "bullseye" : true,
      "points" : 5
    } ],
    "metric" : "{}",
    "maxPoints" : 6,
    "value" : 1.4658129805029452,
    "objective" : "{}",
    "points" : 0
  } ]
}, statusCode=200}]
     
     - parameter workday: (query) Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<WorkdayMetricListing> 
     */
    open class func getGamificationScorecardsWithRequestBuilder(workday: Date, expand: [String]? = nil) -> RequestBuilder<WorkdayMetricListing> {        
        let path = "/api/v2/gamification/scorecards"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "workday": workday.encodeToJSON(), 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<WorkdayMetricListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Attendance status metrics of the requesting user
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsAttendance(startWorkday: Date, endWorkday: Date, completion: @escaping ((_ data: AttendanceStatusListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsAttendanceWithRequestBuilder(startWorkday: startWorkday, endWorkday: endWorkday)
        requestBuilder.execute { (response: Response<AttendanceStatusListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Attendance status metrics of the requesting user
     - GET /api/v2/gamification/scorecards/attendance
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "hasEvaluation" : "HasQualityEvaluation",
    "attendanceStatusType" : "HasData",
    "dateWorkday" : "2000-01-23"
  }, {
    "hasEvaluation" : "HasQualityEvaluation",
    "attendanceStatusType" : "HasData",
    "dateWorkday" : "2000-01-23"
  } ]
}, statusCode=200}]
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<AttendanceStatusListing> 
     */
    open class func getGamificationScorecardsAttendanceWithRequestBuilder(startWorkday: Date, endWorkday: Date) -> RequestBuilder<AttendanceStatusListing> {        
        let path = "/api/v2/gamification/scorecards/attendance"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AttendanceStatusListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Best points of the requesting user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsBestpoints(completion: @escaping ((_ data: UserBestPoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsBestpointsWithRequestBuilder()
        requestBuilder.execute { (response: Response<UserBestPoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Best points of the requesting user
     - GET /api/v2/gamification/scorecards/bestpoints
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "user" : "{}",
  "bestPoints" : [ {
    "granularityType" : "Daily",
    "dateEndWorkday" : "2000-01-23",
    "dateStartWorkday" : "2000-01-23",
    "rank" : 6,
    "points" : 0
  }, {
    "granularityType" : "Daily",
    "dateEndWorkday" : "2000-01-23",
    "dateStartWorkday" : "2000-01-23",
    "rank" : 6,
    "points" : 0
  } ]
}, statusCode=200}]

     - returns: RequestBuilder<UserBestPoints> 
     */
    open class func getGamificationScorecardsBestpointsWithRequestBuilder() -> RequestBuilder<UserBestPoints> {        
        let path = "/api/v2/gamification/scorecards/bestpoints"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserBestPoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     All-time points of the requesting user
     
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsPointsAlltime(endWorkday: Date, completion: @escaping ((_ data: AllTimePoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsPointsAlltimeWithRequestBuilder(endWorkday: endWorkday)
        requestBuilder.execute { (response: Response<AllTimePoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     All-time points of the requesting user
     - GET /api/v2/gamification/scorecards/points/alltime
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateEndWorkday" : "2000-01-23",
  "allTimePoints" : 0,
  "user" : "{}"
}, statusCode=200}]
     
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<AllTimePoints> 
     */
    open class func getGamificationScorecardsPointsAlltimeWithRequestBuilder(endWorkday: Date) -> RequestBuilder<AllTimePoints> {        
        let path = "/api/v2/gamification/scorecards/points/alltime"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "endWorkday": endWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AllTimePoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Average points of the requesting user's division or performance profile
     
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsPointsAverage(workday: Date, completion: @escaping ((_ data: SingleWorkdayAveragePoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsPointsAverageWithRequestBuilder(workday: workday)
        requestBuilder.execute { (response: Response<SingleWorkdayAveragePoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Average points of the requesting user's division or performance profile
     - GET /api/v2/gamification/scorecards/points/average
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "averagePoints" : 0.8008281904610115,
  "dateWorkday" : "2000-01-23"
}, statusCode=200}]
     
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<SingleWorkdayAveragePoints> 
     */
    open class func getGamificationScorecardsPointsAverageWithRequestBuilder(workday: Date) -> RequestBuilder<SingleWorkdayAveragePoints> {        
        let path = "/api/v2/gamification/scorecards/points/average"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "workday": workday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<SingleWorkdayAveragePoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum DayOfWeek_getGamificationScorecardsPointsTrends: String { 
        case sunday = "Sunday"
        case monday = "Monday"
        case tuesday = "Tuesday"
        case wednesday = "Wednesday"
        case thursday = "Thursday"
        case friday = "Friday"
        case saturday = "Saturday"
    }

    
    /**
     Points trends of the requesting user
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter dayOfWeek: (query) Optional filter to specify which day of weeks to be included in the response (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsPointsTrends(startWorkday: Date, endWorkday: Date, dayOfWeek: DayOfWeek_getGamificationScorecardsPointsTrends? = nil, completion: @escaping ((_ data: WorkdayPointsTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsPointsTrendsWithRequestBuilder(startWorkday: startWorkday, endWorkday: endWorkday, dayOfWeek: dayOfWeek)
        requestBuilder.execute { (response: Response<WorkdayPointsTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Points trends of the requesting user
     - GET /api/v2/gamification/scorecards/points/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dayOfWeek" : "Sunday",
  "averagePoints" : 0.8008281904610115,
  "dateEndWorkday" : "2000-01-23",
  "trend" : [ {
    "dateWorkday" : "2000-01-23",
    "points" : 6.027456183070403
  }, {
    "dateWorkday" : "2000-01-23",
    "points" : 6.027456183070403
  } ],
  "dateStartWorkday" : "2000-01-23",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter dayOfWeek: (query) Optional filter to specify which day of weeks to be included in the response (optional)

     - returns: RequestBuilder<WorkdayPointsTrend> 
     */
    open class func getGamificationScorecardsPointsTrendsWithRequestBuilder(startWorkday: Date, endWorkday: Date, dayOfWeek: DayOfWeek_getGamificationScorecardsPointsTrends? = nil) -> RequestBuilder<WorkdayPointsTrend> {        
        let path = "/api/v2/gamification/scorecards/points/trends"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "dayOfWeek": dayOfWeek?.rawValue
        ])

        let requestBuilder: RequestBuilder<WorkdayPointsTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     Average performance values trends by metric of a user
     
     - parameter profileId: (path) performanceProfileId 
     - parameter metricId: (path) metricId 
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsProfileMetricUserValuesTrends(profileId: String, metricId: String, userId: String, startWorkday: Date, endWorkday: Date, referenceWorkday: Date? = nil, timeZone: String? = nil, completion: @escaping ((_ data: MetricValueTrendAverage?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsProfileMetricUserValuesTrendsWithRequestBuilder(profileId: profileId, metricId: metricId, userId: userId, startWorkday: startWorkday, endWorkday: endWorkday, referenceWorkday: referenceWorkday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<MetricValueTrendAverage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Average performance values trends by metric of a user
     - GET /api/v2/gamification/scorecards/profiles/{profileId}/metrics/{metricId}/users/{userId}/values/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "result" : "{}",
  "performanceProfile" : "{}",
  "dateEndWorkday" : "2000-01-23",
  "metric" : "{}",
  "timezone" : "timezone",
  "dateStartWorkday" : "2000-01-23",
  "dateReferenceWorkday" : "2000-01-23",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter profileId: (path) performanceProfileId 
     - parameter metricId: (path) metricId 
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)

     - returns: RequestBuilder<MetricValueTrendAverage> 
     */
    open class func getGamificationScorecardsProfileMetricUserValuesTrendsWithRequestBuilder(profileId: String, metricId: String, userId: String, startWorkday: Date, endWorkday: Date, referenceWorkday: Date? = nil, timeZone: String? = nil) -> RequestBuilder<MetricValueTrendAverage> {        
        var path = "/api/v2/gamification/scorecards/profiles/{profileId}/metrics/{metricId}/users/{userId}/values/trends"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "referenceWorkday": referenceWorkday?.encodeToJSON(), 
            "timeZone": timeZone
        ])

        let requestBuilder: RequestBuilder<MetricValueTrendAverage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum FilterType_getGamificationScorecardsProfileMetricUsersValuesTrends: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    
    
    /**
     Average performance values trends by metric of a division or a performance profile
     
     - parameter profileId: (path) performanceProfileId 
     - parameter metricId: (path) metricId 
     - parameter filterType: (query) Filter type for the query request. 
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter filterId: (query) ID for the filter type. Only required when filterType is Division. (optional)
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsProfileMetricUsersValuesTrends(profileId: String, metricId: String, filterType: FilterType_getGamificationScorecardsProfileMetricUsersValuesTrends, startWorkday: Date, endWorkday: Date, filterId: String? = nil, referenceWorkday: Date? = nil, timeZone: String? = nil, completion: @escaping ((_ data: MetricValueTrendAverage?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsProfileMetricUsersValuesTrendsWithRequestBuilder(profileId: profileId, metricId: metricId, filterType: filterType, startWorkday: startWorkday, endWorkday: endWorkday, filterId: filterId, referenceWorkday: referenceWorkday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<MetricValueTrendAverage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Average performance values trends by metric of a division or a performance profile
     - GET /api/v2/gamification/scorecards/profiles/{profileId}/metrics/{metricId}/users/values/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "result" : "{}",
  "performanceProfile" : "{}",
  "dateEndWorkday" : "2000-01-23",
  "metric" : "{}",
  "timezone" : "timezone",
  "dateStartWorkday" : "2000-01-23",
  "dateReferenceWorkday" : "2000-01-23",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter profileId: (path) performanceProfileId 
     - parameter metricId: (path) metricId 
     - parameter filterType: (query) Filter type for the query request. 
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter filterId: (query) ID for the filter type. Only required when filterType is Division. (optional)
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)

     - returns: RequestBuilder<MetricValueTrendAverage> 
     */
    open class func getGamificationScorecardsProfileMetricUsersValuesTrendsWithRequestBuilder(profileId: String, metricId: String, filterType: FilterType_getGamificationScorecardsProfileMetricUsersValuesTrends, startWorkday: Date, endWorkday: Date, filterId: String? = nil, referenceWorkday: Date? = nil, timeZone: String? = nil) -> RequestBuilder<MetricValueTrendAverage> {        
        var path = "/api/v2/gamification/scorecards/profiles/{profileId}/metrics/{metricId}/users/values/trends"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "referenceWorkday": referenceWorkday?.encodeToJSON(), 
            "timeZone": timeZone
        ])

        let requestBuilder: RequestBuilder<MetricValueTrendAverage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum FilterType_getGamificationScorecardsProfileMetricValuesTrends: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    /**
     Average performance values trends by metric of the requesting user
     
     - parameter profileId: (path) performanceProfileId 
     - parameter metricId: (path) metricId 
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter filterType: (query) Filter type for the query request. If not set, returns the values trends of the requesting user (optional)
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsProfileMetricValuesTrends(profileId: String, metricId: String, startWorkday: Date, endWorkday: Date, filterType: FilterType_getGamificationScorecardsProfileMetricValuesTrends? = nil, referenceWorkday: Date? = nil, timeZone: String? = nil, completion: @escaping ((_ data: MetricValueTrendAverage?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsProfileMetricValuesTrendsWithRequestBuilder(profileId: profileId, metricId: metricId, startWorkday: startWorkday, endWorkday: endWorkday, filterType: filterType, referenceWorkday: referenceWorkday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<MetricValueTrendAverage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Average performance values trends by metric of the requesting user
     - GET /api/v2/gamification/scorecards/profiles/{profileId}/metrics/{metricId}/values/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "result" : "{}",
  "performanceProfile" : "{}",
  "dateEndWorkday" : "2000-01-23",
  "metric" : "{}",
  "timezone" : "timezone",
  "dateStartWorkday" : "2000-01-23",
  "dateReferenceWorkday" : "2000-01-23",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter profileId: (path) performanceProfileId 
     - parameter metricId: (path) metricId 
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter filterType: (query) Filter type for the query request. If not set, returns the values trends of the requesting user (optional)
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the associated metric definition. If not set, then the value of endWorkday is used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)

     - returns: RequestBuilder<MetricValueTrendAverage> 
     */
    open class func getGamificationScorecardsProfileMetricValuesTrendsWithRequestBuilder(profileId: String, metricId: String, startWorkday: Date, endWorkday: Date, filterType: FilterType_getGamificationScorecardsProfileMetricValuesTrends? = nil, referenceWorkday: Date? = nil, timeZone: String? = nil) -> RequestBuilder<MetricValueTrendAverage> {        
        var path = "/api/v2/gamification/scorecards/profiles/{profileId}/metrics/{metricId}/values/trends"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType?.rawValue, 
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "referenceWorkday": referenceWorkday?.encodeToJSON(), 
            "timeZone": timeZone
        ])

        let requestBuilder: RequestBuilder<MetricValueTrendAverage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Workday performance metrics for a user
     
     - parameter userId: (path)  
     - parameter workday: (query) Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUser(userId: String, workday: Date, expand: [String]? = nil, completion: @escaping ((_ data: WorkdayMetricListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserWithRequestBuilder(userId: userId, workday: workday, expand: expand)
        requestBuilder.execute { (response: Response<WorkdayMetricListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Workday performance metrics for a user
     - GET /api/v2/gamification/scorecards/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "evaluationDetails" : [ {
      "evaluationId" : "evaluationId",
      "mediaTypes" : [ "callback", "callback" ],
      "evaluationScore" : 9.301444243932576,
      "maxPoints" : 3,
      "conversationId" : "conversationId",
      "conversationDate" : "2000-01-23T04:56:07.000+00:00",
      "conversationEndDate" : "2000-01-23T04:56:07.000+00:00",
      "formName" : "formName",
      "points" : 7
    }, {
      "evaluationId" : "evaluationId",
      "mediaTypes" : [ "callback", "callback" ],
      "evaluationScore" : 9.301444243932576,
      "maxPoints" : 3,
      "conversationId" : "conversationId",
      "conversationDate" : "2000-01-23T04:56:07.000+00:00",
      "conversationEndDate" : "2000-01-23T04:56:07.000+00:00",
      "formName" : "formName",
      "points" : 7
    } ],
    "punctualityEvents" : [ {
      "activityCodeId" : "activityCodeId",
      "activityCode" : "activityCode",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 5,
      "activityName" : "activityName",
      "delta" : 2.3021358869347655,
      "description" : "description",
      "category" : "category",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+00:00",
      "bullseye" : true,
      "points" : 5
    }, {
      "activityCodeId" : "activityCodeId",
      "activityCode" : "activityCode",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 5,
      "activityName" : "activityName",
      "delta" : 2.3021358869347655,
      "description" : "description",
      "category" : "category",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+00:00",
      "bullseye" : true,
      "points" : 5
    } ],
    "metric" : "{}",
    "maxPoints" : 6,
    "value" : 1.4658129805029452,
    "objective" : "{}",
    "points" : 0
  }, {
    "evaluationDetails" : [ {
      "evaluationId" : "evaluationId",
      "mediaTypes" : [ "callback", "callback" ],
      "evaluationScore" : 9.301444243932576,
      "maxPoints" : 3,
      "conversationId" : "conversationId",
      "conversationDate" : "2000-01-23T04:56:07.000+00:00",
      "conversationEndDate" : "2000-01-23T04:56:07.000+00:00",
      "formName" : "formName",
      "points" : 7
    }, {
      "evaluationId" : "evaluationId",
      "mediaTypes" : [ "callback", "callback" ],
      "evaluationScore" : 9.301444243932576,
      "maxPoints" : 3,
      "conversationId" : "conversationId",
      "conversationDate" : "2000-01-23T04:56:07.000+00:00",
      "conversationEndDate" : "2000-01-23T04:56:07.000+00:00",
      "formName" : "formName",
      "points" : 7
    } ],
    "punctualityEvents" : [ {
      "activityCodeId" : "activityCodeId",
      "activityCode" : "activityCode",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 5,
      "activityName" : "activityName",
      "delta" : 2.3021358869347655,
      "description" : "description",
      "category" : "category",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+00:00",
      "bullseye" : true,
      "points" : 5
    }, {
      "activityCodeId" : "activityCodeId",
      "activityCode" : "activityCode",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 5,
      "activityName" : "activityName",
      "delta" : 2.3021358869347655,
      "description" : "description",
      "category" : "category",
      "dateScheduleStart" : "2000-01-23T04:56:07.000+00:00",
      "bullseye" : true,
      "points" : 5
    } ],
    "metric" : "{}",
    "maxPoints" : 6,
    "value" : 1.4658129805029452,
    "objective" : "{}",
    "points" : 0
  } ]
}, statusCode=200}]
     
     - parameter userId: (path)  
     - parameter workday: (query) Target querying workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter expand: (query) Which fields, if any, to expand. (optional)

     - returns: RequestBuilder<WorkdayMetricListing> 
     */
    open class func getGamificationScorecardsUserWithRequestBuilder(userId: String, workday: Date, expand: [String]? = nil) -> RequestBuilder<WorkdayMetricListing> {        
        var path = "/api/v2/gamification/scorecards/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "workday": workday.encodeToJSON(), 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<WorkdayMetricListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Attendance status metrics for a user
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserAttendance(userId: String, startWorkday: Date, endWorkday: Date, completion: @escaping ((_ data: AttendanceStatusListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserAttendanceWithRequestBuilder(userId: userId, startWorkday: startWorkday, endWorkday: endWorkday)
        requestBuilder.execute { (response: Response<AttendanceStatusListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Attendance status metrics for a user
     - GET /api/v2/gamification/scorecards/users/{userId}/attendance
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "hasEvaluation" : "HasQualityEvaluation",
    "attendanceStatusType" : "HasData",
    "dateWorkday" : "2000-01-23"
  }, {
    "hasEvaluation" : "HasQualityEvaluation",
    "attendanceStatusType" : "HasData",
    "dateWorkday" : "2000-01-23"
  } ]
}, statusCode=200}]
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<AttendanceStatusListing> 
     */
    open class func getGamificationScorecardsUserAttendanceWithRequestBuilder(userId: String, startWorkday: Date, endWorkday: Date) -> RequestBuilder<AttendanceStatusListing> {        
        var path = "/api/v2/gamification/scorecards/users/{userId}/attendance"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AttendanceStatusListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Best points of a user
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserBestpoints(userId: String, completion: @escaping ((_ data: UserBestPoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserBestpointsWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<UserBestPoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Best points of a user
     - GET /api/v2/gamification/scorecards/users/{userId}/bestpoints
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "user" : "{}",
  "bestPoints" : [ {
    "granularityType" : "Daily",
    "dateEndWorkday" : "2000-01-23",
    "dateStartWorkday" : "2000-01-23",
    "rank" : 6,
    "points" : 0
  }, {
    "granularityType" : "Daily",
    "dateEndWorkday" : "2000-01-23",
    "dateStartWorkday" : "2000-01-23",
    "rank" : 6,
    "points" : 0
  } ]
}, statusCode=200}]
     
     - parameter userId: (path)  

     - returns: RequestBuilder<UserBestPoints> 
     */
    open class func getGamificationScorecardsUserBestpointsWithRequestBuilder(userId: String) -> RequestBuilder<UserBestPoints> {        
        var path = "/api/v2/gamification/scorecards/users/{userId}/bestpoints"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserBestPoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     All-time points for a user
     
     - parameter userId: (path)  
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserPointsAlltime(userId: String, endWorkday: Date, completion: @escaping ((_ data: AllTimePoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserPointsAlltimeWithRequestBuilder(userId: userId, endWorkday: endWorkday)
        requestBuilder.execute { (response: Response<AllTimePoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     All-time points for a user
     - GET /api/v2/gamification/scorecards/users/{userId}/points/alltime
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateEndWorkday" : "2000-01-23",
  "allTimePoints" : 0,
  "user" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path)  
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<AllTimePoints> 
     */
    open class func getGamificationScorecardsUserPointsAlltimeWithRequestBuilder(userId: String, endWorkday: Date) -> RequestBuilder<AllTimePoints> {        
        var path = "/api/v2/gamification/scorecards/users/{userId}/points/alltime"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "endWorkday": endWorkday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AllTimePoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum DayOfWeek_getGamificationScorecardsUserPointsTrends: String { 
        case sunday = "Sunday"
        case monday = "Monday"
        case tuesday = "Tuesday"
        case wednesday = "Wednesday"
        case thursday = "Thursday"
        case friday = "Friday"
        case saturday = "Saturday"
    }

    
    /**
     Points trend for a user
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter dayOfWeek: (query) Optional filter to specify which day of weeks to be included in the response (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserPointsTrends(userId: String, startWorkday: Date, endWorkday: Date, dayOfWeek: DayOfWeek_getGamificationScorecardsUserPointsTrends? = nil, completion: @escaping ((_ data: WorkdayPointsTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserPointsTrendsWithRequestBuilder(userId: userId, startWorkday: startWorkday, endWorkday: endWorkday, dayOfWeek: dayOfWeek)
        requestBuilder.execute { (response: Response<WorkdayPointsTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Points trend for a user
     - GET /api/v2/gamification/scorecards/users/{userId}/points/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dayOfWeek" : "Sunday",
  "averagePoints" : 0.8008281904610115,
  "dateEndWorkday" : "2000-01-23",
  "trend" : [ {
    "dateWorkday" : "2000-01-23",
    "points" : 6.027456183070403
  }, {
    "dateWorkday" : "2000-01-23",
    "points" : 6.027456183070403
  } ],
  "dateStartWorkday" : "2000-01-23",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter dayOfWeek: (query) Optional filter to specify which day of weeks to be included in the response (optional)

     - returns: RequestBuilder<WorkdayPointsTrend> 
     */
    open class func getGamificationScorecardsUserPointsTrendsWithRequestBuilder(userId: String, startWorkday: Date, endWorkday: Date, dayOfWeek: DayOfWeek_getGamificationScorecardsUserPointsTrends? = nil) -> RequestBuilder<WorkdayPointsTrend> {        
        var path = "/api/v2/gamification/scorecards/users/{userId}/points/trends"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "dayOfWeek": dayOfWeek?.rawValue
        ])

        let requestBuilder: RequestBuilder<WorkdayPointsTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Values trends of a user
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUserValuesTrends(userId: String, startWorkday: Date, endWorkday: Date, timeZone: String? = nil, completion: @escaping ((_ data: WorkdayValuesTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUserValuesTrendsWithRequestBuilder(userId: userId, startWorkday: startWorkday, endWorkday: endWorkday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<WorkdayValuesTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Values trends of a user
     - GET /api/v2/gamification/scorecards/users/{userId}/values/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "dateEndWorkday" : "2000-01-23",
  "metric" : "{}",
  "timezone" : "timezone",
  "dateStartWorkday" : "2000-01-23",
  "dateReferenceWorkday" : "2000-01-23",
  "user" : "{}",
  "results" : [ {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  }, {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter userId: (path)  
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)

     - returns: RequestBuilder<WorkdayValuesTrend> 
     */
    open class func getGamificationScorecardsUserValuesTrendsWithRequestBuilder(userId: String, startWorkday: Date, endWorkday: Date, timeZone: String? = nil) -> RequestBuilder<WorkdayValuesTrend> {        
        var path = "/api/v2/gamification/scorecards/users/{userId}/values/trends"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "timeZone": timeZone
        ])

        let requestBuilder: RequestBuilder<WorkdayValuesTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationScorecardsUsersPointsAverage: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    /**
     Workday average points by target group
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUsersPointsAverage(filterType: FilterType_getGamificationScorecardsUsersPointsAverage, filterId: String, workday: Date, completion: @escaping ((_ data: SingleWorkdayAveragePoints?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUsersPointsAverageWithRequestBuilder(filterType: filterType, filterId: filterId, workday: workday)
        requestBuilder.execute { (response: Response<SingleWorkdayAveragePoints>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Workday average points by target group
     - GET /api/v2/gamification/scorecards/users/points/average
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "averagePoints" : 0.8008281904610115,
  "dateWorkday" : "2000-01-23"
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 

     - returns: RequestBuilder<SingleWorkdayAveragePoints> 
     */
    open class func getGamificationScorecardsUsersPointsAverageWithRequestBuilder(filterType: FilterType_getGamificationScorecardsUsersPointsAverage, filterId: String, workday: Date) -> RequestBuilder<SingleWorkdayAveragePoints> {        
        let path = "/api/v2/gamification/scorecards/users/points/average"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "workday": workday.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<SingleWorkdayAveragePoints>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationScorecardsUsersValuesAverage: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    /**
     Workday average values by target group
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division Id 
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUsersValuesAverage(filterType: FilterType_getGamificationScorecardsUsersValuesAverage, filterId: String, workday: Date, timeZone: String? = nil, completion: @escaping ((_ data: SingleWorkdayAverageValues?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUsersValuesAverageWithRequestBuilder(filterType: filterType, filterId: filterId, workday: workday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<SingleWorkdayAverageValues>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Workday average values by target group
     - GET /api/v2/gamification/scorecards/users/values/average
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "timezone" : "timezone",
  "user" : "{}",
  "results" : [ {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  }, {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  } ],
  "dateWorkday" : "2000-01-23"
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. For example, division Id 
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)

     - returns: RequestBuilder<SingleWorkdayAverageValues> 
     */
    open class func getGamificationScorecardsUsersValuesAverageWithRequestBuilder(filterType: FilterType_getGamificationScorecardsUsersValuesAverage, filterId: String, workday: Date, timeZone: String? = nil) -> RequestBuilder<SingleWorkdayAverageValues> {        
        let path = "/api/v2/gamification/scorecards/users/values/average"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "workday": workday.encodeToJSON(), 
            "timeZone": timeZone
        ])

        let requestBuilder: RequestBuilder<SingleWorkdayAverageValues>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum FilterType_getGamificationScorecardsUsersValuesTrends: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    
    
    /**
     Values trend by target group
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsUsersValuesTrends(filterType: FilterType_getGamificationScorecardsUsersValuesTrends, filterId: String, startWorkday: Date, endWorkday: Date, timeZone: String? = nil, completion: @escaping ((_ data: WorkdayValuesTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsUsersValuesTrendsWithRequestBuilder(filterType: filterType, filterId: filterId, startWorkday: startWorkday, endWorkday: endWorkday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<WorkdayValuesTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Values trend by target group
     - GET /api/v2/gamification/scorecards/users/values/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "dateEndWorkday" : "2000-01-23",
  "metric" : "{}",
  "timezone" : "timezone",
  "dateStartWorkday" : "2000-01-23",
  "dateReferenceWorkday" : "2000-01-23",
  "user" : "{}",
  "results" : [ {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  }, {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter filterType: (query) Filter type for the query request. 
     - parameter filterId: (query) ID for the filter type. 
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)

     - returns: RequestBuilder<WorkdayValuesTrend> 
     */
    open class func getGamificationScorecardsUsersValuesTrendsWithRequestBuilder(filterType: FilterType_getGamificationScorecardsUsersValuesTrends, filterId: String, startWorkday: Date, endWorkday: Date, timeZone: String? = nil) -> RequestBuilder<WorkdayValuesTrend> {        
        let path = "/api/v2/gamification/scorecards/users/values/trends"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType.rawValue, 
            "filterId": filterId, 
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "timeZone": timeZone
        ])

        let requestBuilder: RequestBuilder<WorkdayValuesTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Average values of the requesting user's division or performance profile
     
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsValuesAverage(workday: Date, timeZone: String? = nil, completion: @escaping ((_ data: SingleWorkdayAverageValues?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsValuesAverageWithRequestBuilder(workday: workday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<SingleWorkdayAverageValues>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Average values of the requesting user's division or performance profile
     - GET /api/v2/gamification/scorecards/values/average
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "timezone" : "timezone",
  "user" : "{}",
  "results" : [ {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  }, {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  } ],
  "dateWorkday" : "2000-01-23"
}, statusCode=200}]
     
     - parameter workday: (query) The target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)

     - returns: RequestBuilder<SingleWorkdayAverageValues> 
     */
    open class func getGamificationScorecardsValuesAverageWithRequestBuilder(workday: Date, timeZone: String? = nil) -> RequestBuilder<SingleWorkdayAverageValues> {        
        let path = "/api/v2/gamification/scorecards/values/average"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "workday": workday.encodeToJSON(), 
            "timeZone": timeZone
        ])

        let requestBuilder: RequestBuilder<SingleWorkdayAverageValues>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum FilterType_getGamificationScorecardsValuesTrends: String { 
        case performanceProfile = "PerformanceProfile"
        case division = "Division"
    }

    
    
    
    /**
     Values trends of the requesting user or group
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter filterType: (query) Filter type for the query request. If not set, then the request is for the requesting user. (optional)
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the profile of the user as of this date. If not set, then the user&#39;s current profile will be used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationScorecardsValuesTrends(startWorkday: Date, endWorkday: Date, filterType: FilterType_getGamificationScorecardsValuesTrends? = nil, referenceWorkday: Date? = nil, timeZone: String? = nil, completion: @escaping ((_ data: WorkdayValuesTrend?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationScorecardsValuesTrendsWithRequestBuilder(startWorkday: startWorkday, endWorkday: endWorkday, filterType: filterType, referenceWorkday: referenceWorkday, timeZone: timeZone)
        requestBuilder.execute { (response: Response<WorkdayValuesTrend>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Values trends of the requesting user or group
     - GET /api/v2/gamification/scorecards/values/trends
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "performanceProfile" : "{}",
  "dateEndWorkday" : "2000-01-23",
  "metric" : "{}",
  "timezone" : "timezone",
  "dateStartWorkday" : "2000-01-23",
  "dateReferenceWorkday" : "2000-01-23",
  "user" : "{}",
  "results" : [ {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  }, {
    "unitType" : "None",
    "average" : 0.8008281904610115,
    "metric" : "{}",
    "trend" : [ {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    }, {
      "value" : 6.027456183070403,
      "dateWorkday" : "2000-01-23"
    } ],
    "metricDefinition" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter startWorkday: (query) Start workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter endWorkday: (query) End workday of querying workdays range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd 
     - parameter filterType: (query) Filter type for the query request. If not set, then the request is for the requesting user. (optional)
     - parameter referenceWorkday: (query) Reference workday for the trend. Used to determine the profile of the user as of this date. If not set, then the user&#39;s current profile will be used. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd (optional)
     - parameter timeZone: (query) Timezone for the workday. Defaults to UTC (optional)

     - returns: RequestBuilder<WorkdayValuesTrend> 
     */
    open class func getGamificationScorecardsValuesTrendsWithRequestBuilder(startWorkday: Date, endWorkday: Date, filterType: FilterType_getGamificationScorecardsValuesTrends? = nil, referenceWorkday: Date? = nil, timeZone: String? = nil) -> RequestBuilder<WorkdayValuesTrend> {        
        let path = "/api/v2/gamification/scorecards/values/trends"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filterType": filterType?.rawValue, 
            "referenceWorkday": referenceWorkday?.encodeToJSON(), 
            "startWorkday": startWorkday.encodeToJSON(), 
            "endWorkday": endWorkday.encodeToJSON(), 
            "timeZone": timeZone
        ])

        let requestBuilder: RequestBuilder<WorkdayValuesTrend>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Gamification activation status
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationStatus(completion: @escaping ((_ data: GamificationStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationStatusWithRequestBuilder()
        requestBuilder.execute { (response: Response<GamificationStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Gamification activation status
     - GET /api/v2/gamification/status
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23",
  "dateStartPersonalBest" : "2000-01-23",
  "automaticUserAssignment" : true,
  "isActive" : true
}, statusCode=200}]

     - returns: RequestBuilder<GamificationStatus> 
     */
    open class func getGamificationStatusWithRequestBuilder() -> RequestBuilder<GamificationStatus> {        
        let path = "/api/v2/gamification/status"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GamificationStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Objective template by id
     
     - parameter templateId: (path) template id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationTemplate(templateId: String, completion: @escaping ((_ data: ObjectiveTemplate?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationTemplateWithRequestBuilder(templateId: templateId)
        requestBuilder.execute { (response: Response<ObjectiveTemplate>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Objective template by id
     - GET /api/v2/gamification/templates/{templateId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "zones" : [ {
    "upperLimitValue" : 1,
    "directionType" : "Up",
    "lowerLimitPoints" : 6,
    "zoneType" : "Good",
    "upperLimitPoints" : 0,
    "label" : "label",
    "lowerLimitValue" : 5
  }, {
    "upperLimitValue" : 1,
    "directionType" : "Up",
    "lowerLimitPoints" : 6,
    "zoneType" : "Good",
    "upperLimitPoints" : 0,
    "label" : "label",
    "lowerLimitValue" : 5
  } ]
}, statusCode=200}]
     
     - parameter templateId: (path) template id 

     - returns: RequestBuilder<ObjectiveTemplate> 
     */
    open class func getGamificationTemplateWithRequestBuilder(templateId: String) -> RequestBuilder<ObjectiveTemplate> {        
        var path = "/api/v2/gamification/templates/{templateId}"
        let templateIdPreEscape = "\(templateId)"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ObjectiveTemplate>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     All objective templates
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGamificationTemplates(completion: @escaping ((_ data: GetTemplatesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGamificationTemplatesWithRequestBuilder()
        requestBuilder.execute { (response: Response<GetTemplatesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     All objective templates
     - GET /api/v2/gamification/templates
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "zones" : [ {
      "upperLimitValue" : 1,
      "directionType" : "Up",
      "lowerLimitPoints" : 6,
      "zoneType" : "Good",
      "upperLimitPoints" : 0,
      "label" : "label",
      "lowerLimitValue" : 5
    }, {
      "upperLimitValue" : 1,
      "directionType" : "Up",
      "lowerLimitPoints" : 6,
      "zoneType" : "Good",
      "upperLimitPoints" : 0,
      "label" : "label",
      "lowerLimitValue" : 5
    } ]
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "zones" : [ {
      "upperLimitValue" : 1,
      "directionType" : "Up",
      "lowerLimitPoints" : 6,
      "zoneType" : "Good",
      "upperLimitPoints" : 0,
      "label" : "label",
      "lowerLimitValue" : 5
    }, {
      "upperLimitValue" : 1,
      "directionType" : "Up",
      "lowerLimitPoints" : 6,
      "zoneType" : "Good",
      "upperLimitPoints" : 0,
      "label" : "label",
      "lowerLimitValue" : 5
    } ]
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<GetTemplatesResponse> 
     */
    open class func getGamificationTemplatesWithRequestBuilder() -> RequestBuilder<GetTemplatesResponse> {        
        let path = "/api/v2/gamification/templates"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetTemplatesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Update External Metric Definition
     
     - parameter metricId: (path) Specifies the metric definition ID 
     - parameter body: (body) The External Metric Definition parameters to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchEmployeeperformanceExternalmetricsDefinition(metricId: String, body: ExternalMetricDefinitionUpdateRequest, completion: @escaping ((_ data: ExternalMetricDefinition?,_ error: Error?) -> Void)) {
        let requestBuilder = patchEmployeeperformanceExternalmetricsDefinitionWithRequestBuilder(metricId: metricId, body: body)
        requestBuilder.execute { (response: Response<ExternalMetricDefinition>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update External Metric Definition
     - PATCH /api/v2/employeeperformance/externalmetrics/definitions/{metricId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unit" : "Seconds",
  "unitDefinition" : "unitDefinition",
  "defaultObjectiveType" : "HigherIsBetter",
  "precision" : 0,
  "dateLastRefreshed" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "inUse" : true,
  "id" : "id",
  "retentionMonths" : 6,
  "enabled" : true
}, statusCode=200}]
     
     - parameter metricId: (path) Specifies the metric definition ID 
     - parameter body: (body) The External Metric Definition parameters to be updated 

     - returns: RequestBuilder<ExternalMetricDefinition> 
     */
    open class func patchEmployeeperformanceExternalmetricsDefinitionWithRequestBuilder(metricId: String, body: ExternalMetricDefinitionUpdateRequest) -> RequestBuilder<ExternalMetricDefinition> {        
        var path = "/api/v2/employeeperformance/externalmetrics/definitions/{metricId}"
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalMetricDefinition>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Write External Metric Data
     
     - parameter body: (body) The External Metric Data to be added (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postEmployeeperformanceExternalmetricsData(body: ExternalMetricDataWriteRequest? = nil, completion: @escaping ((_ data: ExternalMetricDataWriteResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postEmployeeperformanceExternalmetricsDataWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ExternalMetricDataWriteResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Write External Metric Data
     - POST /api/v2/employeeperformance/externalmetrics/data
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "processedEntities" : [ {
    "totalValue" : 1.4658129805029452,
    "metricId" : "metricId",
    "count" : 6,
    "userEmail" : "userEmail",
    "dateOccurred" : "2000-01-23",
    "type" : "Total",
    "totalCount" : 5,
    "userId" : "userId",
    "value" : 0.8008281904610115
  }, {
    "totalValue" : 1.4658129805029452,
    "metricId" : "metricId",
    "count" : 6,
    "userEmail" : "userEmail",
    "dateOccurred" : "2000-01-23",
    "type" : "Total",
    "totalCount" : 5,
    "userId" : "userId",
    "value" : 0.8008281904610115
  } ],
  "unprocessedEntities" : [ {
    "code" : "code",
    "metricId" : "metricId",
    "count" : 2,
    "userEmail" : "userEmail",
    "dateOccurred" : "2000-01-23",
    "type" : "Total",
    "message" : "message",
    "userId" : "userId",
    "value" : 5.637376656633329
  }, {
    "code" : "code",
    "metricId" : "metricId",
    "count" : 2,
    "userEmail" : "userEmail",
    "dateOccurred" : "2000-01-23",
    "type" : "Total",
    "message" : "message",
    "userId" : "userId",
    "value" : 5.637376656633329
  } ]
}, statusCode=200}]
     
     - parameter body: (body) The External Metric Data to be added (optional)

     - returns: RequestBuilder<ExternalMetricDataWriteResponse> 
     */
    open class func postEmployeeperformanceExternalmetricsDataWithRequestBuilder(body: ExternalMetricDataWriteRequest? = nil) -> RequestBuilder<ExternalMetricDataWriteResponse> {        
        let path = "/api/v2/employeeperformance/externalmetrics/data"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalMetricDataWriteResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create External Metric Definition
     
     - parameter body: (body) The External Metric Definition to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postEmployeeperformanceExternalmetricsDefinitions(body: ExternalMetricDefinitionCreateRequest? = nil, completion: @escaping ((_ data: ExternalMetricDefinition?,_ error: Error?) -> Void)) {
        let requestBuilder = postEmployeeperformanceExternalmetricsDefinitionsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ExternalMetricDefinition>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create External Metric Definition
     - POST /api/v2/employeeperformance/externalmetrics/definitions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unit" : "Seconds",
  "unitDefinition" : "unitDefinition",
  "defaultObjectiveType" : "HigherIsBetter",
  "precision" : 0,
  "dateLastRefreshed" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "inUse" : true,
  "id" : "id",
  "retentionMonths" : 6,
  "enabled" : true
}, statusCode=200}]
     
     - parameter body: (body) The External Metric Definition to be created (optional)

     - returns: RequestBuilder<ExternalMetricDefinition> 
     */
    open class func postEmployeeperformanceExternalmetricsDefinitionsWithRequestBuilder(body: ExternalMetricDefinitionCreateRequest? = nil) -> RequestBuilder<ExternalMetricDefinition> {        
        let path = "/api/v2/employeeperformance/externalmetrics/definitions"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExternalMetricDefinition>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Activate a performance profile
     
     - parameter profileId: (path) performanceProfileId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfileActivate(profileId: String, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfileActivateWithRequestBuilder(profileId: profileId)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Activate a performance profile
     - POST /api/v2/gamification/profiles/{profileId}/activate
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "metricOrders" : [ "metricOrders", "metricOrders" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "maxLeaderboardRankSize" : 1,
  "memberCount" : 6,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "active" : true,
  "id" : "id",
  "reportingIntervals" : [ {
    "intervalType" : "Day",
    "intervalValue" : 0
  }, {
    "intervalType" : "Day",
    "intervalValue" : 0
  } ]
}, statusCode=200}]
     
     - parameter profileId: (path) performanceProfileId 

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func postGamificationProfileActivateWithRequestBuilder(profileId: String) -> RequestBuilder<PerformanceProfile> {        
        var path = "/api/v2/gamification/profiles/{profileId}/activate"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Deactivate a performance profile
     
     - parameter profileId: (path) performanceProfileId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfileDeactivate(profileId: String, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfileDeactivateWithRequestBuilder(profileId: profileId)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Deactivate a performance profile
     - POST /api/v2/gamification/profiles/{profileId}/deactivate
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "metricOrders" : [ "metricOrders", "metricOrders" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "maxLeaderboardRankSize" : 1,
  "memberCount" : 6,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "active" : true,
  "id" : "id",
  "reportingIntervals" : [ {
    "intervalType" : "Day",
    "intervalValue" : 0
  }, {
    "intervalType" : "Day",
    "intervalValue" : 0
  } ]
}, statusCode=200}]
     
     - parameter profileId: (path) performanceProfileId 

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func postGamificationProfileDeactivateWithRequestBuilder(profileId: String) -> RequestBuilder<PerformanceProfile> {        
        var path = "/api/v2/gamification/profiles/{profileId}/deactivate"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Assign members to a given performance profile
     
     - parameter profileId: (path) Profile Id 
     - parameter body: (body) assignUsers 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfileMembers(profileId: String, body: AssignUsers, completion: @escaping ((_ data: Assignment?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfileMembersWithRequestBuilder(profileId: profileId, body: body)
        requestBuilder.execute { (response: Response<Assignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Assign members to a given performance profile
     - POST /api/v2/gamification/profiles/{profileId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "removedMembers" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "assignedMembers" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "assignmentErrors" : [ {
    "message" : "message",
    "user" : "{}"
  }, {
    "message" : "message",
    "user" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter profileId: (path) Profile Id 
     - parameter body: (body) assignUsers 

     - returns: RequestBuilder<Assignment> 
     */
    open class func postGamificationProfileMembersWithRequestBuilder(profileId: String, body: AssignUsers) -> RequestBuilder<Assignment> {        
        var path = "/api/v2/gamification/profiles/{profileId}/members"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Assignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Validate member assignment
     
     - parameter profileId: (path) Profile Id 
     - parameter body: (body) memberAssignments 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfileMembersValidate(profileId: String, body: ValidateAssignUsers, completion: @escaping ((_ data: AssignmentValidation?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfileMembersValidateWithRequestBuilder(profileId: profileId, body: body)
        requestBuilder.execute { (response: Response<AssignmentValidation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Validate member assignment
     - POST /api/v2/gamification/profiles/{profileId}/members/validate
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "invalidMemberAssignments" : [ {
    "message" : "message",
    "user" : "{}"
  }, {
    "message" : "message",
    "user" : "{}"
  } ],
  "membersNotAssigned" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "membersAlreadyAssigned" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "membersAlreadyAssignedToOther" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "currentProfile" : "{}",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "currentProfile" : "{}",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter profileId: (path) Profile Id 
     - parameter body: (body) memberAssignments 

     - returns: RequestBuilder<AssignmentValidation> 
     */
    open class func postGamificationProfileMembersValidateWithRequestBuilder(profileId: String, body: ValidateAssignUsers) -> RequestBuilder<AssignmentValidation> {        
        var path = "/api/v2/gamification/profiles/{profileId}/members/validate"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AssignmentValidation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Creates a linked metric
     
     - parameter sourceProfileId: (path) Source Performance Profile Id 
     - parameter sourceMetricId: (path) Source Metric Id 
     - parameter body: (body) linkedMetric 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfileMetricLink(sourceProfileId: String, sourceMetricId: String, body: TargetPerformanceProfile, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfileMetricLinkWithRequestBuilder(sourceProfileId: sourceProfileId, sourceMetricId: sourceMetricId, body: body)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Creates a linked metric
     - POST /api/v2/gamification/profiles/{sourceProfileId}/metrics/{sourceMetricId}/link
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "timeDisplayUnit" : "None",
  "precision" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "dateUnlinked" : "2000-01-23",
  "performanceProfileId" : "performanceProfileId",
  "objective" : "{}",
  "metricDefinitionId" : "metricDefinitionId",
  "linkedMetric" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "sourcePerformanceProfile" : "{}",
  "id" : "id",
  "externalMetricDefinitionId" : "externalMetricDefinitionId"
}, statusCode=201}]
     
     - parameter sourceProfileId: (path) Source Performance Profile Id 
     - parameter sourceMetricId: (path) Source Metric Id 
     - parameter body: (body) linkedMetric 

     - returns: RequestBuilder<Metric> 
     */
    open class func postGamificationProfileMetricLinkWithRequestBuilder(sourceProfileId: String, sourceMetricId: String, body: TargetPerformanceProfile) -> RequestBuilder<Metric> {        
        var path = "/api/v2/gamification/profiles/{sourceProfileId}/metrics/{sourceMetricId}/link"
        let sourceProfileIdPreEscape = "\(sourceProfileId)"
        let sourceProfileIdPostEscape = sourceProfileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sourceProfileId}", with: sourceProfileIdPostEscape, options: .literal, range: nil)
        let sourceMetricIdPreEscape = "\(sourceMetricId)"
        let sourceMetricIdPostEscape = sourceMetricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sourceMetricId}", with: sourceMetricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Creates a gamified metric with a given metric definition and metric objective under in a performance profile
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter body: (body) Metric 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfileMetrics(profileId: String, body: CreateMetric, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfileMetricsWithRequestBuilder(profileId: profileId, body: body)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Creates a gamified metric with a given metric definition and metric objective under in a performance profile
     - POST /api/v2/gamification/profiles/{profileId}/metrics
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "timeDisplayUnit" : "None",
  "precision" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "dateUnlinked" : "2000-01-23",
  "performanceProfileId" : "performanceProfileId",
  "objective" : "{}",
  "metricDefinitionId" : "metricDefinitionId",
  "linkedMetric" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "sourcePerformanceProfile" : "{}",
  "id" : "id",
  "externalMetricDefinitionId" : "externalMetricDefinitionId"
}, statusCode=201}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter body: (body) Metric 

     - returns: RequestBuilder<Metric> 
     */
    open class func postGamificationProfileMetricsWithRequestBuilder(profileId: String, body: CreateMetric) -> RequestBuilder<Metric> {        
        var path = "/api/v2/gamification/profiles/{profileId}/metrics"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Create a new custom performance profile
     
     - parameter body: (body) performanceProfile 
     - parameter copyMetrics: (query) Flag to copy metrics. If set to false, there will be no metrics associated with the new profile. If set to true or is absent (the default behavior), all metrics from the default profile will be copied over into the new profile. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfiles(body: CreatePerformanceProfile, copyMetrics: Bool? = nil, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfilesWithRequestBuilder(body: body, copyMetrics: copyMetrics)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a new custom performance profile
     - POST /api/v2/gamification/profiles
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "metricOrders" : [ "metricOrders", "metricOrders" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "maxLeaderboardRankSize" : 1,
  "memberCount" : 6,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "active" : true,
  "id" : "id",
  "reportingIntervals" : [ {
    "intervalType" : "Day",
    "intervalValue" : 0
  }, {
    "intervalType" : "Day",
    "intervalValue" : 0
  } ]
}, statusCode=201}]
     
     - parameter body: (body) performanceProfile 
     - parameter copyMetrics: (query) Flag to copy metrics. If set to false, there will be no metrics associated with the new profile. If set to true or is absent (the default behavior), all metrics from the default profile will be copied over into the new profile. (optional)

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func postGamificationProfilesWithRequestBuilder(body: CreatePerformanceProfile, copyMetrics: Bool? = nil) -> RequestBuilder<PerformanceProfile> {        
        let path = "/api/v2/gamification/profiles"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "copyMetrics": copyMetrics
        ])

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Query performance profiles in date range for a user
     
     - parameter userId: (path) The ID of a user. 
     - parameter body: (body) The date range of work day. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfilesUserQuery(userId: String, body: UserProfilesInDateRangeRequest, completion: @escaping ((_ data: UserProfilesInDateRange?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfilesUserQueryWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserProfilesInDateRange>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query performance profiles in date range for a user
     - POST /api/v2/gamification/profiles/users/{userId}/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateEndWorkday" : "2000-01-23",
  "profiles" : [ {
    "division" : "{}",
    "dateEndWorkday" : "2000-01-23",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateStartWorkday" : "2000-01-23",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateEndWorkday" : "2000-01-23",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateStartWorkday" : "2000-01-23",
    "id" : "id"
  } ],
  "dateStartWorkday" : "2000-01-23",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path) The ID of a user. 
     - parameter body: (body) The date range of work day. 

     - returns: RequestBuilder<UserProfilesInDateRange> 
     */
    open class func postGamificationProfilesUserQueryWithRequestBuilder(userId: String, body: UserProfilesInDateRangeRequest) -> RequestBuilder<UserProfilesInDateRange> {        
        var path = "/api/v2/gamification/profiles/users/{userId}/query"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserProfilesInDateRange>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query performance profiles in date range for the current user
     
     - parameter body: (body) The date range of work day. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGamificationProfilesUsersMeQuery(body: UserProfilesInDateRangeRequest, completion: @escaping ((_ data: UserProfilesInDateRange?,_ error: Error?) -> Void)) {
        let requestBuilder = postGamificationProfilesUsersMeQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserProfilesInDateRange>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query performance profiles in date range for the current user
     - POST /api/v2/gamification/profiles/users/me/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateEndWorkday" : "2000-01-23",
  "profiles" : [ {
    "division" : "{}",
    "dateEndWorkday" : "2000-01-23",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateStartWorkday" : "2000-01-23",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateEndWorkday" : "2000-01-23",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateStartWorkday" : "2000-01-23",
    "id" : "id"
  } ],
  "dateStartWorkday" : "2000-01-23",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) The date range of work day. 

     - returns: RequestBuilder<UserProfilesInDateRange> 
     */
    open class func postGamificationProfilesUsersMeQueryWithRequestBuilder(body: UserProfilesInDateRangeRequest) -> RequestBuilder<UserProfilesInDateRange> {        
        let path = "/api/v2/gamification/profiles/users/me/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserProfilesInDateRange>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Updates a performance profile
     
     - parameter profileId: (path) performanceProfileId 
     - parameter body: (body) performanceProfile (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putGamificationProfile(profileId: String, body: PerformanceProfile? = nil, completion: @escaping ((_ data: PerformanceProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = putGamificationProfileWithRequestBuilder(profileId: profileId, body: body)
        requestBuilder.execute { (response: Response<PerformanceProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Updates a performance profile
     - PUT /api/v2/gamification/profiles/{profileId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "metricOrders" : [ "metricOrders", "metricOrders" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "maxLeaderboardRankSize" : 1,
  "memberCount" : 6,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "active" : true,
  "id" : "id",
  "reportingIntervals" : [ {
    "intervalType" : "Day",
    "intervalValue" : 0
  }, {
    "intervalType" : "Day",
    "intervalValue" : 0
  } ]
}, statusCode=200}]
     
     - parameter profileId: (path) performanceProfileId 
     - parameter body: (body) performanceProfile (optional)

     - returns: RequestBuilder<PerformanceProfile> 
     */
    open class func putGamificationProfileWithRequestBuilder(profileId: String, body: PerformanceProfile? = nil) -> RequestBuilder<PerformanceProfile> {        
        var path = "/api/v2/gamification/profiles/{profileId}"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PerformanceProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     Updates a metric in performance profile
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter metricId: (path) Metric Id 
     - parameter body: (body) Metric 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putGamificationProfileMetric(profileId: String, metricId: String, body: CreateMetric, completion: @escaping ((_ data: Metric?,_ error: Error?) -> Void)) {
        let requestBuilder = putGamificationProfileMetricWithRequestBuilder(profileId: profileId, metricId: metricId, body: body)
        requestBuilder.execute { (response: Response<Metric>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Updates a metric in performance profile
     - PUT /api/v2/gamification/profiles/{profileId}/metrics/{metricId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "timeDisplayUnit" : "None",
  "precision" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "dateUnlinked" : "2000-01-23",
  "performanceProfileId" : "performanceProfileId",
  "objective" : "{}",
  "metricDefinitionId" : "metricDefinitionId",
  "linkedMetric" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "sourcePerformanceProfile" : "{}",
  "id" : "id",
  "externalMetricDefinitionId" : "externalMetricDefinitionId"
}, statusCode=200}]
     
     - parameter profileId: (path) Performance Profile Id 
     - parameter metricId: (path) Metric Id 
     - parameter body: (body) Metric 

     - returns: RequestBuilder<Metric> 
     */
    open class func putGamificationProfileMetricWithRequestBuilder(profileId: String, metricId: String, body: CreateMetric) -> RequestBuilder<Metric> {        
        var path = "/api/v2/gamification/profiles/{profileId}/metrics/{metricId}"
        let profileIdPreEscape = "\(profileId)"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let metricIdPreEscape = "\(metricId)"
        let metricIdPostEscape = metricIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{metricId}", with: metricIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Metric>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update gamification activation status
     
     - parameter status: (body) Gamification status 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putGamificationStatus(status: GamificationStatus, completion: @escaping ((_ data: GamificationStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = putGamificationStatusWithRequestBuilder(status: status)
        requestBuilder.execute { (response: Response<GamificationStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update gamification activation status
     - PUT /api/v2/gamification/status
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23",
  "dateStartPersonalBest" : "2000-01-23",
  "automaticUserAssignment" : true,
  "isActive" : true
}, statusCode=200}]
     
     - parameter status: (body) Gamification status 

     - returns: RequestBuilder<GamificationStatus> 
     */
    open class func putGamificationStatusWithRequestBuilder(status: GamificationStatus) -> RequestBuilder<GamificationStatus> {        
        let path = "/api/v2/gamification/status"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: status)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GamificationStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
