//
// GroupsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class GroupsAPI {
    
    /**
     Delete group
     
     - parameter groupId: (path) Group ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGroup(groupId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteGroupWithRequestBuilder(groupId: groupId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete group
     - DELETE /api/v2/groups/{groupId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter groupId: (path) Group ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteGroupWithRequestBuilder(groupId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Remove members
     
     - parameter groupId: (path) Group ID 
     - parameter ids: (query) Comma separated list of userIds to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGroupMembers(groupId: String, ids: String, completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteGroupMembersWithRequestBuilder(groupId: groupId, ids: ids)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Remove members
     - DELETE /api/v2/groups/{groupId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter groupId: (path) Group ID 
     - parameter ids: (query) Comma separated list of userIds to remove 

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteGroupMembersWithRequestBuilder(groupId: String, ids: String) -> RequestBuilder<JSON> {        
        var path = "/api/v2/groups/{groupId}/members"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids
        ])

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    public enum ModelType_getFieldconfig: String { 
        case person = "person"
        case group = "group"
        case org = "org"
        case externalcontact = "externalContact"
    }

    
    /**
     Fetch field config for an entity type
     
     - parameter type: (query) Field type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFieldconfig(type: ModelType_getFieldconfig, completion: @escaping ((_ data: FieldConfig?,_ error: Error?) -> Void)) {
        let requestBuilder = getFieldconfigWithRequestBuilder(type: type)
        requestBuilder.execute { (response: Response<FieldConfig>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch field config for an entity type
     - GET /api/v2/fieldconfig
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schemaVersion" : "schemaVersion",
  "entityType" : "person",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "state" : "state",
  "version" : "version",
  "sections" : [ {
    "instructionText" : "instructionText",
    "state" : "state",
    "fieldList" : [ {
      "instructionText" : "instructionText",
      "repeatable" : true,
      "customLabels" : true,
      "labelKeys" : [ "labelKeys", "labelKeys" ],
      "state" : "state",
      "params" : {
        "key" : "{}"
      },
      "type" : "type",
      "key" : "key",
      "required" : true,
      "gdpr" : true
    }, {
      "instructionText" : "instructionText",
      "repeatable" : true,
      "customLabels" : true,
      "labelKeys" : [ "labelKeys", "labelKeys" ],
      "state" : "state",
      "params" : {
        "key" : "{}"
      },
      "type" : "type",
      "key" : "key",
      "required" : true,
      "gdpr" : true
    } ],
    "key" : "key"
  }, {
    "instructionText" : "instructionText",
    "state" : "state",
    "fieldList" : [ {
      "instructionText" : "instructionText",
      "repeatable" : true,
      "customLabels" : true,
      "labelKeys" : [ "labelKeys", "labelKeys" ],
      "state" : "state",
      "params" : {
        "key" : "{}"
      },
      "type" : "type",
      "key" : "key",
      "required" : true,
      "gdpr" : true
    }, {
      "instructionText" : "instructionText",
      "repeatable" : true,
      "customLabels" : true,
      "labelKeys" : [ "labelKeys", "labelKeys" ],
      "state" : "state",
      "params" : {
        "key" : "{}"
      },
      "type" : "type",
      "key" : "key",
      "required" : true,
      "gdpr" : true
    } ],
    "key" : "key"
  } ]
}, statusCode=200}]
     
     - parameter type: (query) Field type 

     - returns: RequestBuilder<FieldConfig> 
     */
    open class func getFieldconfigWithRequestBuilder(type: ModelType_getFieldconfig) -> RequestBuilder<FieldConfig> {        
        let path = "/api/v2/fieldconfig"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<FieldConfig>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get group
     
     - parameter groupId: (path) Group ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroup(groupId: String, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        let requestBuilder = getGroupWithRequestBuilder(groupId: groupId)
        requestBuilder.execute { (response: Response<Group>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get group
     - GET /api/v2/groups/{groupId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "addresses" : [ {
    "extension" : "extension",
    "address" : "address",
    "display" : "display",
    "mediaType" : "PHONE",
    "type" : "GROUPRING"
  }, {
    "extension" : "extension",
    "address" : "address",
    "display" : "display",
    "mediaType" : "PHONE",
    "type" : "GROUPRING"
  } ],
  "visibility" : "public",
  "memberCount" : 5,
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "owners" : [ null, null ],
  "rolesEnabled" : true,
  "type" : "official",
  "version" : 2,
  "rulesVisible" : true,
  "name" : "name",
  "id" : "id",
  "state" : "active"
}, statusCode=200}]
     
     - parameter groupId: (path) Group ID 

     - returns: RequestBuilder<Group> 
     */
    open class func getGroupWithRequestBuilder(groupId: String) -> RequestBuilder<Group> {        
        var path = "/api/v2/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Group>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get all individuals associated with the group
     
     - parameter groupId: (path) Group ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupIndividuals(groupId: String, completion: @escaping ((_ data: UserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGroupIndividualsWithRequestBuilder(groupId: groupId)
        requestBuilder.execute { (response: Response<UserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all individuals associated with the group
     - GET /api/v2/groups/{groupId}/individuals
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter groupId: (path) Group ID 

     - returns: RequestBuilder<UserEntityListing> 
     */
    open class func getGroupIndividualsWithRequestBuilder(groupId: String) -> RequestBuilder<UserEntityListing> {        
        var path = "/api/v2/groups/{groupId}/individuals"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum SortOrder_getGroupMembers: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     Get group members, includes individuals, owners, and dynamically included people
     
     - parameter groupId: (path) Group ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupMembers(groupId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getGroupMembers? = nil, expand: [String]? = nil, completion: @escaping ((_ data: UserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGroupMembersWithRequestBuilder(groupId: groupId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<UserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get group members, includes individuals, owners, and dynamically included people
     - GET /api/v2/groups/{groupId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter groupId: (path) Group ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<UserEntityListing> 
     */
    open class func getGroupMembersWithRequestBuilder(groupId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getGroupMembers? = nil, expand: [String]? = nil) -> RequestBuilder<UserEntityListing> {        
        var path = "/api/v2/groups/{groupId}/members"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<UserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get group profile
     
     - parameter groupId: (path) groupId 
     - parameter fields: (query) Comma separated fields to return.  Allowable values can be found by querying /api/v2/fieldconfig?type&#x3D;group and using the key for the elements returned by the fieldList (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupProfile(groupId: String, fields: String? = nil, completion: @escaping ((_ data: GroupProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getGroupProfileWithRequestBuilder(groupId: groupId, fields: fields)
        requestBuilder.execute { (response: Response<GroupProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get group profile
     - GET /api/v2/groups/{groupId}/profile
     - This api is deprecated. Use /api/v2/groups instead
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "version" : 0
}, statusCode=200}]
     
     - parameter groupId: (path) groupId 
     - parameter fields: (query) Comma separated fields to return.  Allowable values can be found by querying /api/v2/fieldconfig?type&#x3D;group and using the key for the elements returned by the fieldList (optional)

     - returns: RequestBuilder<GroupProfile> 
     */
    open class func getGroupProfileWithRequestBuilder(groupId: String, fields: String? = nil) -> RequestBuilder<GroupProfile> {        
        var path = "/api/v2/groups/{groupId}/profile"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<GroupProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum SortOrder_getGroups: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    /**
     Get a group list
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter _id: (query) id (optional)
     - parameter jabberId: (query) A list of jabberIds to fetch by bulk (cannot be used with the \&quot;id\&quot; parameter) (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroups(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jabberId: [String]? = nil, sortOrder: SortOrder_getGroups? = nil, completion: @escaping ((_ data: GroupEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getGroupsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, _id: _id, jabberId: jabberId, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<GroupEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a group list
     - GET /api/v2/groups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter _id: (query) id (optional)
     - parameter jabberId: (query) A list of jabberIds to fetch by bulk (cannot be used with the \&quot;id\&quot; parameter) (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<GroupEntityListing> 
     */
    open class func getGroupsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jabberId: [String]? = nil, sortOrder: SortOrder_getGroups? = nil) -> RequestBuilder<GroupEntityListing> {        
        let path = "/api/v2/groups"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "id": _id, 
            "jabberId": jabberId, 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<GroupEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Search groups using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupsSearch(q64: String, expand: [String]? = nil, completion: @escaping ((_ data: GroupsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGroupsSearchWithRequestBuilder(q64: q64, expand: expand)
        requestBuilder.execute { (response: Response<GroupsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search groups using the q64 value returned from a previous search
     - GET /api/v2/groups/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ]
}, statusCode=200}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)

     - returns: RequestBuilder<GroupsSearchResponse> 
     */
    open class func getGroupsSearchWithRequestBuilder(q64: String, expand: [String]? = nil) -> RequestBuilder<GroupsSearchResponse> {        
        let path = "/api/v2/groups/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<GroupsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum SortOrder_getProfilesGroups: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    /**
     Get group profile listing
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter _id: (query) id (optional)
     - parameter jabberId: (query) A list of jabberIds to fetch by bulk (cannot be used with the \&quot;id\&quot; parameter) (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfilesGroups(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jabberId: [String]? = nil, sortOrder: SortOrder_getProfilesGroups? = nil, completion: @escaping ((_ data: GroupProfileEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getProfilesGroupsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, _id: _id, jabberId: jabberId, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<GroupProfileEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get group profile listing
     - GET /api/v2/profiles/groups
     - This api is deprecated. Use /api/v2/groups instead.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : 0
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : 0
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter _id: (query) id (optional)
     - parameter jabberId: (query) A list of jabberIds to fetch by bulk (cannot be used with the \&quot;id\&quot; parameter) (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<GroupProfileEntityListing> 
     */
    open class func getProfilesGroupsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jabberId: [String]? = nil, sortOrder: SortOrder_getProfilesGroups? = nil) -> RequestBuilder<GroupProfileEntityListing> {        
        let path = "/api/v2/profiles/groups"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "id": _id, 
            "jabberId": jabberId, 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<GroupProfileEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Add members
     
     - parameter groupId: (path) Group ID 
     - parameter body: (body) Add members 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGroupMembers(groupId: String, body: GroupMembersUpdate, completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = postGroupMembersWithRequestBuilder(groupId: groupId, body: body)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add members
     - POST /api/v2/groups/{groupId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter groupId: (path) Group ID 
     - parameter body: (body) Add members 

     - returns: RequestBuilder<JSON> 
     */
    open class func postGroupMembersWithRequestBuilder(groupId: String, body: GroupMembersUpdate) -> RequestBuilder<JSON> {        
        var path = "/api/v2/groups/{groupId}/members"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a group
     
     - parameter body: (body) Group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGroups(body: GroupCreate, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        let requestBuilder = postGroupsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Group>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a group
     - POST /api/v2/groups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "addresses" : [ {
    "extension" : "extension",
    "address" : "address",
    "display" : "display",
    "mediaType" : "PHONE",
    "type" : "GROUPRING"
  }, {
    "extension" : "extension",
    "address" : "address",
    "display" : "display",
    "mediaType" : "PHONE",
    "type" : "GROUPRING"
  } ],
  "visibility" : "public",
  "memberCount" : 5,
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "owners" : [ null, null ],
  "rolesEnabled" : true,
  "type" : "official",
  "version" : 2,
  "rulesVisible" : true,
  "name" : "name",
  "id" : "id",
  "state" : "active"
}, statusCode=200}]
     
     - parameter body: (body) Group 

     - returns: RequestBuilder<Group> 
     */
    open class func postGroupsWithRequestBuilder(body: GroupCreate) -> RequestBuilder<Group> {        
        let path = "/api/v2/groups"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Group>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search groups
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGroupsSearch(body: GroupSearchRequest, completion: @escaping ((_ data: GroupsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postGroupsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<GroupsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search groups
     - POST /api/v2/groups/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<GroupsSearchResponse> 
     */
    open class func postGroupsSearchWithRequestBuilder(body: GroupSearchRequest) -> RequestBuilder<GroupsSearchResponse> {        
        let path = "/api/v2/groups/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GroupsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update group
     
     - parameter groupId: (path) Group ID 
     - parameter body: (body) Group (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putGroup(groupId: String, body: GroupUpdate? = nil, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        let requestBuilder = putGroupWithRequestBuilder(groupId: groupId, body: body)
        requestBuilder.execute { (response: Response<Group>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update group
     - PUT /api/v2/groups/{groupId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "addresses" : [ {
    "extension" : "extension",
    "address" : "address",
    "display" : "display",
    "mediaType" : "PHONE",
    "type" : "GROUPRING"
  }, {
    "extension" : "extension",
    "address" : "address",
    "display" : "display",
    "mediaType" : "PHONE",
    "type" : "GROUPRING"
  } ],
  "visibility" : "public",
  "memberCount" : 5,
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "owners" : [ null, null ],
  "rolesEnabled" : true,
  "type" : "official",
  "version" : 2,
  "rulesVisible" : true,
  "name" : "name",
  "id" : "id",
  "state" : "active"
}, statusCode=200}]
     
     - parameter groupId: (path) Group ID 
     - parameter body: (body) Group (optional)

     - returns: RequestBuilder<Group> 
     */
    open class func putGroupWithRequestBuilder(groupId: String, body: GroupUpdate? = nil) -> RequestBuilder<Group> {        
        var path = "/api/v2/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Group>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
