//
// IdentityProviderAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class IdentityProviderAPI {
    
    /**
     Delete Identity Provider
     
     - parameter providerId: (path) Provider ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovider(providerId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityproviderWithRequestBuilder(providerId: providerId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete Identity Provider
     - DELETE /api/v2/identityproviders/{providerId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter providerId: (path) Provider ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteIdentityproviderWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/identityproviders/{providerId}"
        let providerIdPreEscape = "\(providerId)"
        let providerIdPostEscape = providerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{providerId}", with: providerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete ADFS Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersAdfs(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersAdfsWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete ADFS Identity Provider
     - DELETE /api/v2/identityproviders/adfs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersAdfsWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/adfs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete Customer Interaction Center (CIC) Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersCic(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersCicWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete Customer Interaction Center (CIC) Identity Provider
     - DELETE /api/v2/identityproviders/cic
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersCicWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/cic"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete Generic SAML Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersGeneric(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersGenericWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete Generic SAML Identity Provider
     - DELETE /api/v2/identityproviders/generic
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersGenericWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/generic"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete G Suite Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersGsuite(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersGsuiteWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete G Suite Identity Provider
     - DELETE /api/v2/identityproviders/gsuite
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersGsuiteWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/gsuite"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete IdentityNow Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersIdentitynow(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersIdentitynowWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete IdentityNow Provider
     - DELETE /api/v2/identityproviders/identitynow
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersIdentitynowWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/identitynow"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete Okta Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersOkta(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersOktaWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete Okta Identity Provider
     - DELETE /api/v2/identityproviders/okta
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersOktaWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/okta"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete OneLogin Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersOnelogin(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersOneloginWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete OneLogin Identity Provider
     - DELETE /api/v2/identityproviders/onelogin
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersOneloginWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/onelogin"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete Ping Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersPing(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersPingWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete Ping Identity Provider
     - DELETE /api/v2/identityproviders/ping
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersPingWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/ping"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete PureCloud Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersPurecloud(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersPurecloudWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete PureCloud Identity Provider
     - DELETE /api/v2/identityproviders/purecloud
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersPurecloudWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/purecloud"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete PureEngage Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersPureengage(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersPureengageWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete PureEngage Identity Provider
     - DELETE /api/v2/identityproviders/pureengage
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersPureengageWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/pureengage"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete Salesforce Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIdentityprovidersSalesforce(completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteIdentityprovidersSalesforceWithRequestBuilder()
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete Salesforce Identity Provider
     - DELETE /api/v2/identityproviders/salesforce
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteIdentityprovidersSalesforceWithRequestBuilder() -> RequestBuilder<JSON> {        
        let path = "/api/v2/identityproviders/salesforce"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Get Identity Provider
     
     - parameter providerId: (path) Provider ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovider(providerId: String, completion: @escaping ((_ data: CustomProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityproviderWithRequestBuilder(providerId: providerId)
        requestBuilder.execute { (response: Response<CustomProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Identity Provider
     - GET /api/v2/identityproviders/{providerId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "issuerURI" : "issuerURI",
  "logoImageData" : "logoImageData",
  "selfUri" : "https://openapi-generator.tech",
  "certificate" : "certificate",
  "sloBinding" : "sloBinding",
  "endpointCompression" : true,
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "nameIdentifierFormat" : "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "ssoBinding" : "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
  "name" : "name",
  "signAuthnRequests" : true,
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id"
}, statusCode=200}]
     
     - parameter providerId: (path) Provider ID 

     - returns: RequestBuilder<CustomProvider> 
     */
    open class func getIdentityproviderWithRequestBuilder(providerId: String) -> RequestBuilder<CustomProvider> {        
        var path = "/api/v2/identityproviders/{providerId}"
        let providerIdPreEscape = "\(providerId)"
        let providerIdPostEscape = providerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{providerId}", with: providerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     The list of identity providers
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityproviders(completion: @escaping ((_ data: IdentityProviderEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersWithRequestBuilder()
        requestBuilder.execute { (response: Response<IdentityProviderEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     The list of identity providers
     - GET /api/v2/identityproviders
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "disabled" : true,
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "disabled" : true,
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<IdentityProviderEntityListing> 
     */
    open class func getIdentityprovidersWithRequestBuilder() -> RequestBuilder<IdentityProviderEntityListing> {        
        let path = "/api/v2/identityproviders"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProviderEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get ADFS Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersAdfs(completion: @escaping ((_ data: ADFS?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersAdfsWithRequestBuilder()
        requestBuilder.execute { (response: Response<ADFS>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get ADFS Identity Provider
     - GET /api/v2/identityproviders/adfs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]

     - returns: RequestBuilder<ADFS> 
     */
    open class func getIdentityprovidersAdfsWithRequestBuilder() -> RequestBuilder<ADFS> {        
        let path = "/api/v2/identityproviders/adfs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ADFS>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get Customer Interaction Center (CIC) Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersCic(completion: @escaping ((_ data: CustomerInteractionCenter?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersCicWithRequestBuilder()
        requestBuilder.execute { (response: Response<CustomerInteractionCenter>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Customer Interaction Center (CIC) Identity Provider
     - GET /api/v2/identityproviders/cic
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]

     - returns: RequestBuilder<CustomerInteractionCenter> 
     */
    open class func getIdentityprovidersCicWithRequestBuilder() -> RequestBuilder<CustomerInteractionCenter> {        
        let path = "/api/v2/identityproviders/cic"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomerInteractionCenter>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get Generic SAML Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersGeneric(completion: @escaping ((_ data: GenericSAML?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersGenericWithRequestBuilder()
        requestBuilder.execute { (response: Response<GenericSAML>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Generic SAML Identity Provider
     - GET /api/v2/identityproviders/generic
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "issuerURI" : "issuerURI",
  "logoImageData" : "logoImageData",
  "selfUri" : "https://openapi-generator.tech",
  "certificate" : "certificate",
  "sloBinding" : "sloBinding",
  "endpointCompression" : true,
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "nameIdentifierFormat" : "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "name" : "name",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id"
}, statusCode=200}]

     - returns: RequestBuilder<GenericSAML> 
     */
    open class func getIdentityprovidersGenericWithRequestBuilder() -> RequestBuilder<GenericSAML> {        
        let path = "/api/v2/identityproviders/generic"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GenericSAML>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get G Suite Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersGsuite(completion: @escaping ((_ data: GSuite?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersGsuiteWithRequestBuilder()
        requestBuilder.execute { (response: Response<GSuite>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get G Suite Identity Provider
     - GET /api/v2/identityproviders/gsuite
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]

     - returns: RequestBuilder<GSuite> 
     */
    open class func getIdentityprovidersGsuiteWithRequestBuilder() -> RequestBuilder<GSuite> {        
        let path = "/api/v2/identityproviders/gsuite"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GSuite>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get IdentityNow Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersIdentitynow(completion: @escaping ((_ data: IdentityNow?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersIdentitynowWithRequestBuilder()
        requestBuilder.execute { (response: Response<IdentityNow>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get IdentityNow Provider
     - GET /api/v2/identityproviders/identitynow
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]

     - returns: RequestBuilder<IdentityNow> 
     */
    open class func getIdentityprovidersIdentitynowWithRequestBuilder() -> RequestBuilder<IdentityNow> {        
        let path = "/api/v2/identityproviders/identitynow"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityNow>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get Okta Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersOkta(completion: @escaping ((_ data: Okta?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersOktaWithRequestBuilder()
        requestBuilder.execute { (response: Response<Okta>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Okta Identity Provider
     - GET /api/v2/identityproviders/okta
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]

     - returns: RequestBuilder<Okta> 
     */
    open class func getIdentityprovidersOktaWithRequestBuilder() -> RequestBuilder<Okta> {        
        let path = "/api/v2/identityproviders/okta"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Okta>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get OneLogin Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersOnelogin(completion: @escaping ((_ data: OneLogin?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersOneloginWithRequestBuilder()
        requestBuilder.execute { (response: Response<OneLogin>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get OneLogin Identity Provider
     - GET /api/v2/identityproviders/onelogin
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]

     - returns: RequestBuilder<OneLogin> 
     */
    open class func getIdentityprovidersOneloginWithRequestBuilder() -> RequestBuilder<OneLogin> {        
        let path = "/api/v2/identityproviders/onelogin"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OneLogin>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get Ping Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersPing(completion: @escaping ((_ data: PingIdentity?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersPingWithRequestBuilder()
        requestBuilder.execute { (response: Response<PingIdentity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Ping Identity Provider
     - GET /api/v2/identityproviders/ping
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]

     - returns: RequestBuilder<PingIdentity> 
     */
    open class func getIdentityprovidersPingWithRequestBuilder() -> RequestBuilder<PingIdentity> {        
        let path = "/api/v2/identityproviders/ping"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PingIdentity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get PureCloud Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersPurecloud(completion: @escaping ((_ data: PureCloud?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersPurecloudWithRequestBuilder()
        requestBuilder.execute { (response: Response<PureCloud>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get PureCloud Identity Provider
     - GET /api/v2/identityproviders/purecloud
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]

     - returns: RequestBuilder<PureCloud> 
     */
    open class func getIdentityprovidersPurecloudWithRequestBuilder() -> RequestBuilder<PureCloud> {        
        let path = "/api/v2/identityproviders/purecloud"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PureCloud>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get PureEngage Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersPureengage(completion: @escaping ((_ data: PureEngage?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersPureengageWithRequestBuilder()
        requestBuilder.execute { (response: Response<PureEngage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get PureEngage Identity Provider
     - GET /api/v2/identityproviders/pureengage
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "autoProvisionUsers" : true,
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]

     - returns: RequestBuilder<PureEngage> 
     */
    open class func getIdentityprovidersPureengageWithRequestBuilder() -> RequestBuilder<PureEngage> {        
        let path = "/api/v2/identityproviders/pureengage"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PureEngage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get Salesforce Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIdentityprovidersSalesforce(completion: @escaping ((_ data: Salesforce?,_ error: Error?) -> Void)) {
        let requestBuilder = getIdentityprovidersSalesforceWithRequestBuilder()
        requestBuilder.execute { (response: Response<Salesforce>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Salesforce Identity Provider
     - GET /api/v2/identityproviders/salesforce
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]

     - returns: RequestBuilder<Salesforce> 
     */
    open class func getIdentityprovidersSalesforceWithRequestBuilder() -> RequestBuilder<Salesforce> {        
        let path = "/api/v2/identityproviders/salesforce"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Salesforce>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Create Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postIdentityproviders(body: CustomProvider, completion: @escaping ((_ data: CustomProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = postIdentityprovidersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CustomProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create Identity Provider
     - POST /api/v2/identityproviders
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "issuerURI" : "issuerURI",
  "logoImageData" : "logoImageData",
  "selfUri" : "https://openapi-generator.tech",
  "certificate" : "certificate",
  "sloBinding" : "sloBinding",
  "endpointCompression" : true,
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "nameIdentifierFormat" : "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "ssoBinding" : "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
  "name" : "name",
  "signAuthnRequests" : true,
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<CustomProvider> 
     */
    open class func postIdentityprovidersWithRequestBuilder(body: CustomProvider) -> RequestBuilder<CustomProvider> {        
        let path = "/api/v2/identityproviders"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update Identity Provider
     
     - parameter providerId: (path) Provider ID 
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovider(providerId: String, body: CustomProvider, completion: @escaping ((_ data: CustomProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityproviderWithRequestBuilder(providerId: providerId, body: body)
        requestBuilder.execute { (response: Response<CustomProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update Identity Provider
     - PUT /api/v2/identityproviders/{providerId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "issuerURI" : "issuerURI",
  "logoImageData" : "logoImageData",
  "selfUri" : "https://openapi-generator.tech",
  "certificate" : "certificate",
  "sloBinding" : "sloBinding",
  "endpointCompression" : true,
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "nameIdentifierFormat" : "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "ssoBinding" : "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
  "name" : "name",
  "signAuthnRequests" : true,
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id"
}, statusCode=200}]
     
     - parameter providerId: (path) Provider ID 
     - parameter body: (body) Provider 

     - returns: RequestBuilder<CustomProvider> 
     */
    open class func putIdentityproviderWithRequestBuilder(providerId: String, body: CustomProvider) -> RequestBuilder<CustomProvider> {        
        var path = "/api/v2/identityproviders/{providerId}"
        let providerIdPreEscape = "\(providerId)"
        let providerIdPostEscape = providerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{providerId}", with: providerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CustomProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create ADFS Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersAdfs(body: ADFS, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersAdfsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create ADFS Identity Provider
     - PUT /api/v2/identityproviders/adfs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersAdfsWithRequestBuilder(body: ADFS) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/adfs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create Customer Interaction Center (CIC) Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersCic(body: CustomerInteractionCenter, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersCicWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create Customer Interaction Center (CIC) Identity Provider
     - PUT /api/v2/identityproviders/cic
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersCicWithRequestBuilder(body: CustomerInteractionCenter) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/cic"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create Generic SAML Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersGeneric(body: GenericSAML, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersGenericWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create Generic SAML Identity Provider
     - PUT /api/v2/identityproviders/generic
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersGenericWithRequestBuilder(body: GenericSAML) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/generic"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create G Suite Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersGsuite(body: GSuite, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersGsuiteWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create G Suite Identity Provider
     - PUT /api/v2/identityproviders/gsuite
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersGsuiteWithRequestBuilder(body: GSuite) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/gsuite"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create IdentityNow Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersIdentitynow(body: IdentityNow, completion: @escaping ((_ data: IdentityNow?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersIdentitynowWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityNow>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create IdentityNow Provider
     - PUT /api/v2/identityproviders/identitynow
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "relyingPartyIdentifier",
  "issuerURI" : "issuerURI",
  "sloURI" : "sloURI",
  "certificates" : [ "certificates", "certificates" ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "certificate" : "certificate",
  "disabled" : true,
  "ssoTargetURI" : "ssoTargetURI",
  "id" : "id",
  "sloBinding" : "sloBinding"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityNow> 
     */
    open class func putIdentityprovidersIdentitynowWithRequestBuilder(body: IdentityNow) -> RequestBuilder<IdentityNow> {        
        let path = "/api/v2/identityproviders/identitynow"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityNow>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create Okta Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersOkta(body: Okta, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersOktaWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create Okta Identity Provider
     - PUT /api/v2/identityproviders/okta
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersOktaWithRequestBuilder(body: Okta) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/okta"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create OneLogin Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersOnelogin(body: OneLogin, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersOneloginWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create OneLogin Identity Provider
     - PUT /api/v2/identityproviders/onelogin
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersOneloginWithRequestBuilder(body: OneLogin) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/onelogin"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create Ping Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersPing(body: PingIdentity, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersPingWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create Ping Identity Provider
     - PUT /api/v2/identityproviders/ping
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersPingWithRequestBuilder(body: PingIdentity) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/ping"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create PureCloud Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersPurecloud(body: PureCloud, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersPurecloudWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create PureCloud Identity Provider
     - PUT /api/v2/identityproviders/purecloud
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersPurecloudWithRequestBuilder(body: PureCloud) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/purecloud"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create PureEngage Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersPureengage(body: PureEngage, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersPureengageWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create PureEngage Identity Provider
     - PUT /api/v2/identityproviders/pureengage
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersPureengageWithRequestBuilder(body: PureEngage) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/pureengage"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update/Create Salesforce Identity Provider
     
     - parameter body: (body) Provider 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putIdentityprovidersSalesforce(body: Salesforce, completion: @escaping ((_ data: IdentityProvider?,_ error: Error?) -> Void)) {
        let requestBuilder = putIdentityprovidersSalesforceWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<IdentityProvider>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update/Create Salesforce Identity Provider
     - PUT /api/v2/identityproviders/salesforce
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "disabled" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Provider 

     - returns: RequestBuilder<IdentityProvider> 
     */
    open class func putIdentityprovidersSalesforceWithRequestBuilder(body: Salesforce) -> RequestBuilder<IdentityProvider> {        
        let path = "/api/v2/identityproviders/salesforce"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IdentityProvider>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
