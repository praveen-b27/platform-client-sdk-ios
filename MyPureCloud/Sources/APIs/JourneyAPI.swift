//
// JourneyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class JourneyAPI {
    
    /**
     Delete single action map.
     
     - parameter actionMapId: (path) ID of the action map. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteJourneyActionmap(actionMapId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteJourneyActionmapWithRequestBuilder(actionMapId: actionMapId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete single action map.
     - DELETE /api/v2/journey/actionmaps/{actionMapId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter actionMapId: (path) ID of the action map. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteJourneyActionmapWithRequestBuilder(actionMapId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/journey/actionmaps/{actionMapId}"
        let actionMapIdPreEscape = "\(actionMapId)"
        let actionMapIdPostEscape = actionMapIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionMapId}", with: actionMapIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a single action template.
     
     - parameter actionTemplateId: (path) ID of the action template. 
     - parameter hardDelete: (query) Determines whether Action Template should be soft-deleted (have it&#39;s state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteJourneyActiontemplate(actionTemplateId: String, hardDelete: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteJourneyActiontemplateWithRequestBuilder(actionTemplateId: actionTemplateId, hardDelete: hardDelete)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a single action template.
     - DELETE /api/v2/journey/actiontemplates/{actionTemplateId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter actionTemplateId: (path) ID of the action template. 
     - parameter hardDelete: (query) Determines whether Action Template should be soft-deleted (have it&#39;s state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteJourneyActiontemplateWithRequestBuilder(actionTemplateId: String, hardDelete: Bool? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/journey/actiontemplates/{actionTemplateId}"
        let actionTemplateIdPreEscape = "\(actionTemplateId)"
        let actionTemplateIdPostEscape = actionTemplateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionTemplateId}", with: actionTemplateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "hardDelete": hardDelete
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete an outcome.
     
     - parameter outcomeId: (path) ID of the outcome. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteJourneyOutcome(outcomeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteJourneyOutcomeWithRequestBuilder(outcomeId: outcomeId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an outcome.
     - DELETE /api/v2/journey/outcomes/{outcomeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter outcomeId: (path) ID of the outcome. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteJourneyOutcomeWithRequestBuilder(outcomeId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/journey/outcomes/{outcomeId}"
        let outcomeIdPreEscape = "\(outcomeId)"
        let outcomeIdPostEscape = outcomeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{outcomeId}", with: outcomeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete an outcome predictor.
     
     - parameter predictorId: (path) ID of predictor 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteJourneyOutcomesPredictor(predictorId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteJourneyOutcomesPredictorWithRequestBuilder(predictorId: predictorId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an outcome predictor.
     - DELETE /api/v2/journey/outcomes/predictors/{predictorId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter predictorId: (path) ID of predictor 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteJourneyOutcomesPredictorWithRequestBuilder(predictorId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/journey/outcomes/predictors/{predictorId}"
        let predictorIdPreEscape = "\(predictorId)"
        let predictorIdPostEscape = predictorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{predictorId}", with: predictorIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a segment.
     
     - parameter segmentId: (path) ID of the segment. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteJourneySegment(segmentId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteJourneySegmentWithRequestBuilder(segmentId: segmentId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a segment.
     - DELETE /api/v2/journey/segments/{segmentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter segmentId: (path) ID of the segment. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteJourneySegmentWithRequestBuilder(segmentId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/journey/segments/{segmentId}"
        let segmentIdPreEscape = "\(segmentId)"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    
    /**
     Retrieve all sessions for a given external contact.
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter includeMerged: (query) Indicates whether to return sessions from all external contacts in the merge-set of the given one. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getExternalcontactsContactJourneySessions(contactId: String, pageSize: String? = nil, after: String? = nil, includeMerged: Bool? = nil, completion: @escaping ((_ data: SessionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getExternalcontactsContactJourneySessionsWithRequestBuilder(contactId: contactId, pageSize: pageSize, after: after, includeMerged: includeMerged)
        requestBuilder.execute { (response: Response<SessionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all sessions for a given external contact.
     - GET /api/v2/externalcontacts/contacts/{contactId}/journey/sessions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "screenviewCount" : 5,
    "shortId" : "shortId",
    "authenticated" : true,
    "lastPage" : "{}",
    "durationInSeconds" : 0,
    "searchTerms" : [ "searchTerms", "searchTerms" ],
    "conversationSubject" : "conversationSubject",
    "userAgentString" : "userAgentString",
    "eventCount" : 6,
    "type" : "type",
    "lastConnectedQueue" : "{}",
    "sdkLibrary" : "{}",
    "browser" : "{}",
    "customerId" : "customerId",
    "id" : "id",
    "customerIdType" : "customerIdType",
    "awayDate" : "2000-01-23T04:56:07.000+00:00",
    "lastAcdOutcome" : "Unknown",
    "attributeLists" : {
      "key" : {
        "dataType" : "dataType",
        "values" : [ "values", "values" ]
      }
    },
    "mktCampaign" : "{}",
    "conversation" : "{}",
    "ipOrganization" : "ipOrganization",
    "app" : "{}",
    "externalUrl" : "externalUrl",
    "networkConnectivity" : "{}",
    "endedDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "idleDate" : "2000-01-23T04:56:07.000+00:00",
    "ipAddress" : "ipAddress",
    "externalId" : "externalId",
    "lastUserDisconnectType" : "Unknown",
    "pageviewCount" : 1,
    "externalContact" : "{}",
    "originatingDirection" : "Unknown",
    "referrer" : "{}",
    "lastUserDisposition" : "{}",
    "outcomeAchievements" : [ {
      "achievedDate" : "2000-01-23T04:56:07.000+00:00",
      "outcome" : "{}"
    }, {
      "achievedDate" : "2000-01-23T04:56:07.000+00:00",
      "outcome" : "{}"
    } ],
    "lastConnectedUser" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "conversationChannels" : [ {
      "messageType" : "Unknown",
      "type" : "Unknown",
      "platform" : "platform"
    }, {
      "messageType" : "Unknown",
      "type" : "Unknown",
      "platform" : "platform"
    } ],
    "segmentAssignments" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+00:00",
      "segment" : "{}"
    }, {
      "assignedDate" : "2000-01-23T04:56:07.000+00:00",
      "segment" : "{}"
    } ],
    "lastEvent" : "{}",
    "attributes" : {
      "key" : {
        "dataType" : "dataType",
        "value" : "value"
      }
    },
    "device" : "{}",
    "geolocation" : "{}"
  }, {
    "screenviewCount" : 5,
    "shortId" : "shortId",
    "authenticated" : true,
    "lastPage" : "{}",
    "durationInSeconds" : 0,
    "searchTerms" : [ "searchTerms", "searchTerms" ],
    "conversationSubject" : "conversationSubject",
    "userAgentString" : "userAgentString",
    "eventCount" : 6,
    "type" : "type",
    "lastConnectedQueue" : "{}",
    "sdkLibrary" : "{}",
    "browser" : "{}",
    "customerId" : "customerId",
    "id" : "id",
    "customerIdType" : "customerIdType",
    "awayDate" : "2000-01-23T04:56:07.000+00:00",
    "lastAcdOutcome" : "Unknown",
    "attributeLists" : {
      "key" : {
        "dataType" : "dataType",
        "values" : [ "values", "values" ]
      }
    },
    "mktCampaign" : "{}",
    "conversation" : "{}",
    "ipOrganization" : "ipOrganization",
    "app" : "{}",
    "externalUrl" : "externalUrl",
    "networkConnectivity" : "{}",
    "endedDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "idleDate" : "2000-01-23T04:56:07.000+00:00",
    "ipAddress" : "ipAddress",
    "externalId" : "externalId",
    "lastUserDisconnectType" : "Unknown",
    "pageviewCount" : 1,
    "externalContact" : "{}",
    "originatingDirection" : "Unknown",
    "referrer" : "{}",
    "lastUserDisposition" : "{}",
    "outcomeAchievements" : [ {
      "achievedDate" : "2000-01-23T04:56:07.000+00:00",
      "outcome" : "{}"
    }, {
      "achievedDate" : "2000-01-23T04:56:07.000+00:00",
      "outcome" : "{}"
    } ],
    "lastConnectedUser" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "conversationChannels" : [ {
      "messageType" : "Unknown",
      "type" : "Unknown",
      "platform" : "platform"
    }, {
      "messageType" : "Unknown",
      "type" : "Unknown",
      "platform" : "platform"
    } ],
    "segmentAssignments" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+00:00",
      "segment" : "{}"
    }, {
      "assignedDate" : "2000-01-23T04:56:07.000+00:00",
      "segment" : "{}"
    } ],
    "lastEvent" : "{}",
    "attributes" : {
      "key" : {
        "dataType" : "dataType",
        "value" : "value"
      }
    },
    "device" : "{}",
    "geolocation" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter contactId: (path) ExternalContact ID 
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter includeMerged: (query) Indicates whether to return sessions from all external contacts in the merge-set of the given one. (optional)

     - returns: RequestBuilder<SessionListing> 
     */
    open class func getExternalcontactsContactJourneySessionsWithRequestBuilder(contactId: String, pageSize: String? = nil, after: String? = nil, includeMerged: Bool? = nil) -> RequestBuilder<SessionListing> {        
        var path = "/api/v2/externalcontacts/contacts/{contactId}/journey/sessions"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize, 
            "after": after, 
            "includeMerged": includeMerged
        ])

        let requestBuilder: RequestBuilder<SessionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a single action map.
     
     - parameter actionMapId: (path) ID of the action map. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyActionmap(actionMapId: String, completion: @escaping ((_ data: ActionMap?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyActionmapWithRequestBuilder(actionMapId: actionMapId)
        requestBuilder.execute { (response: Response<ActionMap>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single action map.
     - GET /api/v2/journey/actionmaps/{actionMapId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "ignoreFrequencyCap" : true,
  "endDate" : "2000-01-23T04:56:07.000+00:00",
  "displayName" : "displayName",
  "selfUri" : "https://openapi-generator.tech",
  "weight" : 9,
  "triggerWithOutcomePercentileConditions" : [ {
    "fallbackPercentile" : 5.637377,
    "maximumPercentile" : 5.962134,
    "outcomeId" : "outcomeId"
  }, {
    "fallbackPercentile" : 5.637377,
    "maximumPercentile" : 5.962134,
    "outcomeId" : "outcomeId"
  } ],
  "isActive" : true,
  "version" : 0,
  "triggerWithSegments" : [ "triggerWithSegments", "triggerWithSegments" ],
  "triggerWithOutcomeQuantileConditions" : [ {
    "fallbackQuantileThreshold" : 7.0614014,
    "outcomeId" : "outcomeId",
    "maxQuantileThreshold" : 2.302136
  }, {
    "fallbackQuantileThreshold" : 7.0614014,
    "outcomeId" : "outcomeId",
    "maxQuantileThreshold" : 2.302136
  } ],
  "triggerWithOutcomeProbabilityConditions" : [ {
    "probability" : 1.4658129,
    "outcomeId" : "outcomeId",
    "maximumProbability" : 6.0274563
  }, {
    "probability" : 1.4658129,
    "outcomeId" : "outcomeId",
    "maximumProbability" : 6.0274563
  } ],
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "triggerWithEventConditions" : [ {
    "streamType" : "Web",
    "values" : [ "values", "values" ],
    "sessionType" : "sessionType",
    "eventName" : "eventName",
    "key" : "key",
    "operator" : "containsAll"
  }, {
    "streamType" : "Web",
    "values" : [ "values", "values" ],
    "sessionType" : "sessionType",
    "eventName" : "eventName",
    "key" : "key",
    "operator" : "containsAll"
  } ],
  "pageUrlConditions" : [ {
    "values" : [ "values", "values" ],
    "operator" : "containsAll"
  }, {
    "values" : [ "values", "values" ],
    "operator" : "containsAll"
  } ],
  "actionMapScheduleGroups" : "{}",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "action" : "{}",
  "id" : "id",
  "activation" : "{}",
  "startDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter actionMapId: (path) ID of the action map. 

     - returns: RequestBuilder<ActionMap> 
     */
    open class func getJourneyActionmapWithRequestBuilder(actionMapId: String) -> RequestBuilder<ActionMap> {        
        var path = "/api/v2/journey/actionmaps/{actionMapId}"
        let actionMapIdPreEscape = "\(actionMapId)"
        let actionMapIdPostEscape = actionMapIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionMapId}", with: actionMapIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionMap>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    
    /**
     Retrieve all action maps.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter sortBy: (query) Field(s) to sort by. Prefix with &#39;-&#39; for descending (e.g. sortBy&#x3D;displayName,-createdDate). (optional)
     - parameter filterField: (query) Field to filter by (e.g. filterField&#x3D;weight or filterField&#x3D;action.actionTemplate.id). Requires &#39;filterField&#39; to also be set. (optional)
     - parameter filterValue: (query) Value to filter by. Requires &#39;filterValue&#39; to also be set. (optional)
     - parameter actionMapIds: (query) IDs of action maps to return. Use of this parameter is not compatible with pagination, filtering, sorting or querying. A maximum of 100 action maps are allowed per request. (optional)
     - parameter queryFields: (query) Action Map field(s) to query on. Requires &#39;queryValue&#39; to also be set. (optional)
     - parameter queryValue: (query) Value to query on. Requires &#39;queryFields&#39; to also be set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyActionmaps(pageNumber: Int? = nil, pageSize: Int? = nil, sortBy: String? = nil, filterField: String? = nil, filterValue: String? = nil, actionMapIds: [String]? = nil, queryFields: [String]? = nil, queryValue: String? = nil, completion: @escaping ((_ data: ActionMapListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyActionmapsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, filterField: filterField, filterValue: filterValue, actionMapIds: actionMapIds, queryFields: queryFields, queryValue: queryValue)
        requestBuilder.execute { (response: Response<ActionMapListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all action maps.
     - GET /api/v2/journey/actionmaps
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "ignoreFrequencyCap" : true,
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "displayName" : "displayName",
    "selfUri" : "https://openapi-generator.tech",
    "weight" : 9,
    "triggerWithOutcomePercentileConditions" : [ {
      "fallbackPercentile" : 5.637377,
      "maximumPercentile" : 5.962134,
      "outcomeId" : "outcomeId"
    }, {
      "fallbackPercentile" : 5.637377,
      "maximumPercentile" : 5.962134,
      "outcomeId" : "outcomeId"
    } ],
    "isActive" : true,
    "version" : 0,
    "triggerWithSegments" : [ "triggerWithSegments", "triggerWithSegments" ],
    "triggerWithOutcomeQuantileConditions" : [ {
      "fallbackQuantileThreshold" : 7.0614014,
      "outcomeId" : "outcomeId",
      "maxQuantileThreshold" : 2.302136
    }, {
      "fallbackQuantileThreshold" : 7.0614014,
      "outcomeId" : "outcomeId",
      "maxQuantileThreshold" : 2.302136
    } ],
    "triggerWithOutcomeProbabilityConditions" : [ {
      "probability" : 1.4658129,
      "outcomeId" : "outcomeId",
      "maximumProbability" : 6.0274563
    }, {
      "probability" : 1.4658129,
      "outcomeId" : "outcomeId",
      "maximumProbability" : 6.0274563
    } ],
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "triggerWithEventConditions" : [ {
      "streamType" : "Web",
      "values" : [ "values", "values" ],
      "sessionType" : "sessionType",
      "eventName" : "eventName",
      "key" : "key",
      "operator" : "containsAll"
    }, {
      "streamType" : "Web",
      "values" : [ "values", "values" ],
      "sessionType" : "sessionType",
      "eventName" : "eventName",
      "key" : "key",
      "operator" : "containsAll"
    } ],
    "pageUrlConditions" : [ {
      "values" : [ "values", "values" ],
      "operator" : "containsAll"
    }, {
      "values" : [ "values", "values" ],
      "operator" : "containsAll"
    } ],
    "actionMapScheduleGroups" : "{}",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "action" : "{}",
    "id" : "id",
    "activation" : "{}",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "ignoreFrequencyCap" : true,
    "endDate" : "2000-01-23T04:56:07.000+00:00",
    "displayName" : "displayName",
    "selfUri" : "https://openapi-generator.tech",
    "weight" : 9,
    "triggerWithOutcomePercentileConditions" : [ {
      "fallbackPercentile" : 5.637377,
      "maximumPercentile" : 5.962134,
      "outcomeId" : "outcomeId"
    }, {
      "fallbackPercentile" : 5.637377,
      "maximumPercentile" : 5.962134,
      "outcomeId" : "outcomeId"
    } ],
    "isActive" : true,
    "version" : 0,
    "triggerWithSegments" : [ "triggerWithSegments", "triggerWithSegments" ],
    "triggerWithOutcomeQuantileConditions" : [ {
      "fallbackQuantileThreshold" : 7.0614014,
      "outcomeId" : "outcomeId",
      "maxQuantileThreshold" : 2.302136
    }, {
      "fallbackQuantileThreshold" : 7.0614014,
      "outcomeId" : "outcomeId",
      "maxQuantileThreshold" : 2.302136
    } ],
    "triggerWithOutcomeProbabilityConditions" : [ {
      "probability" : 1.4658129,
      "outcomeId" : "outcomeId",
      "maximumProbability" : 6.0274563
    }, {
      "probability" : 1.4658129,
      "outcomeId" : "outcomeId",
      "maximumProbability" : 6.0274563
    } ],
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "triggerWithEventConditions" : [ {
      "streamType" : "Web",
      "values" : [ "values", "values" ],
      "sessionType" : "sessionType",
      "eventName" : "eventName",
      "key" : "key",
      "operator" : "containsAll"
    }, {
      "streamType" : "Web",
      "values" : [ "values", "values" ],
      "sessionType" : "sessionType",
      "eventName" : "eventName",
      "key" : "key",
      "operator" : "containsAll"
    } ],
    "pageUrlConditions" : [ {
      "values" : [ "values", "values" ],
      "operator" : "containsAll"
    }, {
      "values" : [ "values", "values" ],
      "operator" : "containsAll"
    } ],
    "actionMapScheduleGroups" : "{}",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "action" : "{}",
    "id" : "id",
    "activation" : "{}",
    "startDate" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter sortBy: (query) Field(s) to sort by. Prefix with &#39;-&#39; for descending (e.g. sortBy&#x3D;displayName,-createdDate). (optional)
     - parameter filterField: (query) Field to filter by (e.g. filterField&#x3D;weight or filterField&#x3D;action.actionTemplate.id). Requires &#39;filterField&#39; to also be set. (optional)
     - parameter filterValue: (query) Value to filter by. Requires &#39;filterValue&#39; to also be set. (optional)
     - parameter actionMapIds: (query) IDs of action maps to return. Use of this parameter is not compatible with pagination, filtering, sorting or querying. A maximum of 100 action maps are allowed per request. (optional)
     - parameter queryFields: (query) Action Map field(s) to query on. Requires &#39;queryValue&#39; to also be set. (optional)
     - parameter queryValue: (query) Value to query on. Requires &#39;queryFields&#39; to also be set. (optional)

     - returns: RequestBuilder<ActionMapListing> 
     */
    open class func getJourneyActionmapsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, sortBy: String? = nil, filterField: String? = nil, filterValue: String? = nil, actionMapIds: [String]? = nil, queryFields: [String]? = nil, queryValue: String? = nil) -> RequestBuilder<ActionMapListing> {        
        let path = "/api/v2/journey/actionmaps"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortBy": sortBy, 
            "filterField": filterField, 
            "filterValue": filterValue, 
            "actionMapIds": actionMapIds, 
            "queryFields": queryFields, 
            "queryValue": queryValue
        ])

        let requestBuilder: RequestBuilder<ActionMapListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get status of job.
     
     - parameter jobId: (path) ID of the job. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyActionmapsEstimatesJob(jobId: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyActionmapsEstimatesJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<String>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get status of job.
     - GET /api/v2/journey/actionmaps/estimates/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) ID of the job. 

     - returns: RequestBuilder<String> 
     */
    open class func getJourneyActionmapsEstimatesJobWithRequestBuilder(jobId: String) -> RequestBuilder<String> {        
        var path = "/api/v2/journey/actionmaps/estimates/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get estimates from completed job.
     
     - parameter jobId: (path) ID of the job. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyActionmapsEstimatesJobResults(jobId: String, completion: @escaping ((_ data: ActionMapEstimateResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyActionmapsEstimatesJobResultsWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<ActionMapEstimateResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get estimates from completed job.
     - GET /api/v2/journey/actionmaps/estimates/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "qualifiedSessionCount" : 0,
  "perSegmentCounts" : [ {
    "segmentId" : "segmentId",
    "count" : 1
  }, {
    "segmentId" : "segmentId",
    "count" : 1
  } ],
  "totalSessionCount" : 6,
  "outcomesScoresCount" : 5
}, statusCode=200}]
     
     - parameter jobId: (path) ID of the job. 

     - returns: RequestBuilder<ActionMapEstimateResult> 
     */
    open class func getJourneyActionmapsEstimatesJobResultsWithRequestBuilder(jobId: String) -> RequestBuilder<ActionMapEstimateResult> {        
        var path = "/api/v2/journey/actionmaps/estimates/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionMapEstimateResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a single action target.
     
     - parameter actionTargetId: (path) ID of the action target. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyActiontarget(actionTargetId: String, completion: @escaping ((_ data: ActionTarget?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyActiontargetWithRequestBuilder(actionTargetId: actionTargetId)
        requestBuilder.execute { (response: Response<ActionTarget>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single action target.
     - GET /api/v2/journey/actiontargets/{actionTargetId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "supportedMediaTypes" : [ "callback", "callback" ],
  "shortAbandonThreshold" : 0,
  "userData" : [ {
    "value" : "value",
    "key" : "key"
  }, {
    "value" : "value",
    "key" : "key"
  } ],
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : "id",
  "state" : "active",
  "serviceLevel" : "{}"
}, statusCode=200}]
     
     - parameter actionTargetId: (path) ID of the action target. 

     - returns: RequestBuilder<ActionTarget> 
     */
    open class func getJourneyActiontargetWithRequestBuilder(actionTargetId: String) -> RequestBuilder<ActionTarget> {        
        var path = "/api/v2/journey/actiontargets/{actionTargetId}"
        let actionTargetIdPreEscape = "\(actionTargetId)"
        let actionTargetIdPostEscape = actionTargetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionTargetId}", with: actionTargetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionTarget>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Retrieve all action targets.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyActiontargets(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ActionTargetListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyActiontargetsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<ActionTargetListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all action targets.
     - GET /api/v2/journey/actiontargets
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "supportedMediaTypes" : [ "callback", "callback" ],
    "shortAbandonThreshold" : 0,
    "userData" : [ {
      "value" : "value",
      "key" : "key"
    }, {
      "value" : "value",
      "key" : "key"
    } ],
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "id" : "id",
    "state" : "active",
    "serviceLevel" : "{}"
  }, {
    "supportedMediaTypes" : [ "callback", "callback" ],
    "shortAbandonThreshold" : 0,
    "userData" : [ {
      "value" : "value",
      "key" : "key"
    }, {
      "value" : "value",
      "key" : "key"
    } ],
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "id" : "id",
    "state" : "active",
    "serviceLevel" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<ActionTargetListing> 
     */
    open class func getJourneyActiontargetsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<ActionTargetListing> {        
        let path = "/api/v2/journey/actiontargets"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ActionTargetListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a single action template.
     
     - parameter actionTemplateId: (path) ID of the action template. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyActiontemplate(actionTemplateId: String, completion: @escaping ((_ data: ActionTemplate?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyActiontemplateWithRequestBuilder(actionTemplateId: actionTemplateId)
        requestBuilder.execute { (response: Response<ActionTemplate>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single action template.
     - GET /api/v2/journey/actiontemplates/{actionTemplateId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "mediaType" : "webchat",
  "id" : "id",
  "state" : "Active",
  "version" : 0,
  "contentOffer" : "{}"
}, statusCode=200}]
     
     - parameter actionTemplateId: (path) ID of the action template. 

     - returns: RequestBuilder<ActionTemplate> 
     */
    open class func getJourneyActiontemplateWithRequestBuilder(actionTemplateId: String) -> RequestBuilder<ActionTemplate> {        
        var path = "/api/v2/journey/actiontemplates/{actionTemplateId}"
        let actionTemplateIdPreEscape = "\(actionTemplateId)"
        let actionTemplateIdPostEscape = actionTemplateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionTemplateId}", with: actionTemplateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionTemplate>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum MediaType_getJourneyActiontemplates: String { 
        case webchat = "webchat"
        case webmessagingoffer = "webMessagingOffer"
        case contentoffer = "contentOffer"
        case integrationaction = "integrationAction"
        case architectflow = "architectFlow"
        case openaction = "openAction"
    }

    
    
    public enum State_getJourneyActiontemplates: String { 
        case active = "Active"
        case inactive = "Inactive"
        case deleted = "Deleted"
    }

    
    
    
    /**
     Retrieve all action templates.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter sortBy: (query) Field(s) to sort by. Prefix with &#39;-&#39; for descending (e.g. sortBy&#x3D;name,-createdDate). (optional)
     - parameter mediaType: (query) Media type (optional)
     - parameter state: (query) Action template state. (optional)
     - parameter queryFields: (query) ActionTemplate field(s) to query on. Requires &#39;queryValue&#39; to also be set. (optional)
     - parameter queryValue: (query) Value to query on. Requires &#39;queryFields&#39; to also be set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyActiontemplates(pageNumber: Int? = nil, pageSize: Int? = nil, sortBy: String? = nil, mediaType: MediaType_getJourneyActiontemplates? = nil, state: State_getJourneyActiontemplates? = nil, queryFields: [String]? = nil, queryValue: String? = nil, completion: @escaping ((_ data: ActionTemplateListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyActiontemplatesWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, mediaType: mediaType, state: state, queryFields: queryFields, queryValue: queryValue)
        requestBuilder.execute { (response: Response<ActionTemplateListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all action templates.
     - GET /api/v2/journey/actiontemplates
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "mediaType" : "webchat",
    "id" : "id",
    "state" : "Active",
    "version" : 0,
    "contentOffer" : "{}"
  }, {
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "mediaType" : "webchat",
    "id" : "id",
    "state" : "Active",
    "version" : 0,
    "contentOffer" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter sortBy: (query) Field(s) to sort by. Prefix with &#39;-&#39; for descending (e.g. sortBy&#x3D;name,-createdDate). (optional)
     - parameter mediaType: (query) Media type (optional)
     - parameter state: (query) Action template state. (optional)
     - parameter queryFields: (query) ActionTemplate field(s) to query on. Requires &#39;queryValue&#39; to also be set. (optional)
     - parameter queryValue: (query) Value to query on. Requires &#39;queryFields&#39; to also be set. (optional)

     - returns: RequestBuilder<ActionTemplateListing> 
     */
    open class func getJourneyActiontemplatesWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, sortBy: String? = nil, mediaType: MediaType_getJourneyActiontemplates? = nil, state: State_getJourneyActiontemplates? = nil, queryFields: [String]? = nil, queryValue: String? = nil) -> RequestBuilder<ActionTemplateListing> {        
        let path = "/api/v2/journey/actiontemplates"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortBy": sortBy, 
            "mediaType": mediaType?.rawValue, 
            "state": state?.rawValue, 
            "queryFields": queryFields, 
            "queryValue": queryValue
        ])

        let requestBuilder: RequestBuilder<ActionTemplateListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     Send a ping.
     
     - parameter deploymentId: (path) The ID of the deployment sending the ping. 
     - parameter customerCookieId: (path) ID of the customer associated with the ping. 
     - parameter dl: (query) Document Location: 1) Web Page URL if overridden or URL fragment identifier (window.location.hash). OR  2) Application screen name that the ping request was sent from in the app. e.g. &#39;home&#39; or &#39;help. Pings without this parameter will not return actions. (optional)
     - parameter dt: (query) Document Title.  A human readable name for the page or screen (optional)
     - parameter appNamespace: (query) Namespace of the application (e.g. com.genesys.bancodinero). Used for domain filtering in application sessions (optional)
     - parameter sessionId: (query) UUID of the customer session. Use the same Session Id for all pings, AppEvents and ActionEvents in the session (optional)
     - parameter sinceLastBeaconMilliseconds: (query) How long (milliseconds) since the last app event or beacon was sent. The response may return a pollInternvalMilliseconds to reduce the frequency of pings. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyDeploymentCustomerPing(deploymentId: String, customerCookieId: String, dl: String? = nil, dt: String? = nil, appNamespace: String? = nil, sessionId: String? = nil, sinceLastBeaconMilliseconds: Int64? = nil, completion: @escaping ((_ data: DeploymentPing?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyDeploymentCustomerPingWithRequestBuilder(deploymentId: deploymentId, customerCookieId: customerCookieId, dl: dl, dt: dt, appNamespace: appNamespace, sessionId: sessionId, sinceLastBeaconMilliseconds: sinceLastBeaconMilliseconds)
        requestBuilder.execute { (response: Response<DeploymentPing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Send a ping.
     - GET /api/v2/journey/deployments/{deploymentId}/customers/{customerCookieId}/ping
     - examples: [{contentType=application/json, example={
  "pollIntervalMilliseconds" : 6,
  "actions" : [ {
    "contentOfferProperties" : "{}",
    "customerId" : "customerId",
    "mediaType" : "webchat",
    "webMessagingOfferProperties" : "{}",
    "id" : "id",
    "customerIdType" : "customerIdType",
    "sessionId" : "sessionId",
    "actionMapVersion" : 0,
    "actionMapId" : "actionMapId",
    "openActionProperties" : "{}"
  }, {
    "contentOfferProperties" : "{}",
    "customerId" : "customerId",
    "mediaType" : "webchat",
    "webMessagingOfferProperties" : "{}",
    "id" : "id",
    "customerIdType" : "customerIdType",
    "sessionId" : "sessionId",
    "actionMapVersion" : 0,
    "actionMapId" : "actionMapId",
    "openActionProperties" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter deploymentId: (path) The ID of the deployment sending the ping. 
     - parameter customerCookieId: (path) ID of the customer associated with the ping. 
     - parameter dl: (query) Document Location: 1) Web Page URL if overridden or URL fragment identifier (window.location.hash). OR  2) Application screen name that the ping request was sent from in the app. e.g. &#39;home&#39; or &#39;help. Pings without this parameter will not return actions. (optional)
     - parameter dt: (query) Document Title.  A human readable name for the page or screen (optional)
     - parameter appNamespace: (query) Namespace of the application (e.g. com.genesys.bancodinero). Used for domain filtering in application sessions (optional)
     - parameter sessionId: (query) UUID of the customer session. Use the same Session Id for all pings, AppEvents and ActionEvents in the session (optional)
     - parameter sinceLastBeaconMilliseconds: (query) How long (milliseconds) since the last app event or beacon was sent. The response may return a pollInternvalMilliseconds to reduce the frequency of pings. (optional)

     - returns: RequestBuilder<DeploymentPing> 
     */
    open class func getJourneyDeploymentCustomerPingWithRequestBuilder(deploymentId: String, customerCookieId: String, dl: String? = nil, dt: String? = nil, appNamespace: String? = nil, sessionId: String? = nil, sinceLastBeaconMilliseconds: Int64? = nil) -> RequestBuilder<DeploymentPing> {        
        var path = "/api/v2/journey/deployments/{deploymentId}/customers/{customerCookieId}/ping"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let customerCookieIdPreEscape = "\(customerCookieId)"
        let customerCookieIdPostEscape = customerCookieIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customerCookieId}", with: customerCookieIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "dl": dl, 
            "dt": dt, 
            "appNamespace": appNamespace, 
            "sessionId": sessionId, 
            "sinceLastBeaconMilliseconds": sinceLastBeaconMilliseconds?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DeploymentPing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a single outcome.
     
     - parameter outcomeId: (path) ID of the outcome. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyOutcome(outcomeId: String, completion: @escaping ((_ data: Outcome?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyOutcomeWithRequestBuilder(outcomeId: outcomeId)
        requestBuilder.execute { (response: Response<Outcome>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single outcome.
     - GET /api/v2/journey/outcomes/{outcomeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "associatedValueField" : "{}",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "journey" : "{}",
  "displayName" : "displayName",
  "selfUri" : "https://openapi-generator.tech",
  "context" : "{}",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "isPositive" : true,
  "id" : "id",
  "isActive" : true,
  "version" : 0
}, statusCode=200}]
     
     - parameter outcomeId: (path) ID of the outcome. 

     - returns: RequestBuilder<Outcome> 
     */
    open class func getJourneyOutcomeWithRequestBuilder(outcomeId: String) -> RequestBuilder<Outcome> {        
        var path = "/api/v2/journey/outcomes/{outcomeId}"
        let outcomeIdPreEscape = "\(outcomeId)"
        let outcomeIdPostEscape = outcomeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{outcomeId}", with: outcomeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Outcome>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    /**
     Retrieve all outcomes.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter sortBy: (query) Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with &#39;-&#39; for descending (e.g. sortBy&#x3D;displayName,-createdDate). (optional)
     - parameter outcomeIds: (query) IDs of outcomes to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 20 outcomes are allowed per request. (optional)
     - parameter queryFields: (query) Outcome field(s) to query on. Requires &#39;queryValue&#39; to also be set. (optional)
     - parameter queryValue: (query) Value to query on. Requires &#39;queryFields&#39; to also be set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyOutcomes(pageNumber: Int? = nil, pageSize: Int? = nil, sortBy: String? = nil, outcomeIds: [String]? = nil, queryFields: [String]? = nil, queryValue: String? = nil, completion: @escaping ((_ data: OutcomeListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyOutcomesWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, sortBy: sortBy, outcomeIds: outcomeIds, queryFields: queryFields, queryValue: queryValue)
        requestBuilder.execute { (response: Response<OutcomeListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all outcomes.
     - GET /api/v2/journey/outcomes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "associatedValueField" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "journey" : "{}",
    "displayName" : "displayName",
    "selfUri" : "https://openapi-generator.tech",
    "context" : "{}",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "isPositive" : true,
    "id" : "id",
    "isActive" : true,
    "version" : 0
  }, {
    "associatedValueField" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "journey" : "{}",
    "displayName" : "displayName",
    "selfUri" : "https://openapi-generator.tech",
    "context" : "{}",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "isPositive" : true,
    "id" : "id",
    "isActive" : true,
    "version" : 0
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter sortBy: (query) Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with &#39;-&#39; for descending (e.g. sortBy&#x3D;displayName,-createdDate). (optional)
     - parameter outcomeIds: (query) IDs of outcomes to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 20 outcomes are allowed per request. (optional)
     - parameter queryFields: (query) Outcome field(s) to query on. Requires &#39;queryValue&#39; to also be set. (optional)
     - parameter queryValue: (query) Value to query on. Requires &#39;queryFields&#39; to also be set. (optional)

     - returns: RequestBuilder<OutcomeListing> 
     */
    open class func getJourneyOutcomesWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, sortBy: String? = nil, outcomeIds: [String]? = nil, queryFields: [String]? = nil, queryValue: String? = nil) -> RequestBuilder<OutcomeListing> {        
        let path = "/api/v2/journey/outcomes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortBy": sortBy, 
            "outcomeIds": outcomeIds, 
            "queryFields": queryFields, 
            "queryValue": queryValue
        ])

        let requestBuilder: RequestBuilder<OutcomeListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a single outcome predictor.
     
     - parameter predictorId: (path) ID of predictor 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyOutcomesPredictor(predictorId: String, completion: @escaping ((_ data: OutcomePredictor?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyOutcomesPredictorWithRequestBuilder(predictorId: predictorId)
        requestBuilder.execute { (response: Response<OutcomePredictor>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single outcome predictor.
     - GET /api/v2/journey/outcomes/predictors/{predictorId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "outcome" : "{}"
}, statusCode=200}]
     
     - parameter predictorId: (path) ID of predictor 

     - returns: RequestBuilder<OutcomePredictor> 
     */
    open class func getJourneyOutcomesPredictorWithRequestBuilder(predictorId: String) -> RequestBuilder<OutcomePredictor> {        
        var path = "/api/v2/journey/outcomes/predictors/{predictorId}"
        let predictorIdPreEscape = "\(predictorId)"
        let predictorIdPostEscape = predictorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{predictorId}", with: predictorIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutcomePredictor>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Retrieve all outcome predictors.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneyOutcomesPredictors(completion: @escaping ((_ data: OutcomePredictorListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneyOutcomesPredictorsWithRequestBuilder()
        requestBuilder.execute { (response: Response<OutcomePredictorListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all outcome predictors.
     - GET /api/v2/journey/outcomes/predictors
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "outcome" : "{}"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "outcome" : "{}"
  } ]
}, statusCode=200}]

     - returns: RequestBuilder<OutcomePredictorListing> 
     */
    open class func getJourneyOutcomesPredictorsWithRequestBuilder() -> RequestBuilder<OutcomePredictorListing> {        
        let path = "/api/v2/journey/outcomes/predictors"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutcomePredictorListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a single segment.
     
     - parameter segmentId: (path) ID of the segment. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneySegment(segmentId: String, completion: @escaping ((_ data: JourneySegment?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneySegmentWithRequestBuilder(segmentId: segmentId)
        requestBuilder.execute { (response: Response<JourneySegment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single segment.
     - GET /api/v2/journey/segments/{segmentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "color" : "color",
  "journey" : "{}",
  "externalSegment" : "{}",
  "displayName" : "displayName",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "isActive" : true,
  "version" : 0,
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "assignmentExpirationDays" : 6,
  "scope" : "Session",
  "context" : "{}",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "shouldDisplayToAgent" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter segmentId: (path) ID of the segment. 

     - returns: RequestBuilder<JourneySegment> 
     */
    open class func getJourneySegmentWithRequestBuilder(segmentId: String) -> RequestBuilder<JourneySegment> {        
        var path = "/api/v2/journey/segments/{segmentId}"
        let segmentIdPreEscape = "\(segmentId)"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JourneySegment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    /**
     Retrieve all segments.
     
     - parameter sortBy: (query) Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with &#39;-&#39; for descending (e.g. sortBy&#x3D;displayName,-createdDate). (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter isActive: (query) Determines whether or not to show only active segments. (optional)
     - parameter segmentIds: (query) IDs of segments to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 100 segments are allowed per request. (optional)
     - parameter queryFields: (query) Segment field(s) to query on. Requires &#39;queryValue&#39; to also be set. (optional)
     - parameter queryValue: (query) Value to query on. Requires &#39;queryFields&#39; to also be set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneySegments(sortBy: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, isActive: Bool? = nil, segmentIds: [String]? = nil, queryFields: [String]? = nil, queryValue: String? = nil, completion: @escaping ((_ data: SegmentListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneySegmentsWithRequestBuilder(sortBy: sortBy, pageSize: pageSize, pageNumber: pageNumber, isActive: isActive, segmentIds: segmentIds, queryFields: queryFields, queryValue: queryValue)
        requestBuilder.execute { (response: Response<SegmentListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all segments.
     - GET /api/v2/journey/segments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "color" : "color",
    "journey" : "{}",
    "externalSegment" : "{}",
    "displayName" : "displayName",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "isActive" : true,
    "version" : 0,
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "assignmentExpirationDays" : 6,
    "scope" : "Session",
    "context" : "{}",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "shouldDisplayToAgent" : true,
    "id" : "id"
  }, {
    "color" : "color",
    "journey" : "{}",
    "externalSegment" : "{}",
    "displayName" : "displayName",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "isActive" : true,
    "version" : 0,
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "assignmentExpirationDays" : 6,
    "scope" : "Session",
    "context" : "{}",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "shouldDisplayToAgent" : true,
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter sortBy: (query) Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with &#39;-&#39; for descending (e.g. sortBy&#x3D;displayName,-createdDate). (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter isActive: (query) Determines whether or not to show only active segments. (optional)
     - parameter segmentIds: (query) IDs of segments to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 100 segments are allowed per request. (optional)
     - parameter queryFields: (query) Segment field(s) to query on. Requires &#39;queryValue&#39; to also be set. (optional)
     - parameter queryValue: (query) Value to query on. Requires &#39;queryFields&#39; to also be set. (optional)

     - returns: RequestBuilder<SegmentListing> 
     */
    open class func getJourneySegmentsWithRequestBuilder(sortBy: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, isActive: Bool? = nil, segmentIds: [String]? = nil, queryFields: [String]? = nil, queryValue: String? = nil) -> RequestBuilder<SegmentListing> {        
        let path = "/api/v2/journey/segments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sortBy": sortBy, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "isActive": isActive, 
            "segmentIds": segmentIds, 
            "queryFields": queryFields, 
            "queryValue": queryValue
        ])

        let requestBuilder: RequestBuilder<SegmentListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a single session.
     
     - parameter sessionId: (path) ID of the session. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneySession(sessionId: String, completion: @escaping ((_ data: Session?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneySessionWithRequestBuilder(sessionId: sessionId)
        requestBuilder.execute { (response: Response<Session>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single session.
     - GET /api/v2/journey/sessions/{sessionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "screenviewCount" : 5,
  "shortId" : "shortId",
  "authenticated" : true,
  "lastPage" : "{}",
  "durationInSeconds" : 0,
  "searchTerms" : [ "searchTerms", "searchTerms" ],
  "conversationSubject" : "conversationSubject",
  "userAgentString" : "userAgentString",
  "eventCount" : 6,
  "type" : "type",
  "lastConnectedQueue" : "{}",
  "sdkLibrary" : "{}",
  "browser" : "{}",
  "customerId" : "customerId",
  "id" : "id",
  "customerIdType" : "customerIdType",
  "awayDate" : "2000-01-23T04:56:07.000+00:00",
  "lastAcdOutcome" : "Unknown",
  "attributeLists" : {
    "key" : {
      "dataType" : "dataType",
      "values" : [ "values", "values" ]
    }
  },
  "mktCampaign" : "{}",
  "conversation" : "{}",
  "ipOrganization" : "ipOrganization",
  "app" : "{}",
  "externalUrl" : "externalUrl",
  "networkConnectivity" : "{}",
  "endedDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "idleDate" : "2000-01-23T04:56:07.000+00:00",
  "ipAddress" : "ipAddress",
  "externalId" : "externalId",
  "lastUserDisconnectType" : "Unknown",
  "pageviewCount" : 1,
  "externalContact" : "{}",
  "originatingDirection" : "Unknown",
  "referrer" : "{}",
  "lastUserDisposition" : "{}",
  "outcomeAchievements" : [ {
    "achievedDate" : "2000-01-23T04:56:07.000+00:00",
    "outcome" : "{}"
  }, {
    "achievedDate" : "2000-01-23T04:56:07.000+00:00",
    "outcome" : "{}"
  } ],
  "lastConnectedUser" : "{}",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "conversationChannels" : [ {
    "messageType" : "Unknown",
    "type" : "Unknown",
    "platform" : "platform"
  }, {
    "messageType" : "Unknown",
    "type" : "Unknown",
    "platform" : "platform"
  } ],
  "segmentAssignments" : [ {
    "assignedDate" : "2000-01-23T04:56:07.000+00:00",
    "segment" : "{}"
  }, {
    "assignedDate" : "2000-01-23T04:56:07.000+00:00",
    "segment" : "{}"
  } ],
  "lastEvent" : "{}",
  "attributes" : {
    "key" : {
      "dataType" : "dataType",
      "value" : "value"
    }
  },
  "device" : "{}",
  "geolocation" : "{}"
}, statusCode=200}]
     
     - parameter sessionId: (path) ID of the session. 

     - returns: RequestBuilder<Session> 
     */
    open class func getJourneySessionWithRequestBuilder(sessionId: String) -> RequestBuilder<Session> {        
        var path = "/api/v2/journey/sessions/{sessionId}"
        let sessionIdPreEscape = "\(sessionId)"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Session>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve latest outcome score associated with a session for all outcomes.
     
     - parameter sessionId: (path) ID of the session. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJourneySessionOutcomescores(sessionId: String, completion: @escaping ((_ data: OutcomeScoresResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getJourneySessionOutcomescoresWithRequestBuilder(sessionId: sessionId)
        requestBuilder.execute { (response: Response<OutcomeScoresResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve latest outcome score associated with a session for all outcomes.
     - GET /api/v2/journey/sessions/{sessionId}/outcomescores
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "outcomeScores" : [ {
    "percentile" : 1,
    "sessionMaxProbability" : 0.8008282,
    "probability" : 6.0274563,
    "quantile" : 5.637377,
    "sessionMaxPercentile" : 5,
    "sessionMaxQuantile" : 2.302136,
    "outcome" : "{}"
  }, {
    "percentile" : 1,
    "sessionMaxProbability" : 0.8008282,
    "probability" : 6.0274563,
    "quantile" : 5.637377,
    "sessionMaxPercentile" : 5,
    "sessionMaxQuantile" : 2.302136,
    "outcome" : "{}"
  } ],
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter sessionId: (path) ID of the session. 

     - returns: RequestBuilder<OutcomeScoresResult> 
     */
    open class func getJourneySessionOutcomescoresWithRequestBuilder(sessionId: String) -> RequestBuilder<OutcomeScoresResult> {        
        var path = "/api/v2/journey/sessions/{sessionId}/outcomescores"
        let sessionIdPreEscape = "\(sessionId)"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutcomeScoresResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Update single action map.
     
     - parameter actionMapId: (path) ID of the action map. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchJourneyActionmap(actionMapId: String, body: PatchActionMap? = nil, completion: @escaping ((_ data: ActionMap?,_ error: Error?) -> Void)) {
        let requestBuilder = patchJourneyActionmapWithRequestBuilder(actionMapId: actionMapId, body: body)
        requestBuilder.execute { (response: Response<ActionMap>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update single action map.
     - PATCH /api/v2/journey/actionmaps/{actionMapId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "ignoreFrequencyCap" : true,
  "endDate" : "2000-01-23T04:56:07.000+00:00",
  "displayName" : "displayName",
  "selfUri" : "https://openapi-generator.tech",
  "weight" : 9,
  "triggerWithOutcomePercentileConditions" : [ {
    "fallbackPercentile" : 5.637377,
    "maximumPercentile" : 5.962134,
    "outcomeId" : "outcomeId"
  }, {
    "fallbackPercentile" : 5.637377,
    "maximumPercentile" : 5.962134,
    "outcomeId" : "outcomeId"
  } ],
  "isActive" : true,
  "version" : 0,
  "triggerWithSegments" : [ "triggerWithSegments", "triggerWithSegments" ],
  "triggerWithOutcomeQuantileConditions" : [ {
    "fallbackQuantileThreshold" : 7.0614014,
    "outcomeId" : "outcomeId",
    "maxQuantileThreshold" : 2.302136
  }, {
    "fallbackQuantileThreshold" : 7.0614014,
    "outcomeId" : "outcomeId",
    "maxQuantileThreshold" : 2.302136
  } ],
  "triggerWithOutcomeProbabilityConditions" : [ {
    "probability" : 1.4658129,
    "outcomeId" : "outcomeId",
    "maximumProbability" : 6.0274563
  }, {
    "probability" : 1.4658129,
    "outcomeId" : "outcomeId",
    "maximumProbability" : 6.0274563
  } ],
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "triggerWithEventConditions" : [ {
    "streamType" : "Web",
    "values" : [ "values", "values" ],
    "sessionType" : "sessionType",
    "eventName" : "eventName",
    "key" : "key",
    "operator" : "containsAll"
  }, {
    "streamType" : "Web",
    "values" : [ "values", "values" ],
    "sessionType" : "sessionType",
    "eventName" : "eventName",
    "key" : "key",
    "operator" : "containsAll"
  } ],
  "pageUrlConditions" : [ {
    "values" : [ "values", "values" ],
    "operator" : "containsAll"
  }, {
    "values" : [ "values", "values" ],
    "operator" : "containsAll"
  } ],
  "actionMapScheduleGroups" : "{}",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "action" : "{}",
  "id" : "id",
  "activation" : "{}",
  "startDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter actionMapId: (path) ID of the action map. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ActionMap> 
     */
    open class func patchJourneyActionmapWithRequestBuilder(actionMapId: String, body: PatchActionMap? = nil) -> RequestBuilder<ActionMap> {        
        var path = "/api/v2/journey/actionmaps/{actionMapId}"
        let actionMapIdPreEscape = "\(actionMapId)"
        let actionMapIdPostEscape = actionMapIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionMapId}", with: actionMapIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionMap>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Update a single action target.
     
     - parameter actionTargetId: (path) ID of the action target. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchJourneyActiontarget(actionTargetId: String, body: PatchActionTarget? = nil, completion: @escaping ((_ data: ActionTarget?,_ error: Error?) -> Void)) {
        let requestBuilder = patchJourneyActiontargetWithRequestBuilder(actionTargetId: actionTargetId, body: body)
        requestBuilder.execute { (response: Response<ActionTarget>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a single action target.
     - PATCH /api/v2/journey/actiontargets/{actionTargetId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "supportedMediaTypes" : [ "callback", "callback" ],
  "shortAbandonThreshold" : 0,
  "userData" : [ {
    "value" : "value",
    "key" : "key"
  }, {
    "value" : "value",
    "key" : "key"
  } ],
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "id" : "id",
  "state" : "active",
  "serviceLevel" : "{}"
}, statusCode=200}]
     
     - parameter actionTargetId: (path) ID of the action target. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ActionTarget> 
     */
    open class func patchJourneyActiontargetWithRequestBuilder(actionTargetId: String, body: PatchActionTarget? = nil) -> RequestBuilder<ActionTarget> {        
        var path = "/api/v2/journey/actiontargets/{actionTargetId}"
        let actionTargetIdPreEscape = "\(actionTargetId)"
        let actionTargetIdPostEscape = actionTargetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionTargetId}", with: actionTargetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionTarget>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Update a single action template.
     
     - parameter actionTemplateId: (path) ID of the action template. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchJourneyActiontemplate(actionTemplateId: String, body: PatchActionTemplate? = nil, completion: @escaping ((_ data: ActionTemplate?,_ error: Error?) -> Void)) {
        let requestBuilder = patchJourneyActiontemplateWithRequestBuilder(actionTemplateId: actionTemplateId, body: body)
        requestBuilder.execute { (response: Response<ActionTemplate>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a single action template.
     - PATCH /api/v2/journey/actiontemplates/{actionTemplateId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "mediaType" : "webchat",
  "id" : "id",
  "state" : "Active",
  "version" : 0,
  "contentOffer" : "{}"
}, statusCode=200}]
     
     - parameter actionTemplateId: (path) ID of the action template. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ActionTemplate> 
     */
    open class func patchJourneyActiontemplateWithRequestBuilder(actionTemplateId: String, body: PatchActionTemplate? = nil) -> RequestBuilder<ActionTemplate> {        
        var path = "/api/v2/journey/actiontemplates/{actionTemplateId}"
        let actionTemplateIdPreEscape = "\(actionTemplateId)"
        let actionTemplateIdPostEscape = actionTemplateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{actionTemplateId}", with: actionTemplateIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionTemplate>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Update an outcome.
     
     - parameter outcomeId: (path) ID of the outcome. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchJourneyOutcome(outcomeId: String, body: PatchOutcome? = nil, completion: @escaping ((_ data: Outcome?,_ error: Error?) -> Void)) {
        let requestBuilder = patchJourneyOutcomeWithRequestBuilder(outcomeId: outcomeId, body: body)
        requestBuilder.execute { (response: Response<Outcome>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an outcome.
     - PATCH /api/v2/journey/outcomes/{outcomeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "associatedValueField" : "{}",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "journey" : "{}",
  "displayName" : "displayName",
  "selfUri" : "https://openapi-generator.tech",
  "context" : "{}",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "isPositive" : true,
  "id" : "id",
  "isActive" : true,
  "version" : 0
}, statusCode=200}]
     
     - parameter outcomeId: (path) ID of the outcome. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Outcome> 
     */
    open class func patchJourneyOutcomeWithRequestBuilder(outcomeId: String, body: PatchOutcome? = nil) -> RequestBuilder<Outcome> {        
        var path = "/api/v2/journey/outcomes/{outcomeId}"
        let outcomeIdPreEscape = "\(outcomeId)"
        let outcomeIdPostEscape = outcomeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{outcomeId}", with: outcomeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Outcome>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Update a segment.
     
     - parameter segmentId: (path) ID of the segment. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchJourneySegment(segmentId: String, body: PatchSegment? = nil, completion: @escaping ((_ data: JourneySegment?,_ error: Error?) -> Void)) {
        let requestBuilder = patchJourneySegmentWithRequestBuilder(segmentId: segmentId, body: body)
        requestBuilder.execute { (response: Response<JourneySegment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a segment.
     - PATCH /api/v2/journey/segments/{segmentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "color" : "color",
  "journey" : "{}",
  "externalSegment" : "{}",
  "displayName" : "displayName",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "isActive" : true,
  "version" : 0,
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "assignmentExpirationDays" : 6,
  "scope" : "Session",
  "context" : "{}",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "shouldDisplayToAgent" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter segmentId: (path) ID of the segment. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<JourneySegment> 
     */
    open class func patchJourneySegmentWithRequestBuilder(segmentId: String, body: PatchSegment? = nil) -> RequestBuilder<JourneySegment> {        
        var path = "/api/v2/journey/segments/{segmentId}"
        let segmentIdPreEscape = "\(segmentId)"
        let segmentIdPostEscape = segmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{segmentId}", with: segmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JourneySegment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Query for journey aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsJourneysAggregatesQuery(body: JourneyAggregationQuery, completion: @escaping ((_ data: JourneyAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsJourneysAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<JourneyAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for journey aggregates
     - POST /api/v2/analytics/journeys/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<JourneyAggregateQueryResponse> 
     */
    open class func postAnalyticsJourneysAggregatesQueryWithRequestBuilder(body: JourneyAggregationQuery) -> RequestBuilder<JourneyAggregateQueryResponse> {        
        let path = "/api/v2/analytics/journeys/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JourneyAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create an action map.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJourneyActionmaps(body: ActionMap? = nil, completion: @escaping ((_ data: ActionMap?,_ error: Error?) -> Void)) {
        let requestBuilder = postJourneyActionmapsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ActionMap>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an action map.
     - POST /api/v2/journey/actionmaps
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "ignoreFrequencyCap" : true,
  "endDate" : "2000-01-23T04:56:07.000+00:00",
  "displayName" : "displayName",
  "selfUri" : "https://openapi-generator.tech",
  "weight" : 9,
  "triggerWithOutcomePercentileConditions" : [ {
    "fallbackPercentile" : 5.637377,
    "maximumPercentile" : 5.962134,
    "outcomeId" : "outcomeId"
  }, {
    "fallbackPercentile" : 5.637377,
    "maximumPercentile" : 5.962134,
    "outcomeId" : "outcomeId"
  } ],
  "isActive" : true,
  "version" : 0,
  "triggerWithSegments" : [ "triggerWithSegments", "triggerWithSegments" ],
  "triggerWithOutcomeQuantileConditions" : [ {
    "fallbackQuantileThreshold" : 7.0614014,
    "outcomeId" : "outcomeId",
    "maxQuantileThreshold" : 2.302136
  }, {
    "fallbackQuantileThreshold" : 7.0614014,
    "outcomeId" : "outcomeId",
    "maxQuantileThreshold" : 2.302136
  } ],
  "triggerWithOutcomeProbabilityConditions" : [ {
    "probability" : 1.4658129,
    "outcomeId" : "outcomeId",
    "maximumProbability" : 6.0274563
  }, {
    "probability" : 1.4658129,
    "outcomeId" : "outcomeId",
    "maximumProbability" : 6.0274563
  } ],
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "triggerWithEventConditions" : [ {
    "streamType" : "Web",
    "values" : [ "values", "values" ],
    "sessionType" : "sessionType",
    "eventName" : "eventName",
    "key" : "key",
    "operator" : "containsAll"
  }, {
    "streamType" : "Web",
    "values" : [ "values", "values" ],
    "sessionType" : "sessionType",
    "eventName" : "eventName",
    "key" : "key",
    "operator" : "containsAll"
  } ],
  "pageUrlConditions" : [ {
    "values" : [ "values", "values" ],
    "operator" : "containsAll"
  }, {
    "values" : [ "values", "values" ],
    "operator" : "containsAll"
  } ],
  "actionMapScheduleGroups" : "{}",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "action" : "{}",
  "id" : "id",
  "activation" : "{}",
  "startDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ActionMap> 
     */
    open class func postJourneyActionmapsWithRequestBuilder(body: ActionMap? = nil) -> RequestBuilder<ActionMap> {        
        let path = "/api/v2/journey/actionmaps"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionMap>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for estimates
     
     - parameter body: (body) audience estimator request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJourneyActionmapsEstimatesJobs(body: ActionMapEstimateRequest, completion: @escaping ((_ data: EstimateJobAsyncResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postJourneyActionmapsEstimatesJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EstimateJobAsyncResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for estimates
     - POST /api/v2/journey/actionmaps/estimates/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id"
}, statusCode=202}]
     
     - parameter body: (body) audience estimator request 

     - returns: RequestBuilder<EstimateJobAsyncResponse> 
     */
    open class func postJourneyActionmapsEstimatesJobsWithRequestBuilder(body: ActionMapEstimateRequest) -> RequestBuilder<EstimateJobAsyncResponse> {        
        let path = "/api/v2/journey/actionmaps/estimates/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EstimateJobAsyncResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a single action template.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJourneyActiontemplates(body: ActionTemplate? = nil, completion: @escaping ((_ data: ActionTemplate?,_ error: Error?) -> Void)) {
        let requestBuilder = postJourneyActiontemplatesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ActionTemplate>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a single action template.
     - POST /api/v2/journey/actiontemplates
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "mediaType" : "webchat",
  "id" : "id",
  "state" : "Active",
  "version" : 0,
  "contentOffer" : "{}"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ActionTemplate> 
     */
    open class func postJourneyActiontemplatesWithRequestBuilder(body: ActionTemplate? = nil) -> RequestBuilder<ActionTemplate> {        
        let path = "/api/v2/journey/actiontemplates"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ActionTemplate>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Sends an action event, which is used for changing the state of actions that have been offered to the user.
     
     - parameter deploymentId: (path) The ID of the deployment sending the beacon. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJourneyDeploymentActionevent(deploymentId: String, body: ActionEventRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postJourneyDeploymentActioneventWithRequestBuilder(deploymentId: deploymentId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Sends an action event, which is used for changing the state of actions that have been offered to the user.
     - POST /api/v2/journey/deployments/{deploymentId}/actionevent
     
     - parameter deploymentId: (path) The ID of the deployment sending the beacon. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func postJourneyDeploymentActioneventWithRequestBuilder(deploymentId: String, body: ActionEventRequest) -> RequestBuilder<Void> {        
        var path = "/api/v2/journey/deployments/{deploymentId}/actionevent"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Send a journey app event, used for tracking customer activity on an application.
     
     - parameter deploymentId: (path) The ID of the deployment sending the app event. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJourneyDeploymentAppevents(deploymentId: String, body: AppEventRequest? = nil, completion: @escaping ((_ data: AppEventResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postJourneyDeploymentAppeventsWithRequestBuilder(deploymentId: deploymentId, body: body)
        requestBuilder.execute { (response: Response<AppEventResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Send a journey app event, used for tracking customer activity on an application.
     - POST /api/v2/journey/deployments/{deploymentId}/appevents
     - examples: [{contentType=application/json, example={
  "app" : "{}",
  "ipOrganization" : "ipOrganization",
  "networkConnectivity" : "{}",
  "traits" : {
    "key" : {
      "dataType" : "dataType",
      "value" : "value"
    }
  },
  "session" : "{}",
  "screenName" : "screenName",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "sdkLibrary" : "{}",
  "searchQuery" : "searchQuery",
  "customerId" : "customerId",
  "eventName" : "eventName",
  "attributes" : {
    "key" : {
      "dataType" : "dataType",
      "value" : "value"
    }
  },
  "id" : "id",
  "customerIdType" : "customerIdType",
  "device" : "{}",
  "mktCampaign" : "{}",
  "geolocation" : "{}"
}, statusCode=200}]
     
     - parameter deploymentId: (path) The ID of the deployment sending the app event. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<AppEventResponse> 
     */
    open class func postJourneyDeploymentAppeventsWithRequestBuilder(deploymentId: String, body: AppEventRequest? = nil) -> RequestBuilder<AppEventResponse> {        
        var path = "/api/v2/journey/deployments/{deploymentId}/appevents"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AppEventResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create an outcome.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJourneyOutcomes(body: OutcomeRequest? = nil, completion: @escaping ((_ data: Outcome?,_ error: Error?) -> Void)) {
        let requestBuilder = postJourneyOutcomesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Outcome>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an outcome.
     - POST /api/v2/journey/outcomes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "associatedValueField" : "{}",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "journey" : "{}",
  "displayName" : "displayName",
  "selfUri" : "https://openapi-generator.tech",
  "context" : "{}",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "isPositive" : true,
  "id" : "id",
  "isActive" : true,
  "version" : 0
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Outcome> 
     */
    open class func postJourneyOutcomesWithRequestBuilder(body: OutcomeRequest? = nil) -> RequestBuilder<Outcome> {        
        let path = "/api/v2/journey/outcomes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Outcome>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create an outcome predictor.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJourneyOutcomesPredictors(body: OutcomePredictorRequest? = nil, completion: @escaping ((_ data: OutcomePredictor?,_ error: Error?) -> Void)) {
        let requestBuilder = postJourneyOutcomesPredictorsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<OutcomePredictor>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an outcome predictor.
     - POST /api/v2/journey/outcomes/predictors
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "outcome" : "{}"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<OutcomePredictor> 
     */
    open class func postJourneyOutcomesPredictorsWithRequestBuilder(body: OutcomePredictorRequest? = nil) -> RequestBuilder<OutcomePredictor> {        
        let path = "/api/v2/journey/outcomes/predictors"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutcomePredictor>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a segment.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJourneySegments(body: JourneySegmentRequest? = nil, completion: @escaping ((_ data: JourneySegment?,_ error: Error?) -> Void)) {
        let requestBuilder = postJourneySegmentsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<JourneySegment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a segment.
     - POST /api/v2/journey/segments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "color" : "color",
  "journey" : "{}",
  "externalSegment" : "{}",
  "displayName" : "displayName",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "isActive" : true,
  "version" : 0,
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "assignmentExpirationDays" : 6,
  "scope" : "Session",
  "context" : "{}",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "shouldDisplayToAgent" : true,
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<JourneySegment> 
     */
    open class func postJourneySegmentsWithRequestBuilder(body: JourneySegmentRequest? = nil) -> RequestBuilder<JourneySegment> {        
        let path = "/api/v2/journey/segments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JourneySegment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
