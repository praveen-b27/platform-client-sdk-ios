//
// LanguageUnderstandingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LanguageUnderstandingAPI {
    
    /**
     Delete an NLU Domain.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLanguageunderstandingDomain(domainId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLanguageunderstandingDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an NLU Domain.
     - DELETE /api/v2/languageunderstanding/domains/{domainId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainId: (path) ID of the NLU domain. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLanguageunderstandingDomainWithRequestBuilder(domainId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete the feedback on the NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter feedbackId: (path) ID of the Feedback 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLanguageunderstandingDomainFeedbackFeedbackId(domainId: String, feedbackId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLanguageunderstandingDomainFeedbackFeedbackIdWithRequestBuilder(domainId: domainId, feedbackId: feedbackId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete the feedback on the NLU Domain Version.
     - DELETE /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter feedbackId: (path) ID of the Feedback 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLanguageunderstandingDomainFeedbackFeedbackIdWithRequestBuilder(domainId: String, feedbackId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let feedbackIdPreEscape = "\(feedbackId)"
        let feedbackIdPostEscape = feedbackIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{feedbackId}", with: feedbackIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete an NLU Domain Version
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLanguageunderstandingDomainVersion(domainId: String, domainVersionId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLanguageunderstandingDomainVersionWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an NLU Domain Version
     - DELETE /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLanguageunderstandingDomainVersionWithRequestBuilder(domainId: String, domainVersionId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a miner.
     
     - parameter minerId: (path) Miner ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLanguageunderstandingMiner(minerId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLanguageunderstandingMinerWithRequestBuilder(minerId: minerId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a miner.
     - DELETE /api/v2/languageunderstanding/miners/{minerId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter minerId: (path) Miner ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLanguageunderstandingMinerWithRequestBuilder(minerId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a draft
     
     - parameter minerId: (path) Miner ID 
     - parameter draftId: (path) Draft ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLanguageunderstandingMinerDraft(minerId: String, draftId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLanguageunderstandingMinerDraftWithRequestBuilder(minerId: minerId, draftId: draftId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a draft
     - DELETE /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter minerId: (path) Miner ID 
     - parameter draftId: (path) Draft ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLanguageunderstandingMinerDraftWithRequestBuilder(minerId: String, draftId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let draftIdPreEscape = "\(draftId)"
        let draftIdPostEscape = draftIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{draftId}", with: draftIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Find an NLU Domain.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomain(domainId: String, completion: @escaping ((_ data: NluDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<NluDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Find an NLU Domain.
     - GET /api/v2/languageunderstanding/domains/{domainId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "engineVersion" : "engineVersion",
  "lastPublishedVersion" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "language" : "language",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "draftVersion" : "{}"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 

     - returns: RequestBuilder<NluDomain> 
     */
    open class func getLanguageunderstandingDomainWithRequestBuilder(domainId: String) -> RequestBuilder<NluDomain> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum Assessment_getLanguageunderstandingDomainFeedback: String { 
        case incorrect = "Incorrect"
        case correct = "Correct"
        case unknown = "Unknown"
        case disabled = "Disabled"
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     Get all feedback in the given NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter intentName: (query) The top intent name to retrieve feedback for. (optional)
     - parameter assessment: (query) The top assessment to retrieve feedback for. (optional)
     - parameter dateStart: (query) Begin of time window as ISO-8601 date. (optional)
     - parameter dateEnd: (query) End of time window as ISO-8601 date. (optional)
     - parameter includeDeleted: (query) Whether to include soft-deleted items in the result. (optional)
     - parameter language: (query) Whether to filter response based on the language, e.g. en-us, pt-br. (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter enableCursorPagination: (query) Enable Cursor Pagination (optional)
     - parameter includeTrainingUtterances: (query) Include Training Utterances. By default they&#39;re included. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. This is considered only when enableCursorPagination&#x3D;true (optional)
     - parameter fields: (query) Fields and properties to get, comma-separated (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainFeedback(domainId: String, intentName: String? = nil, assessment: Assessment_getLanguageunderstandingDomainFeedback? = nil, dateStart: Date? = nil, dateEnd: Date? = nil, includeDeleted: Bool? = nil, language: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, enableCursorPagination: Bool? = nil, includeTrainingUtterances: Bool? = nil, after: String? = nil, fields: [String]? = nil, completion: @escaping ((_ data: NluFeedbackListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainFeedbackWithRequestBuilder(domainId: domainId, intentName: intentName, assessment: assessment, dateStart: dateStart, dateEnd: dateEnd, includeDeleted: includeDeleted, language: language, pageNumber: pageNumber, pageSize: pageSize, enableCursorPagination: enableCursorPagination, includeTrainingUtterances: includeTrainingUtterances, after: after, fields: fields)
        requestBuilder.execute { (response: Response<NluFeedbackListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all feedback in the given NLU Domain Version.
     - GET /api/v2/languageunderstanding/domains/{domainId}/feedback
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "intents" : [ {
      "assessment" : "Incorrect",
      "entities" : [ {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      }, {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      } ],
      "probability" : 0.8008281904610115,
      "name" : "name"
    }, {
      "assessment" : "Incorrect",
      "entities" : [ {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      }, {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      } ],
      "probability" : 0.8008281904610115,
      "name" : "name"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "language" : "language",
    "id" : "id",
    "text" : "text",
    "version" : "{}"
  }, {
    "intents" : [ {
      "assessment" : "Incorrect",
      "entities" : [ {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      }, {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      } ],
      "probability" : 0.8008281904610115,
      "name" : "name"
    }, {
      "assessment" : "Incorrect",
      "entities" : [ {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      }, {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      } ],
      "probability" : 0.8008281904610115,
      "name" : "name"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "language" : "language",
    "id" : "id",
    "text" : "text",
    "version" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter intentName: (query) The top intent name to retrieve feedback for. (optional)
     - parameter assessment: (query) The top assessment to retrieve feedback for. (optional)
     - parameter dateStart: (query) Begin of time window as ISO-8601 date. (optional)
     - parameter dateEnd: (query) End of time window as ISO-8601 date. (optional)
     - parameter includeDeleted: (query) Whether to include soft-deleted items in the result. (optional)
     - parameter language: (query) Whether to filter response based on the language, e.g. en-us, pt-br. (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter enableCursorPagination: (query) Enable Cursor Pagination (optional)
     - parameter includeTrainingUtterances: (query) Include Training Utterances. By default they&#39;re included. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. This is considered only when enableCursorPagination&#x3D;true (optional)
     - parameter fields: (query) Fields and properties to get, comma-separated (optional)

     - returns: RequestBuilder<NluFeedbackListing> 
     */
    open class func getLanguageunderstandingDomainFeedbackWithRequestBuilder(domainId: String, intentName: String? = nil, assessment: Assessment_getLanguageunderstandingDomainFeedback? = nil, dateStart: Date? = nil, dateEnd: Date? = nil, includeDeleted: Bool? = nil, language: String? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, enableCursorPagination: Bool? = nil, includeTrainingUtterances: Bool? = nil, after: String? = nil, fields: [String]? = nil) -> RequestBuilder<NluFeedbackListing> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/feedback"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "intentName": intentName, 
            "assessment": assessment?.rawValue, 
            "dateStart": dateStart?.encodeToJSON(), 
            "dateEnd": dateEnd?.encodeToJSON(), 
            "includeDeleted": includeDeleted, 
            "language": language, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "enableCursorPagination": enableCursorPagination, 
            "includeTrainingUtterances": includeTrainingUtterances, 
            "after": after, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<NluFeedbackListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Find a Feedback
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter feedbackId: (path) ID of the Feedback 
     - parameter fields: (query) Fields and properties to get, comma-separated (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainFeedbackFeedbackId(domainId: String, feedbackId: String, fields: [String]? = nil, completion: @escaping ((_ data: NluFeedbackResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainFeedbackFeedbackIdWithRequestBuilder(domainId: domainId, feedbackId: feedbackId, fields: fields)
        requestBuilder.execute { (response: Response<NluFeedbackResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Find a Feedback
     - GET /api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "assessment" : "Incorrect",
    "entities" : [ {
      "entityType" : "entityType",
      "probability" : 6.027456183070403,
      "name" : "name",
      "value" : "{}"
    }, {
      "entityType" : "entityType",
      "probability" : 6.027456183070403,
      "name" : "name",
      "value" : "{}"
    } ],
    "probability" : 0.8008281904610115,
    "name" : "name"
  }, {
    "assessment" : "Incorrect",
    "entities" : [ {
      "entityType" : "entityType",
      "probability" : 6.027456183070403,
      "name" : "name",
      "value" : "{}"
    }, {
      "entityType" : "entityType",
      "probability" : 6.027456183070403,
      "name" : "name",
      "value" : "{}"
    } ],
    "probability" : 0.8008281904610115,
    "name" : "name"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "language" : "language",
  "id" : "id",
  "text" : "text",
  "version" : "{}"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter feedbackId: (path) ID of the Feedback 
     - parameter fields: (query) Fields and properties to get, comma-separated (optional)

     - returns: RequestBuilder<NluFeedbackResponse> 
     */
    open class func getLanguageunderstandingDomainFeedbackFeedbackIdWithRequestBuilder(domainId: String, feedbackId: String, fields: [String]? = nil) -> RequestBuilder<NluFeedbackResponse> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/feedback/{feedbackId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let feedbackIdPreEscape = "\(feedbackId)"
        let feedbackIdPostEscape = feedbackIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{feedbackId}", with: feedbackIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<NluFeedbackResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Find an NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainVersion(domainId: String, domainVersionId: String, includeUtterances: Bool? = nil, completion: @escaping ((_ data: NluDomainVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainVersionWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId, includeUtterances: includeUtterances)
        requestBuilder.execute { (response: Response<NluDomainVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Find an NLU Domain Version.
     - GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    }, {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    } ],
    "name" : "name",
    "id" : "id",
    "entityTypeBindings" : [ {
      "entityType" : "entityType",
      "entityName" : "entityName"
    }, {
      "entityType" : "entityType",
      "entityName" : "entityName"
    } ],
    "additionalLanguages" : {
      "key" : {
        "utterances" : [ {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        }, {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        } ],
        "id" : "id"
      }
    },
    "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
  }, {
    "utterances" : [ {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    }, {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    } ],
    "name" : "name",
    "id" : "id",
    "entityTypeBindings" : [ {
      "entityType" : "entityType",
      "entityName" : "entityName"
    }, {
      "entityType" : "entityType",
      "entityName" : "entityName"
    } ],
    "additionalLanguages" : {
      "key" : {
        "utterances" : [ {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        }, {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        } ],
        "id" : "id"
      }
    },
    "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
  } ],
  "dateTrained" : "2000-01-23T04:56:07.000+00:00",
  "trainingStatus" : "Untrained",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "language" : "language",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "published" : true,
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "entities" : [ {
    "name" : "name",
    "type" : "type"
  }, {
    "name" : "name",
    "type" : "type"
  } ],
  "domain" : "{}",
  "entityTypes" : [ {
    "name" : "name",
    "description" : "description",
    "mechanism" : "{}"
  }, {
    "name" : "name",
    "description" : "description",
    "mechanism" : "{}"
  } ],
  "id" : "id",
  "evaluationStatus" : "Unevaluated"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)

     - returns: RequestBuilder<NluDomainVersion> 
     */
    open class func getLanguageunderstandingDomainVersionWithRequestBuilder(domainId: String, domainVersionId: String, includeUtterances: Bool? = nil) -> RequestBuilder<NluDomainVersion> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeUtterances": includeUtterances
        ])

        let requestBuilder: RequestBuilder<NluDomainVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Retrieved quality report for the specified NLU Domain Version
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainVersionReport(domainId: String, domainVersionId: String, completion: @escaping ((_ data: NluDomainVersionQualityReport?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainVersionReportWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId)
        requestBuilder.execute { (response: Response<NluDomainVersionQualityReport>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieved quality report for the specified NLU Domain Version
     - GET /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/report
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "summary" : "{}",
  "confusionMatrix" : [ {
    "columns" : [ {
      "name" : "name",
      "value" : 0.8008282
    }, {
      "name" : "name",
      "value" : 0.8008282
    } ],
    "name" : "name"
  }, {
    "columns" : [ {
      "name" : "name",
      "value" : 0.8008282
    }, {
      "name" : "name",
      "value" : 0.8008282
    } ],
    "name" : "name"
  } ],
  "version" : "{}"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 

     - returns: RequestBuilder<NluDomainVersionQualityReport> 
     */
    open class func getLanguageunderstandingDomainVersionReportWithRequestBuilder(domainId: String, domainVersionId: String) -> RequestBuilder<NluDomainVersionQualityReport> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/report"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomainVersionQualityReport>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Get all NLU Domain Versions for a given Domain.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomainVersions(domainId: String, includeUtterances: Bool? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: NluDomainVersionListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainVersionsWithRequestBuilder(domainId: domainId, includeUtterances: includeUtterances, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<NluDomainVersionListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all NLU Domain Versions for a given Domain.
     - GET /api/v2/languageunderstanding/domains/{domainId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "intents" : [ {
      "utterances" : [ {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      }, {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      } ],
      "name" : "name",
      "id" : "id",
      "entityTypeBindings" : [ {
        "entityType" : "entityType",
        "entityName" : "entityName"
      }, {
        "entityType" : "entityType",
        "entityName" : "entityName"
      } ],
      "additionalLanguages" : {
        "key" : {
          "utterances" : [ {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          }, {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          } ],
          "id" : "id"
        }
      },
      "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
    }, {
      "utterances" : [ {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      }, {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      } ],
      "name" : "name",
      "id" : "id",
      "entityTypeBindings" : [ {
        "entityType" : "entityType",
        "entityName" : "entityName"
      }, {
        "entityType" : "entityType",
        "entityName" : "entityName"
      } ],
      "additionalLanguages" : {
        "key" : {
          "utterances" : [ {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          }, {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          } ],
          "id" : "id"
        }
      },
      "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+00:00",
    "trainingStatus" : "Untrained",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "language" : "language",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "entities" : [ {
      "name" : "name",
      "type" : "type"
    }, {
      "name" : "name",
      "type" : "type"
    } ],
    "domain" : "{}",
    "entityTypes" : [ {
      "name" : "name",
      "description" : "description",
      "mechanism" : "{}"
    }, {
      "name" : "name",
      "description" : "description",
      "mechanism" : "{}"
    } ],
    "id" : "id",
    "evaluationStatus" : "Unevaluated"
  }, {
    "intents" : [ {
      "utterances" : [ {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      }, {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      } ],
      "name" : "name",
      "id" : "id",
      "entityTypeBindings" : [ {
        "entityType" : "entityType",
        "entityName" : "entityName"
      }, {
        "entityType" : "entityType",
        "entityName" : "entityName"
      } ],
      "additionalLanguages" : {
        "key" : {
          "utterances" : [ {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          }, {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          } ],
          "id" : "id"
        }
      },
      "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
    }, {
      "utterances" : [ {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      }, {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      } ],
      "name" : "name",
      "id" : "id",
      "entityTypeBindings" : [ {
        "entityType" : "entityType",
        "entityName" : "entityName"
      }, {
        "entityType" : "entityType",
        "entityName" : "entityName"
      } ],
      "additionalLanguages" : {
        "key" : {
          "utterances" : [ {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          }, {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          } ],
          "id" : "id"
        }
      },
      "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+00:00",
    "trainingStatus" : "Untrained",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "language" : "language",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "entities" : [ {
      "name" : "name",
      "type" : "type"
    }, {
      "name" : "name",
      "type" : "type"
    } ],
    "domain" : "{}",
    "entityTypes" : [ {
      "name" : "name",
      "description" : "description",
      "mechanism" : "{}"
    }, {
      "name" : "name",
      "description" : "description",
      "mechanism" : "{}"
    } ],
    "id" : "id",
    "evaluationStatus" : "Unevaluated"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<NluDomainVersionListing> 
     */
    open class func getLanguageunderstandingDomainVersionsWithRequestBuilder(domainId: String, includeUtterances: Bool? = nil, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<NluDomainVersionListing> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeUtterances": includeUtterances, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<NluDomainVersionListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get all NLU Domains.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingDomains(pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: NluDomainListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingDomainsWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<NluDomainListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all NLU Domains.
     - GET /api/v2/languageunderstanding/domains
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "engineVersion" : "engineVersion",
    "lastPublishedVersion" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "language",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "draftVersion" : "{}"
  }, {
    "engineVersion" : "engineVersion",
    "lastPublishedVersion" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "language" : "language",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "draftVersion" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<NluDomainListing> 
     */
    open class func getLanguageunderstandingDomainsWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<NluDomainListing> {        
        let path = "/api/v2/languageunderstanding/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<NluDomainListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get information about a miner.
     
     - parameter minerId: (path) Miner ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingMiner(minerId: String, completion: @escaping ((_ data: Miner?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingMinerWithRequestBuilder(minerId: minerId)
        requestBuilder.execute { (response: Response<Miner>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get information about a miner.
     - GET /api/v2/languageunderstanding/miners/{minerId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversationsFetchedCount" : 0,
  "getminedItemCount" : 1,
  "warningInfo" : "{}",
  "conversationsDateRangeStart" : "2019-06-20T00:00:00.000+0000",
  "selfUri" : "https://openapi-generator.tech",
  "participantType" : "Customer",
  "errorInfo" : "{}",
  "language" : "en-us",
  "mediaType" : "Chat",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "message" : "message",
  "minerType" : "Intent",
  "conversationDataUploaded" : true,
  "conversationsDateRangeEnd" : "2019-12-20T00:00:00.000+0000",
  "queueIds" : [ "queueIds", "queueIds" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
  "dateTriggered" : "2000-01-23T04:56:07.000+00:00",
  "latestDraftVersion" : "{}",
  "conversationsValidCount" : 6,
  "name" : "name",
  "id" : "id",
  "status" : "NotStarted"
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 

     - returns: RequestBuilder<Miner> 
     */
    open class func getLanguageunderstandingMinerWithRequestBuilder(minerId: String) -> RequestBuilder<Miner> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Miner>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Get information about a draft.
     
     - parameter minerId: (path) Miner ID 
     - parameter draftId: (path) Draft ID 
     - parameter draftIntentId: (query) Parameter to filter a specific intent. (optional)
     - parameter draftTopicId: (query) Parameter to filter a specific topic. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingMinerDraft(minerId: String, draftId: String, draftIntentId: String? = nil, draftTopicId: String? = nil, completion: @escaping ((_ data: Draft?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingMinerDraftWithRequestBuilder(minerId: minerId, draftId: draftId, draftIntentId: draftIntentId, draftTopicId: draftTopicId)
        requestBuilder.execute { (response: Response<Draft>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get information about a draft.
     - GET /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ "utterances", "utterances" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "utterances" : [ "utterances", "utterances" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "topics" : [ {
    "conversationCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "phraseCount" : 5,
    "phrases" : [ "phrases", "phrases" ],
    "miner" : "{}",
    "utteranceCount" : 1,
    "conversationPercent" : 6.0274563
  }, {
    "conversationCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "phraseCount" : 5,
    "phrases" : [ "phrases", "phrases" ],
    "miner" : "{}",
    "utteranceCount" : 1,
    "conversationPercent" : 6.0274563
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "miner" : "{}"
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 
     - parameter draftId: (path) Draft ID 
     - parameter draftIntentId: (query) Parameter to filter a specific intent. (optional)
     - parameter draftTopicId: (query) Parameter to filter a specific topic. (optional)

     - returns: RequestBuilder<Draft> 
     */
    open class func getLanguageunderstandingMinerDraftWithRequestBuilder(minerId: String, draftId: String, draftIntentId: String? = nil, draftTopicId: String? = nil) -> RequestBuilder<Draft> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let draftIdPreEscape = "\(draftId)"
        let draftIdPostEscape = draftIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{draftId}", with: draftIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "draftIntentId": draftIntentId, 
            "draftTopicId": draftTopicId
        ])

        let requestBuilder: RequestBuilder<Draft>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve the list of drafts created.
     
     - parameter minerId: (path) Miner ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingMinerDrafts(minerId: String, completion: @escaping ((_ data: DraftListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingMinerDraftsWithRequestBuilder(minerId: minerId)
        requestBuilder.execute { (response: Response<DraftListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve the list of drafts created.
     - GET /api/v2/languageunderstanding/miners/{minerId}/drafts
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "intents" : [ {
      "utterances" : [ "utterances", "utterances" ],
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "utterances" : [ "utterances", "utterances" ],
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "topics" : [ {
      "conversationCount" : 0,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "phraseCount" : 5,
      "phrases" : [ "phrases", "phrases" ],
      "miner" : "{}",
      "utteranceCount" : 1,
      "conversationPercent" : 6.0274563
    }, {
      "conversationCount" : 0,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "phraseCount" : 5,
      "phrases" : [ "phrases", "phrases" ],
      "miner" : "{}",
      "utteranceCount" : 1,
      "conversationPercent" : 6.0274563
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "miner" : "{}"
  }, {
    "intents" : [ {
      "utterances" : [ "utterances", "utterances" ],
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "utterances" : [ "utterances", "utterances" ],
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "topics" : [ {
      "conversationCount" : 0,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "phraseCount" : 5,
      "phrases" : [ "phrases", "phrases" ],
      "miner" : "{}",
      "utteranceCount" : 1,
      "conversationPercent" : 6.0274563
    }, {
      "conversationCount" : 0,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "phraseCount" : 5,
      "phrases" : [ "phrases", "phrases" ],
      "miner" : "{}",
      "utteranceCount" : 1,
      "conversationPercent" : 6.0274563
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "miner" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 

     - returns: RequestBuilder<DraftListing> 
     */
    open class func getLanguageunderstandingMinerDraftsWithRequestBuilder(minerId: String) -> RequestBuilder<DraftListing> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/drafts"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DraftListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum Expand_getLanguageunderstandingMinerIntent: String { 
        case phrases = "phrases"
        case utterances = "utterances"
    }

    
    /**
     Get information about a mined intent
     
     - parameter minerId: (path) Miner ID 
     - parameter intentId: (path) The ID of the intent to be retrieved. 
     - parameter expand: (query) Option to fetch utterances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingMinerIntent(minerId: String, intentId: String, expand: Expand_getLanguageunderstandingMinerIntent? = nil, completion: @escaping ((_ data: MinerIntent?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingMinerIntentWithRequestBuilder(minerId: minerId, intentId: intentId, expand: expand)
        requestBuilder.execute { (response: Response<MinerIntent>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get information about a mined intent
     - GET /api/v2/languageunderstanding/miners/{minerId}/intents/{intentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utterances" : [ {
    "utteranceText" : "I want to pay bill."
  }, {
    "utteranceText" : "I want to pay bill."
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "pay bill.",
  "id" : "id",
  "miner" : "{}",
  "analyticVolumePercent" : 21.5
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 
     - parameter intentId: (path) The ID of the intent to be retrieved. 
     - parameter expand: (query) Option to fetch utterances (optional)

     - returns: RequestBuilder<MinerIntent> 
     */
    open class func getLanguageunderstandingMinerIntentWithRequestBuilder(minerId: String, intentId: String, expand: Expand_getLanguageunderstandingMinerIntent? = nil) -> RequestBuilder<MinerIntent> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/intents/{intentId}"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let intentIdPreEscape = "\(intentId)"
        let intentIdPostEscape = intentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{intentId}", with: intentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<MinerIntent>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum Expand_getLanguageunderstandingMinerIntents: String { 
        case phrases = "phrases"
        case utterances = "utterances"
    }

    
    /**
     Retrieve a list of mined intents.
     
     - parameter minerId: (path) Miner ID 
     - parameter expand: (query) Option to fetch utterances. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingMinerIntents(minerId: String, expand: Expand_getLanguageunderstandingMinerIntents? = nil, completion: @escaping ((_ data: MinedIntentsListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingMinerIntentsWithRequestBuilder(minerId: minerId, expand: expand)
        requestBuilder.execute { (response: Response<MinedIntentsListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a list of mined intents.
     - GET /api/v2/languageunderstanding/miners/{minerId}/intents
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "utterances" : [ {
      "utteranceText" : "I want to pay bill."
    }, {
      "utteranceText" : "I want to pay bill."
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "pay bill.",
    "id" : "id",
    "miner" : "{}",
    "analyticVolumePercent" : 21.5
  }, {
    "utterances" : [ {
      "utteranceText" : "I want to pay bill."
    }, {
      "utteranceText" : "I want to pay bill."
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "pay bill.",
    "id" : "id",
    "miner" : "{}",
    "analyticVolumePercent" : 21.5
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 
     - parameter expand: (query) Option to fetch utterances. (optional)

     - returns: RequestBuilder<MinedIntentsListing> 
     */
    open class func getLanguageunderstandingMinerIntentsWithRequestBuilder(minerId: String, expand: Expand_getLanguageunderstandingMinerIntents? = nil) -> RequestBuilder<MinedIntentsListing> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/intents"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<MinedIntentsListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum Expand_getLanguageunderstandingMinerTopic: String { 
        case phrases = "phrases"
        case utterances = "utterances"
    }

    
    /**
     Retrieves details of a particular topic.
     
     - parameter minerId: (path) Miner ID 
     - parameter topicId: (path) The ID of the topic to be retrieved. 
     - parameter expand: (query) Option to fetch phrases (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingMinerTopic(minerId: String, topicId: String, expand: Expand_getLanguageunderstandingMinerTopic? = nil, completion: @escaping ((_ data: MinerTopic?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingMinerTopicWithRequestBuilder(minerId: minerId, topicId: topicId, expand: expand)
        requestBuilder.execute { (response: Response<MinerTopic>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves details of a particular topic.
     - GET /api/v2/languageunderstanding/miners/{minerId}/topics/{topicId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversationCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "phraseCount" : 5,
  "phrases" : [ {
    "id" : "id",
    "text" : "text",
    "utteranceCount" : 5
  }, {
    "id" : "id",
    "text" : "text",
    "utteranceCount" : 5
  } ],
  "miner" : "{}",
  "utteranceCount" : 1,
  "conversationPercent" : 6.0274563
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 
     - parameter topicId: (path) The ID of the topic to be retrieved. 
     - parameter expand: (query) Option to fetch phrases (optional)

     - returns: RequestBuilder<MinerTopic> 
     */
    open class func getLanguageunderstandingMinerTopicWithRequestBuilder(minerId: String, topicId: String, expand: Expand_getLanguageunderstandingMinerTopic? = nil) -> RequestBuilder<MinerTopic> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/topics/{topicId}"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<MinerTopic>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Retrieves utterances related to a phrase in a topic.
     
     - parameter minerId: (path) Miner ID 
     - parameter topicId: (path) The ID of the topic to be retrieved. 
     - parameter phraseId: (path) The ID of the phrase to be retrieved. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingMinerTopicPhrase(minerId: String, topicId: String, phraseId: String, completion: @escaping ((_ data: MinerTopicPhrase?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingMinerTopicPhraseWithRequestBuilder(minerId: minerId, topicId: topicId, phraseId: phraseId)
        requestBuilder.execute { (response: Response<MinerTopicPhrase>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves utterances related to a phrase in a topic.
     - GET /api/v2/languageunderstanding/miners/{minerId}/topics/{topicId}/phrases/{phraseId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utterances" : [ {
    "utteranceText" : "I want to pay bill."
  }, {
    "utteranceText" : "I want to pay bill."
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "topic" : "{}",
  "id" : "id",
  "utteranceCount" : 0
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 
     - parameter topicId: (path) The ID of the topic to be retrieved. 
     - parameter phraseId: (path) The ID of the phrase to be retrieved. 

     - returns: RequestBuilder<MinerTopicPhrase> 
     */
    open class func getLanguageunderstandingMinerTopicPhraseWithRequestBuilder(minerId: String, topicId: String, phraseId: String) -> RequestBuilder<MinerTopicPhrase> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/topics/{topicId}/phrases/{phraseId}"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let phraseIdPreEscape = "\(phraseId)"
        let phraseIdPostEscape = phraseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{phraseId}", with: phraseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MinerTopicPhrase>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a list of mined topics.
     
     - parameter minerId: (path) Miner ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingMinerTopics(minerId: String, completion: @escaping ((_ data: MinerTopicsListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingMinerTopicsWithRequestBuilder(minerId: minerId)
        requestBuilder.execute { (response: Response<MinerTopicsListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a list of mined topics.
     - GET /api/v2/languageunderstanding/miners/{minerId}/topics
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "conversationCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "phraseCount" : 5,
    "phrases" : [ {
      "id" : "id",
      "text" : "text",
      "utteranceCount" : 5
    }, {
      "id" : "id",
      "text" : "text",
      "utteranceCount" : 5
    } ],
    "miner" : "{}",
    "utteranceCount" : 1,
    "conversationPercent" : 6.0274563
  }, {
    "conversationCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "phraseCount" : 5,
    "phrases" : [ {
      "id" : "id",
      "text" : "text",
      "utteranceCount" : 5
    }, {
      "id" : "id",
      "text" : "text",
      "utteranceCount" : 5
    } ],
    "miner" : "{}",
    "utteranceCount" : 1,
    "conversationPercent" : 6.0274563
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 

     - returns: RequestBuilder<MinerTopicsListing> 
     */
    open class func getLanguageunderstandingMinerTopicsWithRequestBuilder(minerId: String) -> RequestBuilder<MinerTopicsListing> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/topics"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MinerTopicsListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve the list of miners created.
     
     - parameter minerType: (query) Type of miner, either intent or topic (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguageunderstandingMiners(minerType: String? = nil, completion: @escaping ((_ data: MinerListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageunderstandingMinersWithRequestBuilder(minerType: minerType)
        requestBuilder.execute { (response: Response<MinerListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve the list of miners created.
     - GET /api/v2/languageunderstanding/miners
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "conversationsFetchedCount" : 0,
    "getminedItemCount" : 1,
    "warningInfo" : "{}",
    "conversationsDateRangeStart" : "2019-06-20T00:00:00.000+0000",
    "selfUri" : "https://openapi-generator.tech",
    "participantType" : "Customer",
    "errorInfo" : "{}",
    "language" : "en-us",
    "mediaType" : "Chat",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "message" : "message",
    "minerType" : "Intent",
    "conversationDataUploaded" : true,
    "conversationsDateRangeEnd" : "2019-12-20T00:00:00.000+0000",
    "queueIds" : [ "queueIds", "queueIds" ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "dateTriggered" : "2000-01-23T04:56:07.000+00:00",
    "latestDraftVersion" : "{}",
    "conversationsValidCount" : 6,
    "name" : "name",
    "id" : "id",
    "status" : "NotStarted"
  }, {
    "conversationsFetchedCount" : 0,
    "getminedItemCount" : 1,
    "warningInfo" : "{}",
    "conversationsDateRangeStart" : "2019-06-20T00:00:00.000+0000",
    "selfUri" : "https://openapi-generator.tech",
    "participantType" : "Customer",
    "errorInfo" : "{}",
    "language" : "en-us",
    "mediaType" : "Chat",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "message" : "message",
    "minerType" : "Intent",
    "conversationDataUploaded" : true,
    "conversationsDateRangeEnd" : "2019-12-20T00:00:00.000+0000",
    "queueIds" : [ "queueIds", "queueIds" ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "dateTriggered" : "2000-01-23T04:56:07.000+00:00",
    "latestDraftVersion" : "{}",
    "conversationsValidCount" : 6,
    "name" : "name",
    "id" : "id",
    "status" : "NotStarted"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter minerType: (query) Type of miner, either intent or topic (optional)

     - returns: RequestBuilder<MinerListing> 
     */
    open class func getLanguageunderstandingMinersWithRequestBuilder(minerType: String? = nil) -> RequestBuilder<MinerListing> {        
        let path = "/api/v2/languageunderstanding/miners"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "minerType": minerType
        ])

        let requestBuilder: RequestBuilder<MinerListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Update an NLU Domain.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The updated NLU Domain. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchLanguageunderstandingDomain(domainId: String, body: NluDomain, completion: @escaping ((_ data: NluDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = patchLanguageunderstandingDomainWithRequestBuilder(domainId: domainId, body: body)
        requestBuilder.execute { (response: Response<NluDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an NLU Domain.
     - PATCH /api/v2/languageunderstanding/domains/{domainId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "engineVersion" : "engineVersion",
  "lastPublishedVersion" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "language" : "language",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "draftVersion" : "{}"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The updated NLU Domain. 

     - returns: RequestBuilder<NluDomain> 
     */
    open class func patchLanguageunderstandingDomainWithRequestBuilder(domainId: String, body: NluDomain) -> RequestBuilder<NluDomain> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     Save information for the draft. Either topic draft or intent draft should be sent.
     
     - parameter minerId: (path) Miner ID 
     - parameter draftId: (path) Draft ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchLanguageunderstandingMinerDraft(minerId: String, draftId: String, body: DraftRequest? = nil, completion: @escaping ((_ data: Draft?,_ error: Error?) -> Void)) {
        let requestBuilder = patchLanguageunderstandingMinerDraftWithRequestBuilder(minerId: minerId, draftId: draftId, body: body)
        requestBuilder.execute { (response: Response<Draft>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Save information for the draft. Either topic draft or intent draft should be sent.
     - PATCH /api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ "utterances", "utterances" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "utterances" : [ "utterances", "utterances" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "topics" : [ {
    "conversationCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "phraseCount" : 5,
    "phrases" : [ "phrases", "phrases" ],
    "miner" : "{}",
    "utteranceCount" : 1,
    "conversationPercent" : 6.0274563
  }, {
    "conversationCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "phraseCount" : 5,
    "phrases" : [ "phrases", "phrases" ],
    "miner" : "{}",
    "utteranceCount" : 1,
    "conversationPercent" : 6.0274563
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "miner" : "{}"
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 
     - parameter draftId: (path) Draft ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Draft> 
     */
    open class func patchLanguageunderstandingMinerDraftWithRequestBuilder(minerId: String, draftId: String, body: DraftRequest? = nil) -> RequestBuilder<Draft> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/drafts/{draftId}"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let draftIdPreEscape = "\(draftId)"
        let draftIdPostEscape = draftIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{draftId}", with: draftIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Draft>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Create feedback for the NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The Feedback to create. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainFeedback(domainId: String, body: NluFeedbackRequest, completion: @escaping ((_ data: NluFeedbackResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainFeedbackWithRequestBuilder(domainId: domainId, body: body)
        requestBuilder.execute { (response: Response<NluFeedbackResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create feedback for the NLU Domain Version.
     - POST /api/v2/languageunderstanding/domains/{domainId}/feedback
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "assessment" : "Incorrect",
    "entities" : [ {
      "entityType" : "entityType",
      "probability" : 6.027456183070403,
      "name" : "name",
      "value" : "{}"
    }, {
      "entityType" : "entityType",
      "probability" : 6.027456183070403,
      "name" : "name",
      "value" : "{}"
    } ],
    "probability" : 0.8008281904610115,
    "name" : "name"
  }, {
    "assessment" : "Incorrect",
    "entities" : [ {
      "entityType" : "entityType",
      "probability" : 6.027456183070403,
      "name" : "name",
      "value" : "{}"
    }, {
      "entityType" : "entityType",
      "probability" : 6.027456183070403,
      "name" : "name",
      "value" : "{}"
    } ],
    "probability" : 0.8008281904610115,
    "name" : "name"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "language" : "language",
  "id" : "id",
  "text" : "text",
  "version" : "{}"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The Feedback to create. 

     - returns: RequestBuilder<NluFeedbackResponse> 
     */
    open class func postLanguageunderstandingDomainFeedbackWithRequestBuilder(domainId: String, body: NluFeedbackRequest) -> RequestBuilder<NluFeedbackResponse> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/feedback"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluFeedbackResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Detect intent, entities, etc. in the submitted text using the specified NLU domain version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter body: (body) The input data to perform detection on. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainVersionDetect(domainId: String, domainVersionId: String, body: NluDetectionRequest, completion: @escaping ((_ data: NluDetectionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainVersionDetectWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId, body: body)
        requestBuilder.execute { (response: Response<NluDetectionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Detect intent, entities, etc. in the submitted text using the specified NLU domain version.
     - POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/detect
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "output" : {
    "dialogActs" : [ {
      "probability" : 6.027456183070403,
      "name" : "name"
    }, {
      "probability" : 6.027456183070403,
      "name" : "name"
    } ],
    "intents" : [ {
      "entities" : [ {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      }, {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      } ],
      "probability" : 0.8008281904610115,
      "name" : "name"
    }, {
      "entities" : [ {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      }, {
        "entityType" : "entityType",
        "probability" : 6.027456183070403,
        "name" : "name",
        "value" : "{}"
      } ],
      "probability" : 0.8008281904610115,
      "name" : "name"
    } ]
  },
  "input" : {
    "language" : "language",
    "text" : "text"
  },
  "version" : "{}"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter body: (body) The input data to perform detection on. 

     - returns: RequestBuilder<NluDetectionResponse> 
     */
    open class func postLanguageunderstandingDomainVersionDetectWithRequestBuilder(domainId: String, domainVersionId: String, body: NluDetectionRequest) -> RequestBuilder<NluDetectionResponse> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/detect"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDetectionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Publish the draft NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainVersionPublish(domainId: String, domainVersionId: String, completion: @escaping ((_ data: NluDomainVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainVersionPublishWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId)
        requestBuilder.execute { (response: Response<NluDomainVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Publish the draft NLU Domain Version.
     - POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/publish
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    }, {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    } ],
    "name" : "name",
    "id" : "id",
    "entityTypeBindings" : [ {
      "entityType" : "entityType",
      "entityName" : "entityName"
    }, {
      "entityType" : "entityType",
      "entityName" : "entityName"
    } ],
    "additionalLanguages" : {
      "key" : {
        "utterances" : [ {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        }, {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        } ],
        "id" : "id"
      }
    },
    "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
  }, {
    "utterances" : [ {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    }, {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    } ],
    "name" : "name",
    "id" : "id",
    "entityTypeBindings" : [ {
      "entityType" : "entityType",
      "entityName" : "entityName"
    }, {
      "entityType" : "entityType",
      "entityName" : "entityName"
    } ],
    "additionalLanguages" : {
      "key" : {
        "utterances" : [ {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        }, {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        } ],
        "id" : "id"
      }
    },
    "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
  } ],
  "dateTrained" : "2000-01-23T04:56:07.000+00:00",
  "trainingStatus" : "Untrained",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "language" : "language",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "published" : true,
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "entities" : [ {
    "name" : "name",
    "type" : "type"
  }, {
    "name" : "name",
    "type" : "type"
  } ],
  "domain" : "{}",
  "entityTypes" : [ {
    "name" : "name",
    "description" : "description",
    "mechanism" : "{}"
  }, {
    "name" : "name",
    "description" : "description",
    "mechanism" : "{}"
  } ],
  "id" : "id",
  "evaluationStatus" : "Unevaluated"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 

     - returns: RequestBuilder<NluDomainVersion> 
     */
    open class func postLanguageunderstandingDomainVersionPublishWithRequestBuilder(domainId: String, domainVersionId: String) -> RequestBuilder<NluDomainVersion> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/publish"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomainVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Train the draft NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainVersionTrain(domainId: String, domainVersionId: String, completion: @escaping ((_ data: NluDomainVersionTrainingResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainVersionTrainWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId)
        requestBuilder.execute { (response: Response<NluDomainVersionTrainingResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Train the draft NLU Domain Version.
     - POST /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/train
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "message" : "message",
  "version" : {
    "intents" : [ {
      "utterances" : [ {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      }, {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      } ],
      "name" : "name",
      "id" : "id",
      "entityTypeBindings" : [ {
        "entityType" : "entityType",
        "entityName" : "entityName"
      }, {
        "entityType" : "entityType",
        "entityName" : "entityName"
      } ],
      "additionalLanguages" : {
        "key" : {
          "utterances" : [ {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          }, {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          } ],
          "id" : "id"
        }
      },
      "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
    }, {
      "utterances" : [ {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      }, {
        "id" : "id",
        "segments" : [ {
          "text" : "text",
          "entity" : "{}"
        }, {
          "text" : "text",
          "entity" : "{}"
        } ]
      } ],
      "name" : "name",
      "id" : "id",
      "entityTypeBindings" : [ {
        "entityType" : "entityType",
        "entityName" : "entityName"
      }, {
        "entityType" : "entityType",
        "entityName" : "entityName"
      } ],
      "additionalLanguages" : {
        "key" : {
          "utterances" : [ {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          }, {
            "id" : "id",
            "segments" : [ {
              "text" : "text",
              "entity" : "{}"
            }, {
              "text" : "text",
              "entity" : "{}"
            } ]
          } ],
          "id" : "id"
        }
      },
      "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+00:00",
    "trainingStatus" : "Untrained",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "language" : "language",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "published" : true,
    "datePublished" : "2000-01-23T04:56:07.000+00:00",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "entities" : [ {
      "name" : "name",
      "type" : "type"
    }, {
      "name" : "name",
      "type" : "type"
    } ],
    "domain" : "{}",
    "entityTypes" : [ {
      "name" : "name",
      "description" : "description",
      "mechanism" : "{}"
    }, {
      "name" : "name",
      "description" : "description",
      "mechanism" : "{}"
    } ],
    "id" : "id",
    "evaluationStatus" : "Unevaluated"
  }
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 

     - returns: RequestBuilder<NluDomainVersionTrainingResponse> 
     */
    open class func postLanguageunderstandingDomainVersionTrainWithRequestBuilder(domainId: String, domainVersionId: String) -> RequestBuilder<NluDomainVersionTrainingResponse> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}/train"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomainVersionTrainingResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Create an NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The NLU Domain Version to create. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomainVersions(domainId: String, body: NluDomainVersion, includeUtterances: Bool? = nil, completion: @escaping ((_ data: NluDomainVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainVersionsWithRequestBuilder(domainId: domainId, body: body, includeUtterances: includeUtterances)
        requestBuilder.execute { (response: Response<NluDomainVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an NLU Domain Version.
     - POST /api/v2/languageunderstanding/domains/{domainId}/versions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    }, {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    } ],
    "name" : "name",
    "id" : "id",
    "entityTypeBindings" : [ {
      "entityType" : "entityType",
      "entityName" : "entityName"
    }, {
      "entityType" : "entityType",
      "entityName" : "entityName"
    } ],
    "additionalLanguages" : {
      "key" : {
        "utterances" : [ {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        }, {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        } ],
        "id" : "id"
      }
    },
    "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
  }, {
    "utterances" : [ {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    }, {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    } ],
    "name" : "name",
    "id" : "id",
    "entityTypeBindings" : [ {
      "entityType" : "entityType",
      "entityName" : "entityName"
    }, {
      "entityType" : "entityType",
      "entityName" : "entityName"
    } ],
    "additionalLanguages" : {
      "key" : {
        "utterances" : [ {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        }, {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        } ],
        "id" : "id"
      }
    },
    "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
  } ],
  "dateTrained" : "2000-01-23T04:56:07.000+00:00",
  "trainingStatus" : "Untrained",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "language" : "language",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "published" : true,
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "entities" : [ {
    "name" : "name",
    "type" : "type"
  }, {
    "name" : "name",
    "type" : "type"
  } ],
  "domain" : "{}",
  "entityTypes" : [ {
    "name" : "name",
    "description" : "description",
    "mechanism" : "{}"
  }, {
    "name" : "name",
    "description" : "description",
    "mechanism" : "{}"
  } ],
  "id" : "id",
  "evaluationStatus" : "Unevaluated"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter body: (body) The NLU Domain Version to create. 
     - parameter includeUtterances: (query) Whether utterances for intent definition should be included when marshalling response. (optional)

     - returns: RequestBuilder<NluDomainVersion> 
     */
    open class func postLanguageunderstandingDomainVersionsWithRequestBuilder(domainId: String, body: NluDomainVersion, includeUtterances: Bool? = nil) -> RequestBuilder<NluDomainVersion> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeUtterances": includeUtterances
        ])

        let requestBuilder: RequestBuilder<NluDomainVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create an NLU Domain.
     
     - parameter body: (body) The NLU Domain to create. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingDomains(body: NluDomain, completion: @escaping ((_ data: NluDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingDomainsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<NluDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an NLU Domain.
     - POST /api/v2/languageunderstanding/domains
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "engineVersion" : "engineVersion",
  "lastPublishedVersion" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "language" : "language",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "draftVersion" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) The NLU Domain to create. 

     - returns: RequestBuilder<NluDomain> 
     */
    open class func postLanguageunderstandingDomainsWithRequestBuilder(body: NluDomain) -> RequestBuilder<NluDomain> {        
        let path = "/api/v2/languageunderstanding/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Create a new draft resource.
     
     - parameter minerId: (path) Miner ID 
     - parameter body: (body) Details for creating draft resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingMinerDrafts(minerId: String, body: Draft, completion: @escaping ((_ data: Draft?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingMinerDraftsWithRequestBuilder(minerId: minerId, body: body)
        requestBuilder.execute { (response: Response<Draft>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a new draft resource.
     - POST /api/v2/languageunderstanding/miners/{minerId}/drafts
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ "utterances", "utterances" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "utterances" : [ "utterances", "utterances" ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "topics" : [ {
    "conversationCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "phraseCount" : 5,
    "phrases" : [ "phrases", "phrases" ],
    "miner" : "{}",
    "utteranceCount" : 1,
    "conversationPercent" : 6.0274563
  }, {
    "conversationCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "phraseCount" : 5,
    "phrases" : [ "phrases", "phrases" ],
    "miner" : "{}",
    "utteranceCount" : 1,
    "conversationPercent" : 6.0274563
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "miner" : "{}"
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 
     - parameter body: (body) Details for creating draft resource 

     - returns: RequestBuilder<Draft> 
     */
    open class func postLanguageunderstandingMinerDraftsWithRequestBuilder(minerId: String, body: Draft) -> RequestBuilder<Draft> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/drafts"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Draft>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Start the mining process. Specify date range pair with mediaType, queueIds, participantType for mining data from Genesys Cloud. Specify only uploadKey for mining through an external file.
     
     - parameter minerId: (path) Miner ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingMinerExecute(minerId: String, body: MinerExecuteRequest? = nil, completion: @escaping ((_ data: Miner?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingMinerExecuteWithRequestBuilder(minerId: minerId, body: body)
        requestBuilder.execute { (response: Response<Miner>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Start the mining process. Specify date range pair with mediaType, queueIds, participantType for mining data from Genesys Cloud. Specify only uploadKey for mining through an external file.
     - POST /api/v2/languageunderstanding/miners/{minerId}/execute
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversationsFetchedCount" : 0,
  "getminedItemCount" : 1,
  "warningInfo" : "{}",
  "conversationsDateRangeStart" : "2019-06-20T00:00:00.000+0000",
  "selfUri" : "https://openapi-generator.tech",
  "participantType" : "Customer",
  "errorInfo" : "{}",
  "language" : "en-us",
  "mediaType" : "Chat",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "message" : "message",
  "minerType" : "Intent",
  "conversationDataUploaded" : true,
  "conversationsDateRangeEnd" : "2019-12-20T00:00:00.000+0000",
  "queueIds" : [ "queueIds", "queueIds" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
  "dateTriggered" : "2000-01-23T04:56:07.000+00:00",
  "latestDraftVersion" : "{}",
  "conversationsValidCount" : 6,
  "name" : "name",
  "id" : "id",
  "status" : "NotStarted"
}, statusCode=200}]
     
     - parameter minerId: (path) Miner ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Miner> 
     */
    open class func postLanguageunderstandingMinerExecuteWithRequestBuilder(minerId: String, body: MinerExecuteRequest? = nil) -> RequestBuilder<Miner> {        
        var path = "/api/v2/languageunderstanding/miners/{minerId}/execute"
        let minerIdPreEscape = "\(minerId)"
        let minerIdPostEscape = minerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{minerId}", with: minerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Miner>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a unique miner.
     
     - parameter body: (body) Details for creating a new miner resource. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguageunderstandingMiners(body: Miner, completion: @escaping ((_ data: Miner?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguageunderstandingMinersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Miner>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a unique miner.
     - POST /api/v2/languageunderstanding/miners
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversationsFetchedCount" : 0,
  "getminedItemCount" : 1,
  "warningInfo" : "{}",
  "conversationsDateRangeStart" : "2019-06-20T00:00:00.000+0000",
  "selfUri" : "https://openapi-generator.tech",
  "participantType" : "Customer",
  "errorInfo" : "{}",
  "language" : "en-us",
  "mediaType" : "Chat",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "message" : "message",
  "minerType" : "Intent",
  "conversationDataUploaded" : true,
  "conversationsDateRangeEnd" : "2019-12-20T00:00:00.000+0000",
  "queueIds" : [ "queueIds", "queueIds" ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
  "dateTriggered" : "2000-01-23T04:56:07.000+00:00",
  "latestDraftVersion" : "{}",
  "conversationsValidCount" : 6,
  "name" : "name",
  "id" : "id",
  "status" : "NotStarted"
}, statusCode=200}]
     
     - parameter body: (body) Details for creating a new miner resource. 

     - returns: RequestBuilder<Miner> 
     */
    open class func postLanguageunderstandingMinersWithRequestBuilder(body: Miner) -> RequestBuilder<Miner> {        
        let path = "/api/v2/languageunderstanding/miners"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Miner>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Update an NLU Domain Version.
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter body: (body) The updated NLU Domain Version. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLanguageunderstandingDomainVersion(domainId: String, domainVersionId: String, body: NluDomainVersion, completion: @escaping ((_ data: NluDomainVersion?,_ error: Error?) -> Void)) {
        let requestBuilder = putLanguageunderstandingDomainVersionWithRequestBuilder(domainId: domainId, domainVersionId: domainVersionId, body: body)
        requestBuilder.execute { (response: Response<NluDomainVersion>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an NLU Domain Version.
     - PUT /api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "intents" : [ {
    "utterances" : [ {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    }, {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    } ],
    "name" : "name",
    "id" : "id",
    "entityTypeBindings" : [ {
      "entityType" : "entityType",
      "entityName" : "entityName"
    }, {
      "entityType" : "entityType",
      "entityName" : "entityName"
    } ],
    "additionalLanguages" : {
      "key" : {
        "utterances" : [ {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        }, {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        } ],
        "id" : "id"
      }
    },
    "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
  }, {
    "utterances" : [ {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    }, {
      "id" : "id",
      "segments" : [ {
        "text" : "text",
        "entity" : "{}"
      }, {
        "text" : "text",
        "entity" : "{}"
      } ]
    } ],
    "name" : "name",
    "id" : "id",
    "entityTypeBindings" : [ {
      "entityType" : "entityType",
      "entityName" : "entityName"
    }, {
      "entityType" : "entityType",
      "entityName" : "entityName"
    } ],
    "additionalLanguages" : {
      "key" : {
        "utterances" : [ {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        }, {
          "id" : "id",
          "segments" : [ {
            "text" : "text",
            "entity" : "{}"
          }, {
            "text" : "text",
            "entity" : "{}"
          } ]
        } ],
        "id" : "id"
      }
    },
    "entityNameReferences" : [ "entityNameReferences", "entityNameReferences" ]
  } ],
  "dateTrained" : "2000-01-23T04:56:07.000+00:00",
  "trainingStatus" : "Untrained",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "language" : "language",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "published" : true,
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "entities" : [ {
    "name" : "name",
    "type" : "type"
  }, {
    "name" : "name",
    "type" : "type"
  } ],
  "domain" : "{}",
  "entityTypes" : [ {
    "name" : "name",
    "description" : "description",
    "mechanism" : "{}"
  }, {
    "name" : "name",
    "description" : "description",
    "mechanism" : "{}"
  } ],
  "id" : "id",
  "evaluationStatus" : "Unevaluated"
}, statusCode=200}]
     
     - parameter domainId: (path) ID of the NLU domain. 
     - parameter domainVersionId: (path) ID of the NLU domain version. 
     - parameter body: (body) The updated NLU Domain Version. 

     - returns: RequestBuilder<NluDomainVersion> 
     */
    open class func putLanguageunderstandingDomainVersionWithRequestBuilder(domainId: String, domainVersionId: String, body: NluDomainVersion) -> RequestBuilder<NluDomainVersion> {        
        var path = "/api/v2/languageunderstanding/domains/{domainId}/versions/{domainVersionId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let domainVersionIdPreEscape = "\(domainVersionId)"
        let domainVersionIdPostEscape = domainVersionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainVersionId}", with: domainVersionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<NluDomainVersion>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
