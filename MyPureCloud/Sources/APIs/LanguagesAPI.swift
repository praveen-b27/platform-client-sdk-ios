//
// LanguagesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LanguagesAPI {
    
    /**
     Delete Language (Deprecated)
     
     - parameter languageId: (path) Language ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLanguage(languageId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLanguageWithRequestBuilder(languageId: languageId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete Language (Deprecated)
     - DELETE /api/v2/languages/{languageId}
     - This endpoint is deprecated. Please see the Routing API (DELETE /api/v2/routing/languages/{languageId})
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter languageId: (path) Language ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLanguageWithRequestBuilder(languageId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/languages/{languageId}"
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Get Language (Deprecated)
     
     - parameter languageId: (path) Language ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguage(languageId: String, completion: @escaping ((_ data: Language?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguageWithRequestBuilder(languageId: languageId)
        requestBuilder.execute { (response: Response<Language>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Language (Deprecated)
     - GET /api/v2/languages/{languageId}
     - This endpoint is deprecated. Please see the Routing API (GET /api/v2/routing/languages/{languageId})
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "version" : "version"
}, statusCode=200}]
     
     - parameter languageId: (path) Language ID 

     - returns: RequestBuilder<Language> 
     */
    open class func getLanguageWithRequestBuilder(languageId: String) -> RequestBuilder<Language> {        
        var path = "/api/v2/languages/{languageId}"
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Language>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum SortOrder_getLanguages: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     Get the list of supported languages. (Deprecated)
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter name: (query) Name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguages(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getLanguages? = nil, name: String? = nil, completion: @escaping ((_ data: LanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguagesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, name: name)
        requestBuilder.execute { (response: Response<LanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of supported languages. (Deprecated)
     - GET /api/v2/languages
     - This endpoint is deprecated. Please see the Routing API (GET /api/v2/routing/languages)
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter name: (query) Name (optional)

     - returns: RequestBuilder<LanguageEntityListing> 
     */
    open class func getLanguagesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getLanguages? = nil, name: String? = nil) -> RequestBuilder<LanguageEntityListing> {        
        let path = "/api/v2/languages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "name": name
        ])

        let requestBuilder: RequestBuilder<LanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get all available languages for translation
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguagesTranslations(completion: @escaping ((_ data: AvailableTranslations?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguagesTranslationsWithRequestBuilder()
        requestBuilder.execute { (response: Response<AvailableTranslations>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all available languages for translation
     - GET /api/v2/languages/translations
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "builtin" : [ "builtin", "builtin" ],
  "orgSpecific" : [ "orgSpecific", "orgSpecific" ]
}, statusCode=200}]

     - returns: RequestBuilder<AvailableTranslations> 
     */
    open class func getLanguagesTranslationsWithRequestBuilder() -> RequestBuilder<AvailableTranslations> {        
        let path = "/api/v2/languages/translations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AvailableTranslations>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get the builtin translation for a language
     
     - parameter language: (query) The language of the builtin translation to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguagesTranslationsBuiltin(language: String, completion: @escaping ((_ data: [String:JSON]?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguagesTranslationsBuiltinWithRequestBuilder(language: language)
        requestBuilder.execute { (response: Response<[String:JSON]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the builtin translation for a language
     - GET /api/v2/languages/translations/builtin
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter language: (query) The language of the builtin translation to retrieve 

     - returns: RequestBuilder<[String:JSON]> 
     */
    open class func getLanguagesTranslationsBuiltinWithRequestBuilder(language: String) -> RequestBuilder<[String:JSON]> {        
        let path = "/api/v2/languages/translations/builtin"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": language
        ])

        let requestBuilder: RequestBuilder<[String:JSON]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get effective translation for an organization by language
     
     - parameter language: (query) The language of the translation to retrieve for the organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguagesTranslationsOrganization(language: String, completion: @escaping ((_ data: [String:JSON]?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguagesTranslationsOrganizationWithRequestBuilder(language: language)
        requestBuilder.execute { (response: Response<[String:JSON]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get effective translation for an organization by language
     - GET /api/v2/languages/translations/organization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter language: (query) The language of the translation to retrieve for the organization 

     - returns: RequestBuilder<[String:JSON]> 
     */
    open class func getLanguagesTranslationsOrganizationWithRequestBuilder(language: String) -> RequestBuilder<[String:JSON]> {        
        let path = "/api/v2/languages/translations/organization"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": language
        ])

        let requestBuilder: RequestBuilder<[String:JSON]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get effective language translation for a user
     
     - parameter userId: (path) The user id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLanguagesTranslationsUser(userId: String, completion: @escaping ((_ data: [String:JSON]?,_ error: Error?) -> Void)) {
        let requestBuilder = getLanguagesTranslationsUserWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<[String:JSON]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get effective language translation for a user
     - GET /api/v2/languages/translations/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) The user id 

     - returns: RequestBuilder<[String:JSON]> 
     */
    open class func getLanguagesTranslationsUserWithRequestBuilder(userId: String) -> RequestBuilder<[String:JSON]> {        
        var path = "/api/v2/languages/translations/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String:JSON]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Create Language (Deprecated)
     
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLanguages(body: Language, completion: @escaping ((_ data: Language?,_ error: Error?) -> Void)) {
        let requestBuilder = postLanguagesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Language>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create Language (Deprecated)
     - POST /api/v2/languages
     - This endpoint is deprecated. Please see the Routing API. (POST /api/v2/routing/languages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "version" : "version"
}, statusCode=200}]
     
     - parameter body: (body) Language 

     - returns: RequestBuilder<Language> 
     */
    open class func postLanguagesWithRequestBuilder(body: Language) -> RequestBuilder<Language> {        
        let path = "/api/v2/languages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Language>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
