//
// LearningAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LearningAPI {
    
    /**
     Delete a learning assignment
     
     - parameter assignmentId: (path) The Learning Assignment ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLearningAssignment(assignmentId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLearningAssignmentWithRequestBuilder(assignmentId: assignmentId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a learning assignment
     - DELETE /api/v2/learning/assignments/{assignmentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter assignmentId: (path) The Learning Assignment ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLearningAssignmentWithRequestBuilder(assignmentId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/learning/assignments/{assignmentId}"
        let assignmentIdPreEscape = "\(assignmentId)"
        let assignmentIdPostEscape = assignmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignmentId}", with: assignmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a learning module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLearningModule(moduleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteLearningModuleWithRequestBuilder(moduleId: moduleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a learning module
     - DELETE /api/v2/learning/modules/{moduleId}
     - This will delete a learning module if it is unpublished or it will delete a published and archived learning module
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter moduleId: (path) The ID of the learning module 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLearningModuleWithRequestBuilder(moduleId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/learning/modules/{moduleId}"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Get Learning Assignment
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter expand: (query) Fields to expand in response (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningAssignment(assignmentId: String, expand: [String]? = nil, completion: @escaping ((_ data: LearningAssignment?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningAssignmentWithRequestBuilder(assignmentId: assignmentId, expand: expand)
        requestBuilder.execute { (response: Response<LearningAssignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Learning Assignment
     - GET /api/v2/learning/assignments/{assignmentId}
     - Permission not required if you are the assigned user of the learning assignment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isPassed" : true,
  "isManual" : true,
  "selfUri" : "https://openapi-generator.tech",
  "module" : "{}",
  "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "version" : 6,
  "isRule" : true,
  "assessment" : "{}",
  "assessmentForm" : "{}",
  "lengthInMinutes" : 1,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "isOverdue" : true,
  "isLatest" : true,
  "createdBy" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "percentageScore" : 0.8008282,
  "state" : "Assigned",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter expand: (query) Fields to expand in response (optional)

     - returns: RequestBuilder<LearningAssignment> 
     */
    open class func getLearningAssignmentWithRequestBuilder(assignmentId: String, expand: [String]? = nil) -> RequestBuilder<LearningAssignment> {        
        var path = "/api/v2/learning/assignments/{assignmentId}"
        let assignmentIdPreEscape = "\(assignmentId)"
        let assignmentIdPostEscape = assignmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignmentId}", with: assignmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<LearningAssignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Overdue_getLearningAssignments: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    public enum Pass_getLearningAssignments: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    public enum SortOrder_getLearningAssignments: String { 
        case asc = "Asc"
        case desc = "Desc"
    }

    
    
    public enum SortBy_getLearningAssignments: String { 
        case recommendedCompletionDate = "RecommendedCompletionDate"
        case dateModified = "DateModified"
    }

    
    
    
    
    
    /**
     List of Learning module Assignments
     
     - parameter moduleId: (query) Specifies the ID of the learning module. Fetch assignments for learning module ID (optional)
     - parameter interval: (query) Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if only the non-overdue (overdue is \&quot;False\&quot;) or overdue (overdue is \&quot;True\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or if the overdue parameter is not supplied, all assignments are returned (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) assignments (completed with assessment)are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all assignments are returned (optional)
     - parameter minPercentageScore: (query) The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter maxPercentageScore: (query) The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter sortOrder: (query) Specifies result set sort order; if not specified, default sort order is descending (Desc) (optional)
     - parameter sortBy: (query) Specifies which field to sort the results by, default sort is by recommendedCompletionDate (optional)
     - parameter userId: (query) Specifies the list of user IDs to be queried, up to 100 user IDs. (optional)
     - parameter types: (query) Specifies the module types to filter by (optional)
     - parameter states: (query) Specifies the assignment states to filter by (optional)
     - parameter expand: (query) Specifies the expand option for returning additional information (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningAssignments(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getLearningAssignments? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, pass: Pass_getLearningAssignments? = nil, minPercentageScore: Float? = nil, maxPercentageScore: Float? = nil, sortOrder: SortOrder_getLearningAssignments? = nil, sortBy: SortBy_getLearningAssignments? = nil, userId: [String]? = nil, types: [String]? = nil, states: [String]? = nil, expand: [String]? = nil, completion: @escaping ((_ data: LearningAssignmentsDomainEntity?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningAssignmentsWithRequestBuilder(moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pageSize: pageSize, pageNumber: pageNumber, pass: pass, minPercentageScore: minPercentageScore, maxPercentageScore: maxPercentageScore, sortOrder: sortOrder, sortBy: sortBy, userId: userId, types: types, states: states, expand: expand)
        requestBuilder.execute { (response: Response<LearningAssignmentsDomainEntity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List of Learning module Assignments
     - GET /api/v2/learning/assignments
     - Either moduleId or user value is required
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "isPassed" : true,
    "isManual" : true,
    "selfUri" : "https://openapi-generator.tech",
    "module" : "{}",
    "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "version" : 6,
    "isRule" : true,
    "assessment" : "{}",
    "assessmentForm" : "{}",
    "lengthInMinutes" : 1,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "state" : "Assigned",
    "user" : "{}"
  }, {
    "isPassed" : true,
    "isManual" : true,
    "selfUri" : "https://openapi-generator.tech",
    "module" : "{}",
    "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "version" : 6,
    "isRule" : true,
    "assessment" : "{}",
    "assessmentForm" : "{}",
    "lengthInMinutes" : 1,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "state" : "Assigned",
    "user" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter moduleId: (query) Specifies the ID of the learning module. Fetch assignments for learning module ID (optional)
     - parameter interval: (query) Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if only the non-overdue (overdue is \&quot;False\&quot;) or overdue (overdue is \&quot;True\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or if the overdue parameter is not supplied, all assignments are returned (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) assignments (completed with assessment)are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all assignments are returned (optional)
     - parameter minPercentageScore: (query) The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter maxPercentageScore: (query) The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter sortOrder: (query) Specifies result set sort order; if not specified, default sort order is descending (Desc) (optional)
     - parameter sortBy: (query) Specifies which field to sort the results by, default sort is by recommendedCompletionDate (optional)
     - parameter userId: (query) Specifies the list of user IDs to be queried, up to 100 user IDs. (optional)
     - parameter types: (query) Specifies the module types to filter by (optional)
     - parameter states: (query) Specifies the assignment states to filter by (optional)
     - parameter expand: (query) Specifies the expand option for returning additional information (optional)

     - returns: RequestBuilder<LearningAssignmentsDomainEntity> 
     */
    open class func getLearningAssignmentsWithRequestBuilder(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getLearningAssignments? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, pass: Pass_getLearningAssignments? = nil, minPercentageScore: Float? = nil, maxPercentageScore: Float? = nil, sortOrder: SortOrder_getLearningAssignments? = nil, sortBy: SortBy_getLearningAssignments? = nil, userId: [String]? = nil, types: [String]? = nil, states: [String]? = nil, expand: [String]? = nil) -> RequestBuilder<LearningAssignmentsDomainEntity> {        
        let path = "/api/v2/learning/assignments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "moduleId": moduleId, 
            "interval": interval, 
            "completionInterval": completionInterval, 
            "overdue": overdue?.rawValue, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pass": pass?.rawValue, 
            "minPercentageScore": minPercentageScore, 
            "maxPercentageScore": maxPercentageScore, 
            "sortOrder": sortOrder?.rawValue, 
            "sortBy": sortBy?.rawValue, 
            "userId": userId, 
            "types": types, 
            "states": states, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<LearningAssignmentsDomainEntity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Overdue_getLearningAssignmentsMe: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    public enum Pass_getLearningAssignmentsMe: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    public enum SortOrder_getLearningAssignmentsMe: String { 
        case asc = "Asc"
        case desc = "Desc"
    }

    
    
    public enum SortBy_getLearningAssignmentsMe: String { 
        case recommendedCompletionDate = "RecommendedCompletionDate"
        case dateModified = "DateModified"
    }

    
    
    
    
    /**
     List of Learning Assignments assigned to current user
     
     - parameter moduleId: (query) Specifies the ID of the learning module. Fetch assignments for learning module ID (optional)
     - parameter interval: (query) Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if only the non-overdue (overdue is \&quot;False\&quot;) or overdue (overdue is \&quot;True\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or if the overdue parameter is not supplied, all assignments are returned (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) assignments (completed with assessment)are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all assignments are returned (optional)
     - parameter minPercentageScore: (query) The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter maxPercentageScore: (query) The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter sortOrder: (query) Specifies result set sort order; if not specified, default sort order is descending (Desc) (optional)
     - parameter sortBy: (query) Specifies which field to sort the results by, default sort is by recommendedCompletionDate (optional)
     - parameter types: (query) Specifies the module types to filter by (optional)
     - parameter states: (query) Specifies the assignment states to filter by (optional)
     - parameter expand: (query) Specifies the expand option for returning additional information (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningAssignmentsMe(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getLearningAssignmentsMe? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, pass: Pass_getLearningAssignmentsMe? = nil, minPercentageScore: Float? = nil, maxPercentageScore: Float? = nil, sortOrder: SortOrder_getLearningAssignmentsMe? = nil, sortBy: SortBy_getLearningAssignmentsMe? = nil, types: [String]? = nil, states: [String]? = nil, expand: [String]? = nil, completion: @escaping ((_ data: LearningAssignmentsDomainEntity?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningAssignmentsMeWithRequestBuilder(moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pageSize: pageSize, pageNumber: pageNumber, pass: pass, minPercentageScore: minPercentageScore, maxPercentageScore: maxPercentageScore, sortOrder: sortOrder, sortBy: sortBy, types: types, states: states, expand: expand)
        requestBuilder.execute { (response: Response<LearningAssignmentsDomainEntity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List of Learning Assignments assigned to current user
     - GET /api/v2/learning/assignments/me
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "isPassed" : true,
    "isManual" : true,
    "selfUri" : "https://openapi-generator.tech",
    "module" : "{}",
    "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "version" : 6,
    "isRule" : true,
    "assessment" : "{}",
    "assessmentForm" : "{}",
    "lengthInMinutes" : 1,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "state" : "Assigned",
    "user" : "{}"
  }, {
    "isPassed" : true,
    "isManual" : true,
    "selfUri" : "https://openapi-generator.tech",
    "module" : "{}",
    "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "version" : 6,
    "isRule" : true,
    "assessment" : "{}",
    "assessmentForm" : "{}",
    "lengthInMinutes" : 1,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "state" : "Assigned",
    "user" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter moduleId: (query) Specifies the ID of the learning module. Fetch assignments for learning module ID (optional)
     - parameter interval: (query) Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if only the non-overdue (overdue is \&quot;False\&quot;) or overdue (overdue is \&quot;True\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or if the overdue parameter is not supplied, all assignments are returned (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) assignments (completed with assessment)are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all assignments are returned (optional)
     - parameter minPercentageScore: (query) The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter maxPercentageScore: (query) The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive) (optional)
     - parameter sortOrder: (query) Specifies result set sort order; if not specified, default sort order is descending (Desc) (optional)
     - parameter sortBy: (query) Specifies which field to sort the results by, default sort is by recommendedCompletionDate (optional)
     - parameter types: (query) Specifies the module types to filter by (optional)
     - parameter states: (query) Specifies the assignment states to filter by (optional)
     - parameter expand: (query) Specifies the expand option for returning additional information (optional)

     - returns: RequestBuilder<LearningAssignmentsDomainEntity> 
     */
    open class func getLearningAssignmentsMeWithRequestBuilder(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getLearningAssignmentsMe? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, pass: Pass_getLearningAssignmentsMe? = nil, minPercentageScore: Float? = nil, maxPercentageScore: Float? = nil, sortOrder: SortOrder_getLearningAssignmentsMe? = nil, sortBy: SortBy_getLearningAssignmentsMe? = nil, types: [String]? = nil, states: [String]? = nil, expand: [String]? = nil) -> RequestBuilder<LearningAssignmentsDomainEntity> {        
        let path = "/api/v2/learning/assignments/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "moduleId": moduleId, 
            "interval": interval, 
            "completionInterval": completionInterval, 
            "overdue": overdue?.rawValue, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pass": pass?.rawValue, 
            "minPercentageScore": minPercentageScore, 
            "maxPercentageScore": maxPercentageScore, 
            "sortOrder": sortOrder?.rawValue, 
            "sortBy": sortBy?.rawValue, 
            "types": types, 
            "states": states, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<LearningAssignmentsDomainEntity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a learning module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModule(moduleId: String, expand: [String]? = nil, completion: @escaping ((_ data: LearningModule?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModuleWithRequestBuilder(moduleId: moduleId, expand: expand)
        requestBuilder.execute { (response: Response<LearningModule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a learning module
     - GET /api/v2/learning/modules/{moduleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "reassignSummaryData" : "{}",
  "archivalMode" : "Graceful",
  "isArchived" : true,
  "isPublished" : true,
  "selfUri" : "https://openapi-generator.tech",
  "externalId" : "externalId",
  "rule" : "{}",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "source" : "UserCreated",
  "coverArt" : "{}",
  "type" : "Informational",
  "version" : 0,
  "completionTimeInDays" : 6,
  "summaryData" : "{}",
  "informSteps" : [ {
    "displayName" : "displayName",
    "name" : "name",
    "description" : "description",
    "type" : "Url",
    "value" : "value",
    "contentType" : "contentType",
    "sharingUri" : "sharingUri",
    "order" : 1
  }, {
    "displayName" : "displayName",
    "name" : "name",
    "description" : "description",
    "type" : "Url",
    "value" : "value",
    "contentType" : "contentType",
    "sharingUri" : "sharingUri",
    "order" : 1
  } ],
  "assessmentForm" : "{}",
  "lengthInMinutes" : 5,
  "excludedFromCatalog" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "name" : "name",
  "modifiedBy" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)

     - returns: RequestBuilder<LearningModule> 
     */
    open class func getLearningModuleWithRequestBuilder(moduleId: String, expand: [String]? = nil) -> RequestBuilder<LearningModule> {        
        var path = "/api/v2/learning/modules/{moduleId}"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<LearningModule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a specific Learning Module job status
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter jobId: (path) The ID of the learning module job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModuleJob(moduleId: String, jobId: String, completion: @escaping ((_ data: LearningModuleJobResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModuleJobWithRequestBuilder(moduleId: moduleId, jobId: jobId)
        requestBuilder.execute { (response: Response<LearningModuleJobResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific Learning Module job status
     - GET /api/v2/learning/modules/{moduleId}/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "status" : "Accepted"
}, statusCode=200}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter jobId: (path) The ID of the learning module job 

     - returns: RequestBuilder<LearningModuleJobResponse> 
     */
    open class func getLearningModuleJobWithRequestBuilder(moduleId: String, jobId: String) -> RequestBuilder<LearningModuleJobResponse> {        
        var path = "/api/v2/learning/modules/{moduleId}/jobs/{jobId}"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModuleJobResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a learning module rule
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModuleRule(moduleId: String, completion: @escaping ((_ data: LearningModuleRule?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModuleRuleWithRequestBuilder(moduleId: moduleId)
        requestBuilder.execute { (response: Response<LearningModuleRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a learning module rule
     - GET /api/v2/learning/modules/{moduleId}/rule
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "parts" : [ {
    "selector" : "AcdSkills",
    "operation" : "Include",
    "value" : [ "value", "value" ],
    "order" : 0
  }, {
    "selector" : "AcdSkills",
    "operation" : "Include",
    "value" : [ "value", "value" ],
    "order" : 0
  } ],
  "id" : "id",
  "isActive" : true
}, statusCode=200}]
     
     - parameter moduleId: (path) The ID of the learning module 

     - returns: RequestBuilder<LearningModuleRule> 
     */
    open class func getLearningModuleRuleWithRequestBuilder(moduleId: String) -> RequestBuilder<LearningModuleRule> {        
        var path = "/api/v2/learning/modules/{moduleId}/rule"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModuleRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Get specific version of a published module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter versionId: (path) The version of learning module 
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModuleVersion(moduleId: String, versionId: String, expand: [String]? = nil, completion: @escaping ((_ data: LearningModule?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModuleVersionWithRequestBuilder(moduleId: moduleId, versionId: versionId, expand: expand)
        requestBuilder.execute { (response: Response<LearningModule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get specific version of a published module
     - GET /api/v2/learning/modules/{moduleId}/versions/{versionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "reassignSummaryData" : "{}",
  "archivalMode" : "Graceful",
  "isArchived" : true,
  "isPublished" : true,
  "selfUri" : "https://openapi-generator.tech",
  "externalId" : "externalId",
  "rule" : "{}",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "source" : "UserCreated",
  "coverArt" : "{}",
  "type" : "Informational",
  "version" : 0,
  "completionTimeInDays" : 6,
  "summaryData" : "{}",
  "informSteps" : [ {
    "displayName" : "displayName",
    "name" : "name",
    "description" : "description",
    "type" : "Url",
    "value" : "value",
    "contentType" : "contentType",
    "sharingUri" : "sharingUri",
    "order" : 1
  }, {
    "displayName" : "displayName",
    "name" : "name",
    "description" : "description",
    "type" : "Url",
    "value" : "value",
    "contentType" : "contentType",
    "sharingUri" : "sharingUri",
    "order" : 1
  } ],
  "assessmentForm" : "{}",
  "lengthInMinutes" : 5,
  "excludedFromCatalog" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "name" : "name",
  "modifiedBy" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter versionId: (path) The version of learning module 
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)

     - returns: RequestBuilder<LearningModule> 
     */
    open class func getLearningModuleVersionWithRequestBuilder(moduleId: String, versionId: String, expand: [String]? = nil) -> RequestBuilder<LearningModule> {        
        var path = "/api/v2/learning/modules/{moduleId}/versions/{versionId}"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let versionIdPreEscape = "\(versionId)"
        let versionIdPostEscape = versionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{versionId}", with: versionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<LearningModule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum SortOrder_getLearningModules: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    public enum SortBy_getLearningModules: String { 
        case name = "name"
        case createddate = "createddate"
        case percentpassed = "percentpassed"
        case averagescore = "averagescore"
    }

    
    
    
    
    public enum IsPublished_getLearningModules: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    /**
     Get all learning modules of an organization
     
     - parameter isArchived: (query) Archive status (optional)
     - parameter types: (query) Specifies the module types. (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter searchTerm: (query) Search Term (searchable by name) (optional)
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)
     - parameter isPublished: (query) Specifies if only the Unpublished (isPublished is \&quot;False\&quot;) or Published (isPublished is \&quot;True\&quot;) modules are returned. If isPublished is \&quot;Any\&quot; or omitted, both types are returned (optional)
     - parameter statuses: (query) Specifies the module statuses to filter by (optional)
     - parameter externalIds: (query) Specifies the module external IDs to filter by. Only one ID is allowed (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModules(isArchived: Bool? = nil, types: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getLearningModules? = nil, sortBy: SortBy_getLearningModules? = nil, searchTerm: String? = nil, expand: [String]? = nil, isPublished: IsPublished_getLearningModules? = nil, statuses: [String]? = nil, externalIds: [String]? = nil, completion: @escaping ((_ data: LearningModulesDomainEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModulesWithRequestBuilder(isArchived: isArchived, types: types, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, sortBy: sortBy, searchTerm: searchTerm, expand: expand, isPublished: isPublished, statuses: statuses, externalIds: externalIds)
        requestBuilder.execute { (response: Response<LearningModulesDomainEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all learning modules of an organization
     - GET /api/v2/learning/modules
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "reassignSummaryData" : "{}",
    "archivalMode" : "Graceful",
    "isArchived" : true,
    "isPublished" : true,
    "selfUri" : "https://openapi-generator.tech",
    "externalId" : "externalId",
    "rule" : "{}",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "source" : "UserCreated",
    "coverArt" : "{}",
    "type" : "Informational",
    "version" : 0,
    "completionTimeInDays" : 6,
    "summaryData" : "{}",
    "informSteps" : [ {
      "displayName" : "displayName",
      "name" : "name",
      "description" : "description",
      "type" : "Url",
      "value" : "value",
      "contentType" : "contentType",
      "sharingUri" : "sharingUri",
      "order" : 1
    }, {
      "displayName" : "displayName",
      "name" : "name",
      "description" : "description",
      "type" : "Url",
      "value" : "value",
      "contentType" : "contentType",
      "sharingUri" : "sharingUri",
      "order" : 1
    } ],
    "assessmentForm" : "{}",
    "lengthInMinutes" : 5,
    "excludedFromCatalog" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "name" : "name",
    "modifiedBy" : "{}",
    "id" : "id"
  }, {
    "reassignSummaryData" : "{}",
    "archivalMode" : "Graceful",
    "isArchived" : true,
    "isPublished" : true,
    "selfUri" : "https://openapi-generator.tech",
    "externalId" : "externalId",
    "rule" : "{}",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "source" : "UserCreated",
    "coverArt" : "{}",
    "type" : "Informational",
    "version" : 0,
    "completionTimeInDays" : 6,
    "summaryData" : "{}",
    "informSteps" : [ {
      "displayName" : "displayName",
      "name" : "name",
      "description" : "description",
      "type" : "Url",
      "value" : "value",
      "contentType" : "contentType",
      "sharingUri" : "sharingUri",
      "order" : 1
    }, {
      "displayName" : "displayName",
      "name" : "name",
      "description" : "description",
      "type" : "Url",
      "value" : "value",
      "contentType" : "contentType",
      "sharingUri" : "sharingUri",
      "order" : 1
    } ],
    "assessmentForm" : "{}",
    "lengthInMinutes" : 5,
    "excludedFromCatalog" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "name" : "name",
    "modifiedBy" : "{}",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter isArchived: (query) Archive status (optional)
     - parameter types: (query) Specifies the module types. (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter searchTerm: (query) Search Term (searchable by name) (optional)
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)
     - parameter isPublished: (query) Specifies if only the Unpublished (isPublished is \&quot;False\&quot;) or Published (isPublished is \&quot;True\&quot;) modules are returned. If isPublished is \&quot;Any\&quot; or omitted, both types are returned (optional)
     - parameter statuses: (query) Specifies the module statuses to filter by (optional)
     - parameter externalIds: (query) Specifies the module external IDs to filter by. Only one ID is allowed (optional)

     - returns: RequestBuilder<LearningModulesDomainEntityListing> 
     */
    open class func getLearningModulesWithRequestBuilder(isArchived: Bool? = nil, types: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getLearningModules? = nil, sortBy: SortBy_getLearningModules? = nil, searchTerm: String? = nil, expand: [String]? = nil, isPublished: IsPublished_getLearningModules? = nil, statuses: [String]? = nil, externalIds: [String]? = nil) -> RequestBuilder<LearningModulesDomainEntityListing> {        
        let path = "/api/v2/learning/modules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "isArchived": isArchived, 
            "types": types, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "sortBy": sortBy?.rawValue, 
            "searchTerm": searchTerm, 
            "expand": expand, 
            "isPublished": isPublished?.rawValue, 
            "statuses": statuses, 
            "externalIds": externalIds
        ])

        let requestBuilder: RequestBuilder<LearningModulesDomainEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum Overdue_getLearningModulesAssignments: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    /**
     Get all learning modules of an organization including assignments for a specific user
     
     - parameter userIds: (query) The IDs of the users to include 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter searchTerm: (query) Search Term (searches by name and description) (optional)
     - parameter overdue: (query) Specifies if only modules with overdue/not overdue (overdue is \&quot;True\&quot; or \&quot;False\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or omitted, both are returned and can including modules that are unassigned. (optional)
     - parameter assignmentStates: (query) Specifies the assignment states to return. (optional)
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModulesAssignments(userIds: [String], pageSize: Int? = nil, pageNumber: Int? = nil, searchTerm: String? = nil, overdue: Overdue_getLearningModulesAssignments? = nil, assignmentStates: [String]? = nil, expand: [String]? = nil, completion: @escaping ((_ data: AssignedLearningModuleDomainEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModulesAssignmentsWithRequestBuilder(userIds: userIds, pageSize: pageSize, pageNumber: pageNumber, searchTerm: searchTerm, overdue: overdue, assignmentStates: assignmentStates, expand: expand)
        requestBuilder.execute { (response: Response<AssignedLearningModuleDomainEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all learning modules of an organization including assignments for a specific user
     - GET /api/v2/learning/modules/assignments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "pageCount" : 7,
  "pageNumber" : 5,
  "entities" : [ {
    "reassignSummaryData" : "{}",
    "archivalMode" : "Graceful",
    "isArchived" : true,
    "rule" : "{}",
    "description" : "description",
    "source" : "UserCreated",
    "type" : "Informational",
    "excludedFromCatalog" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "isPublished" : true,
    "selfUri" : "https://openapi-generator.tech",
    "externalId" : "externalId",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "coverArt" : "{}",
    "version" : 0,
    "completionTimeInDays" : 6,
    "summaryData" : "{}",
    "informSteps" : [ {
      "displayName" : "displayName",
      "name" : "name",
      "description" : "description",
      "type" : "Url",
      "value" : "value",
      "contentType" : "contentType",
      "sharingUri" : "sharingUri",
      "order" : 1
    }, {
      "displayName" : "displayName",
      "name" : "name",
      "description" : "description",
      "type" : "Url",
      "value" : "value",
      "contentType" : "contentType",
      "sharingUri" : "sharingUri",
      "order" : 1
    } ],
    "assessmentForm" : "{}",
    "lengthInMinutes" : 1,
    "createdBy" : "{}",
    "name" : "name",
    "currentAssignments" : [ {
      "isPassed" : true,
      "isManual" : true,
      "selfUri" : "https://openapi-generator.tech",
      "module" : "{}",
      "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "version" : 6,
      "isRule" : true,
      "assessment" : "{}",
      "assessmentForm" : "{}",
      "lengthInMinutes" : 1,
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "isOverdue" : true,
      "isLatest" : true,
      "createdBy" : "{}",
      "modifiedBy" : "{}",
      "id" : "id",
      "percentageScore" : 0.8008282,
      "state" : "Assigned",
      "user" : "{}"
    }, {
      "isPassed" : true,
      "isManual" : true,
      "selfUri" : "https://openapi-generator.tech",
      "module" : "{}",
      "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "version" : 6,
      "isRule" : true,
      "assessment" : "{}",
      "assessmentForm" : "{}",
      "lengthInMinutes" : 1,
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "isOverdue" : true,
      "isLatest" : true,
      "createdBy" : "{}",
      "modifiedBy" : "{}",
      "id" : "id",
      "percentageScore" : 0.8008282,
      "state" : "Assigned",
      "user" : "{}"
    } ]
  }, {
    "reassignSummaryData" : "{}",
    "archivalMode" : "Graceful",
    "isArchived" : true,
    "rule" : "{}",
    "description" : "description",
    "source" : "UserCreated",
    "type" : "Informational",
    "excludedFromCatalog" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "isPublished" : true,
    "selfUri" : "https://openapi-generator.tech",
    "externalId" : "externalId",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "coverArt" : "{}",
    "version" : 0,
    "completionTimeInDays" : 6,
    "summaryData" : "{}",
    "informSteps" : [ {
      "displayName" : "displayName",
      "name" : "name",
      "description" : "description",
      "type" : "Url",
      "value" : "value",
      "contentType" : "contentType",
      "sharingUri" : "sharingUri",
      "order" : 1
    }, {
      "displayName" : "displayName",
      "name" : "name",
      "description" : "description",
      "type" : "Url",
      "value" : "value",
      "contentType" : "contentType",
      "sharingUri" : "sharingUri",
      "order" : 1
    } ],
    "assessmentForm" : "{}",
    "lengthInMinutes" : 1,
    "createdBy" : "{}",
    "name" : "name",
    "currentAssignments" : [ {
      "isPassed" : true,
      "isManual" : true,
      "selfUri" : "https://openapi-generator.tech",
      "module" : "{}",
      "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "version" : 6,
      "isRule" : true,
      "assessment" : "{}",
      "assessmentForm" : "{}",
      "lengthInMinutes" : 1,
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "isOverdue" : true,
      "isLatest" : true,
      "createdBy" : "{}",
      "modifiedBy" : "{}",
      "id" : "id",
      "percentageScore" : 0.8008282,
      "state" : "Assigned",
      "user" : "{}"
    }, {
      "isPassed" : true,
      "isManual" : true,
      "selfUri" : "https://openapi-generator.tech",
      "module" : "{}",
      "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "version" : 6,
      "isRule" : true,
      "assessment" : "{}",
      "assessmentForm" : "{}",
      "lengthInMinutes" : 1,
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "isOverdue" : true,
      "isLatest" : true,
      "createdBy" : "{}",
      "modifiedBy" : "{}",
      "id" : "id",
      "percentageScore" : 0.8008282,
      "state" : "Assigned",
      "user" : "{}"
    } ]
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 5,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userIds: (query) The IDs of the users to include 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter searchTerm: (query) Search Term (searches by name and description) (optional)
     - parameter overdue: (query) Specifies if only modules with overdue/not overdue (overdue is \&quot;True\&quot; or \&quot;False\&quot;) assignments are returned. If overdue is \&quot;Any\&quot; or omitted, both are returned and can including modules that are unassigned. (optional)
     - parameter assignmentStates: (query) Specifies the assignment states to return. (optional)
     - parameter expand: (query) Fields to expand in response(case insensitive) (optional)

     - returns: RequestBuilder<AssignedLearningModuleDomainEntityListing> 
     */
    open class func getLearningModulesAssignmentsWithRequestBuilder(userIds: [String], pageSize: Int? = nil, pageNumber: Int? = nil, searchTerm: String? = nil, overdue: Overdue_getLearningModulesAssignments? = nil, assignmentStates: [String]? = nil, expand: [String]? = nil) -> RequestBuilder<AssignedLearningModuleDomainEntityListing> {        
        let path = "/api/v2/learning/modules/assignments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userIds": userIds, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "searchTerm": searchTerm, 
            "overdue": overdue?.rawValue, 
            "assignmentStates": assignmentStates, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<AssignedLearningModuleDomainEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a specific Learning Module cover art using ID
     
     - parameter coverArtId: (path) Key identifier for the cover art 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLearningModulesCoverartCoverArtId(coverArtId: String, completion: @escaping ((_ data: LearningModuleCoverArtResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getLearningModulesCoverartCoverArtIdWithRequestBuilder(coverArtId: coverArtId)
        requestBuilder.execute { (response: Response<LearningModuleCoverArtResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific Learning Module cover art using ID
     - GET /api/v2/learning/modules/coverart/{coverArtId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "thumbnails" : [ {
    "resolution" : "resolution",
    "url" : "url"
  }, {
    "resolution" : "resolution",
    "url" : "url"
  } ],
  "url" : "url"
}, statusCode=200}]
     
     - parameter coverArtId: (path) Key identifier for the cover art 

     - returns: RequestBuilder<LearningModuleCoverArtResponse> 
     */
    open class func getLearningModulesCoverartCoverArtIdWithRequestBuilder(coverArtId: String) -> RequestBuilder<LearningModuleCoverArtResponse> {        
        var path = "/api/v2/learning/modules/coverart/{coverArtId}"
        let coverArtIdPreEscape = "\(coverArtId)"
        let coverArtIdPostEscape = coverArtIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{coverArtId}", with: coverArtIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModuleCoverArtResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Update Learning Assignment
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter body: (body) The Learning Assignment to be updated (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchLearningAssignment(assignmentId: String, body: LearningAssignmentUpdate? = nil, completion: @escaping ((_ data: LearningAssignment?,_ error: Error?) -> Void)) {
        let requestBuilder = patchLearningAssignmentWithRequestBuilder(assignmentId: assignmentId, body: body)
        requestBuilder.execute { (response: Response<LearningAssignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update Learning Assignment
     - PATCH /api/v2/learning/assignments/{assignmentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isPassed" : true,
  "isManual" : true,
  "selfUri" : "https://openapi-generator.tech",
  "module" : "{}",
  "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "version" : 6,
  "isRule" : true,
  "assessment" : "{}",
  "assessmentForm" : "{}",
  "lengthInMinutes" : 1,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "isOverdue" : true,
  "isLatest" : true,
  "createdBy" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "percentageScore" : 0.8008282,
  "state" : "Assigned",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter body: (body) The Learning Assignment to be updated (optional)

     - returns: RequestBuilder<LearningAssignment> 
     */
    open class func patchLearningAssignmentWithRequestBuilder(assignmentId: String, body: LearningAssignmentUpdate? = nil) -> RequestBuilder<LearningAssignment> {        
        var path = "/api/v2/learning/assignments/{assignmentId}"
        let assignmentIdPreEscape = "\(assignmentId)"
        let assignmentIdPostEscape = assignmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignmentId}", with: assignmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Reschedule Learning Assignment
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter body: (body) The Learning assignment reschedule model (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchLearningAssignmentReschedule(assignmentId: String, body: LearningAssignmentReschedule? = nil, completion: @escaping ((_ data: LearningAssignment?,_ error: Error?) -> Void)) {
        let requestBuilder = patchLearningAssignmentRescheduleWithRequestBuilder(assignmentId: assignmentId, body: body)
        requestBuilder.execute { (response: Response<LearningAssignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Reschedule Learning Assignment
     - PATCH /api/v2/learning/assignments/{assignmentId}/reschedule
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isPassed" : true,
  "isManual" : true,
  "selfUri" : "https://openapi-generator.tech",
  "module" : "{}",
  "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "version" : 6,
  "isRule" : true,
  "assessment" : "{}",
  "assessmentForm" : "{}",
  "lengthInMinutes" : 1,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "isOverdue" : true,
  "isLatest" : true,
  "createdBy" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "percentageScore" : 0.8008282,
  "state" : "Assigned",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter assignmentId: (path) The ID of Learning Assignment 
     - parameter body: (body) The Learning assignment reschedule model (optional)

     - returns: RequestBuilder<LearningAssignment> 
     */
    open class func patchLearningAssignmentRescheduleWithRequestBuilder(assignmentId: String, body: LearningAssignmentReschedule? = nil) -> RequestBuilder<LearningAssignment> {        
        var path = "/api/v2/learning/assignments/{assignmentId}/reschedule"
        let assignmentIdPreEscape = "\(assignmentId)"
        let assignmentIdPostEscape = assignmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignmentId}", with: assignmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Score learning assessment for preview
     
     - parameter body: (body) Assessment form and answers to score 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssessmentsScoring(body: LearningAssessmentScoringRequest, completion: @escaping ((_ data: AssessmentScoringSet?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssessmentsScoringWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AssessmentScoringSet>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Score learning assessment for preview
     - POST /api/v2/learning/assessments/scoring
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalNonCriticalScore" : 1.4658129,
  "isPassed" : true,
  "comments" : "comments",
  "agentComments" : "agentComments",
  "failureReasons" : [ "Score", "Score" ],
  "totalCriticalScore" : 6.0274563,
  "questionGroupScores" : [ {
    "totalNonCriticalScore" : 9.301444,
    "totalCriticalScoreUnweighted" : 7.386282,
    "totalNonCriticalScoreUnweighted" : 1.0246457,
    "systemMarkedNA" : true,
    "markedNA" : true,
    "totalScoreUnweighted" : 2.027123,
    "maxTotalNonCriticalScore" : 3.6160767,
    "questionScores" : [ {
      "failedKillQuestion" : true,
      "answerId" : "answerId",
      "score" : 6,
      "comments" : "comments",
      "questionId" : "questionId",
      "systemMarkedNA" : true,
      "markedNA" : true,
      "freeTextAnswer" : "freeTextAnswer"
    }, {
      "failedKillQuestion" : true,
      "answerId" : "answerId",
      "score" : 6,
      "comments" : "comments",
      "questionId" : "questionId",
      "systemMarkedNA" : true,
      "markedNA" : true,
      "freeTextAnswer" : "freeTextAnswer"
    } ],
    "questionGroupId" : "questionGroupId",
    "totalScore" : 5.962134,
    "maxTotalScore" : 5.637377,
    "maxTotalNonCriticalScoreUnweighted" : 1.4894159,
    "totalCriticalScore" : 2.302136,
    "maxTotalCriticalScore" : 7.0614014,
    "maxTotalCriticalScoreUnweighted" : 1.2315135,
    "maxTotalScoreUnweighted" : 4.145608
  }, {
    "totalNonCriticalScore" : 9.301444,
    "totalCriticalScoreUnweighted" : 7.386282,
    "totalNonCriticalScoreUnweighted" : 1.0246457,
    "systemMarkedNA" : true,
    "markedNA" : true,
    "totalScoreUnweighted" : 2.027123,
    "maxTotalNonCriticalScore" : 3.6160767,
    "questionScores" : [ {
      "failedKillQuestion" : true,
      "answerId" : "answerId",
      "score" : 6,
      "comments" : "comments",
      "questionId" : "questionId",
      "systemMarkedNA" : true,
      "markedNA" : true,
      "freeTextAnswer" : "freeTextAnswer"
    }, {
      "failedKillQuestion" : true,
      "answerId" : "answerId",
      "score" : 6,
      "comments" : "comments",
      "questionId" : "questionId",
      "systemMarkedNA" : true,
      "markedNA" : true,
      "freeTextAnswer" : "freeTextAnswer"
    } ],
    "questionGroupId" : "questionGroupId",
    "totalScore" : 5.962134,
    "maxTotalScore" : 5.637377,
    "maxTotalNonCriticalScoreUnweighted" : 1.4894159,
    "totalCriticalScore" : 2.302136,
    "maxTotalCriticalScore" : 7.0614014,
    "maxTotalCriticalScoreUnweighted" : 1.2315135,
    "maxTotalScoreUnweighted" : 4.145608
  } ],
  "totalScore" : 0.8008282
}, statusCode=200}]
     
     - parameter body: (body) Assessment form and answers to score 

     - returns: RequestBuilder<AssessmentScoringSet> 
     */
    open class func postLearningAssessmentsScoringWithRequestBuilder(body: LearningAssessmentScoringRequest) -> RequestBuilder<AssessmentScoringSet> {        
        let path = "/api/v2/learning/assessments/scoring"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AssessmentScoringSet>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Reassign Learning Assignment
     
     - parameter assignmentId: (path) The Learning Assignment ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignmentReassign(assignmentId: String, completion: @escaping ((_ data: LearningAssignment?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentReassignWithRequestBuilder(assignmentId: assignmentId)
        requestBuilder.execute { (response: Response<LearningAssignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Reassign Learning Assignment
     - POST /api/v2/learning/assignments/{assignmentId}/reassign
     - This will reassign the state of the assignment to 'Assigned' and update the assignment to the latest version of the module
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isPassed" : true,
  "isManual" : true,
  "selfUri" : "https://openapi-generator.tech",
  "module" : "{}",
  "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "version" : 6,
  "isRule" : true,
  "assessment" : "{}",
  "assessmentForm" : "{}",
  "lengthInMinutes" : 1,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "isOverdue" : true,
  "isLatest" : true,
  "createdBy" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "percentageScore" : 0.8008282,
  "state" : "Assigned",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter assignmentId: (path) The Learning Assignment ID 

     - returns: RequestBuilder<LearningAssignment> 
     */
    open class func postLearningAssignmentReassignWithRequestBuilder(assignmentId: String) -> RequestBuilder<LearningAssignment> {        
        var path = "/api/v2/learning/assignments/{assignmentId}/reassign"
        let assignmentIdPreEscape = "\(assignmentId)"
        let assignmentIdPostEscape = assignmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignmentId}", with: assignmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Reset Learning Assignment
     
     - parameter assignmentId: (path) The Learning Assignment ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignmentReset(assignmentId: String, completion: @escaping ((_ data: LearningAssignment?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentResetWithRequestBuilder(assignmentId: assignmentId)
        requestBuilder.execute { (response: Response<LearningAssignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Reset Learning Assignment
     - POST /api/v2/learning/assignments/{assignmentId}/reset
     - This will reset the state of the assignment to 'Assigned' and remove the version of Learning module associated with the assignment
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isPassed" : true,
  "isManual" : true,
  "selfUri" : "https://openapi-generator.tech",
  "module" : "{}",
  "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "version" : 6,
  "isRule" : true,
  "assessment" : "{}",
  "assessmentForm" : "{}",
  "lengthInMinutes" : 1,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "isOverdue" : true,
  "isLatest" : true,
  "createdBy" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "percentageScore" : 0.8008282,
  "state" : "Assigned",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter assignmentId: (path) The Learning Assignment ID 

     - returns: RequestBuilder<LearningAssignment> 
     */
    open class func postLearningAssignmentResetWithRequestBuilder(assignmentId: String) -> RequestBuilder<LearningAssignment> {        
        var path = "/api/v2/learning/assignments/{assignmentId}/reset"
        let assignmentIdPreEscape = "\(assignmentId)"
        let assignmentIdPostEscape = assignmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assignmentId}", with: assignmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create Learning Assignment
     
     - parameter body: (body) The Learning Assignment to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignments(body: LearningAssignmentCreate? = nil, completion: @escaping ((_ data: LearningAssignment?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningAssignment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create Learning Assignment
     - POST /api/v2/learning/assignments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "isPassed" : true,
  "isManual" : true,
  "selfUri" : "https://openapi-generator.tech",
  "module" : "{}",
  "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "version" : 6,
  "isRule" : true,
  "assessment" : "{}",
  "assessmentForm" : "{}",
  "lengthInMinutes" : 1,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "isOverdue" : true,
  "isLatest" : true,
  "createdBy" : "{}",
  "modifiedBy" : "{}",
  "id" : "id",
  "percentageScore" : 0.8008282,
  "state" : "Assigned",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) The Learning Assignment to be created (optional)

     - returns: RequestBuilder<LearningAssignment> 
     */
    open class func postLearningAssignmentsWithRequestBuilder(body: LearningAssignmentCreate? = nil) -> RequestBuilder<LearningAssignment> {        
        let path = "/api/v2/learning/assignments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Retrieve aggregated assignment data
     
     - parameter body: (body) Aggregate Request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignmentsAggregatesQuery(body: LearningAssignmentAggregateParam, completion: @escaping ((_ data: LearningAssignmentAggregateResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentsAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningAssignmentAggregateResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve aggregated assignment data
     - POST /api/v2/learning/assignments/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "nActivities",
        "stats" : "{}"
      }, {
        "metric" : "nActivities",
        "stats" : "{}"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "nActivities",
        "stats" : "{}"
      }, {
        "metric" : "nActivities",
        "stats" : "{}"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "nActivities",
        "stats" : "{}"
      }, {
        "metric" : "nActivities",
        "stats" : "{}"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "nActivities",
        "stats" : "{}"
      }, {
        "metric" : "nActivities",
        "stats" : "{}"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Aggregate Request 

     - returns: RequestBuilder<LearningAssignmentAggregateResponse> 
     */
    open class func postLearningAssignmentsAggregatesQueryWithRequestBuilder(body: LearningAssignmentAggregateParam) -> RequestBuilder<LearningAssignmentAggregateResponse> {        
        let path = "/api/v2/learning/assignments/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignmentAggregateResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Add multiple learning assignments
     
     - parameter body: (body) The learning assignments to be created (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignmentsBulkadd(body: [LearningAssignmentItem]? = nil, completion: @escaping ((_ data: LearningAssignmentBulkAddResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentsBulkaddWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningAssignmentBulkAddResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add multiple learning assignments
     - POST /api/v2/learning/assignments/bulkadd
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "isPassed" : true,
    "isManual" : true,
    "selfUri" : "https://openapi-generator.tech",
    "module" : "{}",
    "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "version" : 6,
    "isRule" : true,
    "assessment" : "{}",
    "assessmentForm" : "{}",
    "lengthInMinutes" : 1,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "state" : "Assigned",
    "user" : "{}"
  }, {
    "isPassed" : true,
    "isManual" : true,
    "selfUri" : "https://openapi-generator.tech",
    "module" : "{}",
    "dateRecommendedForCompletion" : "2000-01-23T04:56:07.000+00:00",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "version" : 6,
    "isRule" : true,
    "assessment" : "{}",
    "assessmentForm" : "{}",
    "lengthInMinutes" : 1,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "modifiedBy" : "{}",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "state" : "Assigned",
    "user" : "{}"
  } ],
  "disallowedEntities" : [ {
    "errorCode" : "errorCode",
    "entity" : "{}"
  }, {
    "errorCode" : "errorCode",
    "entity" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) The learning assignments to be created (optional)

     - returns: RequestBuilder<LearningAssignmentBulkAddResponse> 
     */
    open class func postLearningAssignmentsBulkaddWithRequestBuilder(body: [LearningAssignmentItem]? = nil) -> RequestBuilder<LearningAssignmentBulkAddResponse> {        
        let path = "/api/v2/learning/assignments/bulkadd"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignmentBulkAddResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Remove multiple Learning Assignments
     
     - parameter body: (body) The IDs of the learning assignments to be removed (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningAssignmentsBulkremove(body: [String]? = nil, completion: @escaping ((_ data: LearningAssignmentBulkRemoveResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningAssignmentsBulkremoveWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningAssignmentBulkRemoveResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Remove multiple Learning Assignments
     - POST /api/v2/learning/assignments/bulkremove
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "assignmentId" : "assignmentId"
  }, {
    "assignmentId" : "assignmentId"
  } ],
  "disallowedEntities" : [ {
    "errorCode" : "errorCode",
    "entity" : "{}"
  }, {
    "errorCode" : "errorCode",
    "entity" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) The IDs of the learning assignments to be removed (optional)

     - returns: RequestBuilder<LearningAssignmentBulkRemoveResponse> 
     */
    open class func postLearningAssignmentsBulkremoveWithRequestBuilder(body: [String]? = nil) -> RequestBuilder<LearningAssignmentBulkRemoveResponse> {        
        let path = "/api/v2/learning/assignments/bulkremove"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningAssignmentBulkRemoveResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Starts a specified operation on learning module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module job request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningModuleJobs(moduleId: String, body: LearningModuleJobRequest, completion: @escaping ((_ data: LearningModuleJobResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningModuleJobsWithRequestBuilder(moduleId: moduleId, body: body)
        requestBuilder.execute { (response: Response<LearningModuleJobResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Starts a specified operation on learning module
     - POST /api/v2/learning/modules/{moduleId}/jobs
     - This will initiate operation specified in the request body for a learning module
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "status" : "Accepted"
}, statusCode=202}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module job request 

     - returns: RequestBuilder<LearningModuleJobResponse> 
     */
    open class func postLearningModuleJobsWithRequestBuilder(moduleId: String, body: LearningModuleJobRequest) -> RequestBuilder<LearningModuleJobResponse> {        
        var path = "/api/v2/learning/modules/{moduleId}/jobs"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModuleJobResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Publish a Learning module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The request body (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningModulePublish(moduleId: String, body: LearningModulePublishRequest? = nil, completion: @escaping ((_ data: LearningModulePublishResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningModulePublishWithRequestBuilder(moduleId: moduleId, body: body)
        requestBuilder.execute { (response: Response<LearningModulePublishResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Publish a Learning module
     - POST /api/v2/learning/modules/{moduleId}/publish
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id",
  "version" : 0
}, statusCode=200}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The request body (optional)

     - returns: RequestBuilder<LearningModulePublishResponse> 
     */
    open class func postLearningModulePublishWithRequestBuilder(moduleId: String, body: LearningModulePublishRequest? = nil) -> RequestBuilder<LearningModulePublishResponse> {        
        var path = "/api/v2/learning/modules/{moduleId}/publish"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModulePublishResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a new learning module
     
     - parameter body: (body) The learning module to be created 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningModules(body: LearningModuleRequest, completion: @escaping ((_ data: LearningModule?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningModulesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningModule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a new learning module
     - POST /api/v2/learning/modules
     - This will create a new unpublished learning module with the specified fields.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "reassignSummaryData" : "{}",
  "archivalMode" : "Graceful",
  "isArchived" : true,
  "isPublished" : true,
  "selfUri" : "https://openapi-generator.tech",
  "externalId" : "externalId",
  "rule" : "{}",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "source" : "UserCreated",
  "coverArt" : "{}",
  "type" : "Informational",
  "version" : 0,
  "completionTimeInDays" : 6,
  "summaryData" : "{}",
  "informSteps" : [ {
    "displayName" : "displayName",
    "name" : "name",
    "description" : "description",
    "type" : "Url",
    "value" : "value",
    "contentType" : "contentType",
    "sharingUri" : "sharingUri",
    "order" : 1
  }, {
    "displayName" : "displayName",
    "name" : "name",
    "description" : "description",
    "type" : "Url",
    "value" : "value",
    "contentType" : "contentType",
    "sharingUri" : "sharingUri",
    "order" : 1
  } ],
  "assessmentForm" : "{}",
  "lengthInMinutes" : 5,
  "excludedFromCatalog" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "name" : "name",
  "modifiedBy" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) The learning module to be created 

     - returns: RequestBuilder<LearningModule> 
     */
    open class func postLearningModulesWithRequestBuilder(body: LearningModuleRequest) -> RequestBuilder<LearningModule> {        
        let path = "/api/v2/learning/modules"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Get users for learning module rule
     
     - parameter pageSize: (query) Page size 
     - parameter pageNumber: (query) Page number 
     - parameter body: (body) The learning module rule to fetch users 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningRulesQuery(pageSize: Int, pageNumber: Int, body: LearningAssignmentUserQuery, completion: @escaping ((_ data: LearningAssignmentUserListing?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningRulesQueryWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, body: body)
        requestBuilder.execute { (response: Response<LearningAssignmentUserListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get users for learning module rule
     - POST /api/v2/learning/rules/query
     - This will get the users who matches the given rule.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech",
  "unfilteredTotal" : 5
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size 
     - parameter pageNumber: (query) Page number 
     - parameter body: (body) The learning module rule to fetch users 

     - returns: RequestBuilder<LearningAssignmentUserListing> 
     */
    open class func postLearningRulesQueryWithRequestBuilder(pageSize: Int, pageNumber: Int, body: LearningAssignmentUserQuery) -> RequestBuilder<LearningAssignmentUserListing> {        
        let path = "/api/v2/learning/rules/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize.encodeToJSON(), 
            "pageNumber": pageNumber.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<LearningAssignmentUserListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Get list of possible slots where a learning activity can be scheduled.
     
     - parameter body: (body) The slot search request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLearningScheduleslotsQuery(body: LearningScheduleSlotsQueryRequest, completion: @escaping ((_ data: LearningScheduleSlotsQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLearningScheduleslotsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LearningScheduleSlotsQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of possible slots where a learning activity can be scheduled.
     - POST /api/v2/learning/scheduleslots/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "suggestedSlots" : [ {
    "lengthInMinutes" : 0,
    "staffingDifference" : 6.027456183070403,
    "dateStart" : "2000-01-23T04:56:07.000+00:00",
    "differenceRating" : "Poor"
  }, {
    "lengthInMinutes" : 0,
    "staffingDifference" : 6.027456183070403,
    "dateStart" : "2000-01-23T04:56:07.000+00:00",
    "differenceRating" : "Poor"
  } ],
  "wfmScheduleActivities" : [ {
    "fullDayTimeOffMarkers" : [ {
      "activityCodeId" : "activityCodeId",
      "timeOffRequestId" : "timeOffRequestId",
      "lengthMinutes" : 5,
      "businessUnitDate" : "2000-01-23",
      "paid" : true,
      "description" : "description"
    }, {
      "activityCodeId" : "activityCodeId",
      "timeOffRequestId" : "timeOffRequestId",
      "lengthMinutes" : 5,
      "businessUnitDate" : "2000-01-23",
      "paid" : true,
      "description" : "description"
    } ],
    "activities" : [ {
      "activityCodeId" : "activityCodeId",
      "externalActivityType" : "ActivityPlan",
      "timeOffRequestId" : "timeOffRequestId",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 1,
      "externalActivityId" : "externalActivityId",
      "paid" : true,
      "description" : "description"
    }, {
      "activityCodeId" : "activityCodeId",
      "externalActivityType" : "ActivityPlan",
      "timeOffRequestId" : "timeOffRequestId",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 1,
      "externalActivityId" : "externalActivityId",
      "paid" : true,
      "description" : "description"
    } ],
    "user" : "{}"
  }, {
    "fullDayTimeOffMarkers" : [ {
      "activityCodeId" : "activityCodeId",
      "timeOffRequestId" : "timeOffRequestId",
      "lengthMinutes" : 5,
      "businessUnitDate" : "2000-01-23",
      "paid" : true,
      "description" : "description"
    }, {
      "activityCodeId" : "activityCodeId",
      "timeOffRequestId" : "timeOffRequestId",
      "lengthMinutes" : 5,
      "businessUnitDate" : "2000-01-23",
      "paid" : true,
      "description" : "description"
    } ],
    "activities" : [ {
      "activityCodeId" : "activityCodeId",
      "externalActivityType" : "ActivityPlan",
      "timeOffRequestId" : "timeOffRequestId",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 1,
      "externalActivityId" : "externalActivityId",
      "paid" : true,
      "description" : "description"
    }, {
      "activityCodeId" : "activityCodeId",
      "externalActivityType" : "ActivityPlan",
      "timeOffRequestId" : "timeOffRequestId",
      "dateStart" : "2000-01-23T04:56:07.000+00:00",
      "lengthMinutes" : 1,
      "externalActivityId" : "externalActivityId",
      "paid" : true,
      "description" : "description"
    } ],
    "user" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) The slot search request 

     - returns: RequestBuilder<LearningScheduleSlotsQueryResponse> 
     */
    open class func postLearningScheduleslotsQueryWithRequestBuilder(body: LearningScheduleSlotsQueryRequest) -> RequestBuilder<LearningScheduleSlotsQueryResponse> {        
        let path = "/api/v2/learning/scheduleslots/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningScheduleSlotsQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update a learning module
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLearningModule(moduleId: String, body: LearningModuleRequest, completion: @escaping ((_ data: LearningModule?,_ error: Error?) -> Void)) {
        let requestBuilder = putLearningModuleWithRequestBuilder(moduleId: moduleId, body: body)
        requestBuilder.execute { (response: Response<LearningModule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a learning module
     - PUT /api/v2/learning/modules/{moduleId}
     - This will update the name, description, completion time in days and inform steps for a learning module
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "reassignSummaryData" : "{}",
  "archivalMode" : "Graceful",
  "isArchived" : true,
  "isPublished" : true,
  "selfUri" : "https://openapi-generator.tech",
  "externalId" : "externalId",
  "rule" : "{}",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "source" : "UserCreated",
  "coverArt" : "{}",
  "type" : "Informational",
  "version" : 0,
  "completionTimeInDays" : 6,
  "summaryData" : "{}",
  "informSteps" : [ {
    "displayName" : "displayName",
    "name" : "name",
    "description" : "description",
    "type" : "Url",
    "value" : "value",
    "contentType" : "contentType",
    "sharingUri" : "sharingUri",
    "order" : 1
  }, {
    "displayName" : "displayName",
    "name" : "name",
    "description" : "description",
    "type" : "Url",
    "value" : "value",
    "contentType" : "contentType",
    "sharingUri" : "sharingUri",
    "order" : 1
  } ],
  "assessmentForm" : "{}",
  "lengthInMinutes" : 5,
  "excludedFromCatalog" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "name" : "name",
  "modifiedBy" : "{}",
  "id" : "id"
}, statusCode=200}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module to be updated 

     - returns: RequestBuilder<LearningModule> 
     */
    open class func putLearningModuleWithRequestBuilder(moduleId: String, body: LearningModuleRequest) -> RequestBuilder<LearningModule> {        
        var path = "/api/v2/learning/modules/{moduleId}"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a learning module rule
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module rule to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLearningModuleRule(moduleId: String, body: LearningModuleRule, completion: @escaping ((_ data: LearningModuleRule?,_ error: Error?) -> Void)) {
        let requestBuilder = putLearningModuleRuleWithRequestBuilder(moduleId: moduleId, body: body)
        requestBuilder.execute { (response: Response<LearningModuleRule>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a learning module rule
     - PUT /api/v2/learning/modules/{moduleId}/rule
     - This will update a learning module rule with the specified fields.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "parts" : [ {
    "selector" : "AcdSkills",
    "operation" : "Include",
    "value" : [ "value", "value" ],
    "order" : 0
  }, {
    "selector" : "AcdSkills",
    "operation" : "Include",
    "value" : [ "value", "value" ],
    "order" : 0
  } ],
  "id" : "id",
  "isActive" : true
}, statusCode=200}]
     
     - parameter moduleId: (path) The ID of the learning module 
     - parameter body: (body) The learning module rule to be updated 

     - returns: RequestBuilder<LearningModuleRule> 
     */
    open class func putLearningModuleRuleWithRequestBuilder(moduleId: String, body: LearningModuleRule) -> RequestBuilder<LearningModuleRule> {        
        var path = "/api/v2/learning/modules/{moduleId}/rule"
        let moduleIdPreEscape = "\(moduleId)"
        let moduleIdPostEscape = moduleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{moduleId}", with: moduleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LearningModuleRule>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
