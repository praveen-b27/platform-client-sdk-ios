//
// LogCaptureAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LogCaptureAPI {
    
    /**
     Disable browser log capture for the user
     
     - parameter userId: (path) The id of the user to disable browser log capture 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDiagnosticsLogcaptureBrowserUser(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteDiagnosticsLogcaptureBrowserUserWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Disable browser log capture for the user
     - DELETE /api/v2/diagnostics/logcapture/browser/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) The id of the user to disable browser log capture 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDiagnosticsLogcaptureBrowserUserWithRequestBuilder(userId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/diagnostics/logcapture/browser/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Gets status of async download execution
     
     - parameter jobId: (path) Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDiagnosticsLogcaptureBrowserEntriesDownloadJob(jobId: String, completion: @escaping ((_ data: LogCaptureDownloadExecutionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getDiagnosticsLogcaptureBrowserEntriesDownloadJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<LogCaptureDownloadExecutionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Gets status of async download execution
     - GET /api/v2/diagnostics/logcapture/browser/entries/download/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "fileUrl" : "fileUrl",
  "id" : "id",
  "state" : "Running",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter jobId: (path) Job ID 

     - returns: RequestBuilder<LogCaptureDownloadExecutionResponse> 
     */
    open class func getDiagnosticsLogcaptureBrowserEntriesDownloadJobWithRequestBuilder(jobId: String) -> RequestBuilder<LogCaptureDownloadExecutionResponse> {        
        var path = "/api/v2/diagnostics/logcapture/browser/entries/download/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LogCaptureDownloadExecutionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get log capture configuration for the user
     
     - parameter userId: (path) The id of the user to get browser log capture configuration 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDiagnosticsLogcaptureBrowserUser(userId: String, completion: @escaping ((_ data: LogCaptureUserConfiguration?,_ error: Error?) -> Void)) {
        let requestBuilder = getDiagnosticsLogcaptureBrowserUserWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<LogCaptureUserConfiguration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get log capture configuration for the user
     - GET /api/v2/diagnostics/logcapture/browser/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateExpired" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id"
}, statusCode=200}]
     
     - parameter userId: (path) The id of the user to get browser log capture configuration 

     - returns: RequestBuilder<LogCaptureUserConfiguration> 
     */
    open class func getDiagnosticsLogcaptureBrowserUserWithRequestBuilder(userId: String) -> RequestBuilder<LogCaptureUserConfiguration> {        
        var path = "/api/v2/diagnostics/logcapture/browser/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LogCaptureUserConfiguration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get all log capture enabled users for an org
     
     - parameter includeExpired: (query) Include expired users with log captures still available for search or download (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDiagnosticsLogcaptureBrowserUsers(includeExpired: Bool? = nil, completion: @escaping ((_ data: PagelessEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getDiagnosticsLogcaptureBrowserUsersWithRequestBuilder(includeExpired: includeExpired)
        requestBuilder.execute { (response: Response<PagelessEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all log capture enabled users for an org
     - GET /api/v2/diagnostics/logcapture/browser/users
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter includeExpired: (query) Include expired users with log captures still available for search or download (optional)

     - returns: RequestBuilder<PagelessEntityListing> 
     */
    open class func getDiagnosticsLogcaptureBrowserUsersWithRequestBuilder(includeExpired: Bool? = nil) -> RequestBuilder<PagelessEntityListing> {        
        let path = "/api/v2/diagnostics/logcapture/browser/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeExpired": includeExpired
        ])

        let requestBuilder: RequestBuilder<PagelessEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Creates an async download execution
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDiagnosticsLogcaptureBrowserEntriesDownloadJobs(body: LogCaptureQueryRequest? = nil, completion: @escaping ((_ data: LogCaptureDownloadExecutionResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postDiagnosticsLogcaptureBrowserEntriesDownloadJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LogCaptureDownloadExecutionResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Creates an async download execution
     - POST /api/v2/diagnostics/logcapture/browser/entries/download/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateStart" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "fileUrl" : "fileUrl",
  "id" : "id",
  "state" : "Running",
  "user" : "{}"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<LogCaptureDownloadExecutionResponse> 
     */
    open class func postDiagnosticsLogcaptureBrowserEntriesDownloadJobsWithRequestBuilder(body: LogCaptureQueryRequest? = nil) -> RequestBuilder<LogCaptureDownloadExecutionResponse> {        
        let path = "/api/v2/diagnostics/logcapture/browser/entries/download/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LogCaptureDownloadExecutionResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    /**
     Query collected log entries. It returns a limited amount of records, to get all records use download endpoint.
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDiagnosticsLogcaptureBrowserEntriesQuery(before: String? = nil, after: String? = nil, pageSize: String? = nil, body: LogCaptureQueryRequest? = nil, completion: @escaping ((_ data: LogCaptureQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postDiagnosticsLogcaptureBrowserEntriesQueryWithRequestBuilder(before: before, after: after, pageSize: pageSize, body: body)
        requestBuilder.execute { (response: Response<LogCaptureQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query collected log entries. It returns a limited amount of records, to get all records use download endpoint.
     - POST /api/v2/diagnostics/logcapture/browser/entries/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "level" : "level",
    "message" : "message",
    "timestamp" : 0
  }, {
    "level" : "level",
    "message" : "message",
    "timestamp" : 0
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<LogCaptureQueryResponse> 
     */
    open class func postDiagnosticsLogcaptureBrowserEntriesQueryWithRequestBuilder(before: String? = nil, after: String? = nil, pageSize: String? = nil, body: LogCaptureQueryRequest? = nil) -> RequestBuilder<LogCaptureQueryResponse> {        
        let path = "/api/v2/diagnostics/logcapture/browser/entries/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before, 
            "after": after, 
            "pageSize": pageSize
        ])

        let requestBuilder: RequestBuilder<LogCaptureQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Enable log capture for a user or update expiration
     
     - parameter userId: (path) The id of the user to enable browser log capture 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDiagnosticsLogcaptureBrowserUser(userId: String, body: LogCaptureUserConfiguration? = nil, completion: @escaping ((_ data: LogCaptureUserConfiguration?,_ error: Error?) -> Void)) {
        let requestBuilder = postDiagnosticsLogcaptureBrowserUserWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<LogCaptureUserConfiguration>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Enable log capture for a user or update expiration
     - POST /api/v2/diagnostics/logcapture/browser/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateExpired" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "id" : "id"
}, statusCode=200}]
     
     - parameter userId: (path) The id of the user to enable browser log capture 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<LogCaptureUserConfiguration> 
     */
    open class func postDiagnosticsLogcaptureBrowserUserWithRequestBuilder(userId: String, body: LogCaptureUserConfiguration? = nil) -> RequestBuilder<LogCaptureUserConfiguration> {        
        var path = "/api/v2/diagnostics/logcapture/browser/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LogCaptureUserConfiguration>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
