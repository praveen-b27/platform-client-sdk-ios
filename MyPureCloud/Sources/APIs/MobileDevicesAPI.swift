//
// MobileDevicesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class MobileDevicesAPI {
    
    /**
     Delete device
     
     - parameter deviceId: (path) Device ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMobiledevice(deviceId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteMobiledeviceWithRequestBuilder(deviceId: deviceId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete device
     - DELETE /api/v2/mobiledevices/{deviceId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter deviceId: (path) Device ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteMobiledeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/mobiledevices/{deviceId}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Get device
     
     - parameter deviceId: (path) Device ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMobiledevice(deviceId: String, completion: @escaping ((_ data: UserDevice?,_ error: Error?) -> Void)) {
        let requestBuilder = getMobiledeviceWithRequestBuilder(deviceId: deviceId)
        requestBuilder.execute { (response: Response<UserDevice>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get device
     - GET /api/v2/mobiledevices/{deviceId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "sessionHash" : "sessionHash",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "notificationId" : "notificationId",
  "model" : "model",
  "acceptNotifications" : true,
  "id" : "id",
  "type" : "android",
  "make" : "make",
  "deviceToken" : "deviceToken"
}, statusCode=200}]
     
     - parameter deviceId: (path) Device ID 

     - returns: RequestBuilder<UserDevice> 
     */
    open class func getMobiledeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<UserDevice> {        
        var path = "/api/v2/mobiledevices/{deviceId}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserDevice>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum SortOrder_getMobiledevices: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    /**
     Get a list of all devices.
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMobiledevices(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getMobiledevices? = nil, completion: @escaping ((_ data: DirectoryUserDevicesListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getMobiledevicesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<DirectoryUserDevicesListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of all devices.
     - GET /api/v2/mobiledevices
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "sessionHash" : "sessionHash",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "notificationId" : "notificationId",
    "model" : "model",
    "acceptNotifications" : true,
    "id" : "id",
    "type" : "android",
    "make" : "make",
    "deviceToken" : "deviceToken"
  }, {
    "sessionHash" : "sessionHash",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "notificationId" : "notificationId",
    "model" : "model",
    "acceptNotifications" : true,
    "id" : "id",
    "type" : "android",
    "make" : "make",
    "deviceToken" : "deviceToken"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<DirectoryUserDevicesListing> 
     */
    open class func getMobiledevicesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getMobiledevices? = nil) -> RequestBuilder<DirectoryUserDevicesListing> {        
        let path = "/api/v2/mobiledevices"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<DirectoryUserDevicesListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Create User device
     
     - parameter body: (body) Device 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMobiledevices(body: UserDevice, completion: @escaping ((_ data: UserDevice?,_ error: Error?) -> Void)) {
        let requestBuilder = postMobiledevicesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserDevice>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create User device
     - POST /api/v2/mobiledevices
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "sessionHash" : "sessionHash",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "notificationId" : "notificationId",
  "model" : "model",
  "acceptNotifications" : true,
  "id" : "id",
  "type" : "android",
  "make" : "make",
  "deviceToken" : "deviceToken"
}, statusCode=200}]
     
     - parameter body: (body) Device 

     - returns: RequestBuilder<UserDevice> 
     */
    open class func postMobiledevicesWithRequestBuilder(body: UserDevice) -> RequestBuilder<UserDevice> {        
        let path = "/api/v2/mobiledevices"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserDevice>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update device
     
     - parameter deviceId: (path) Device ID 
     - parameter body: (body) Device (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putMobiledevice(deviceId: String, body: UserDevice? = nil, completion: @escaping ((_ data: UserDevice?,_ error: Error?) -> Void)) {
        let requestBuilder = putMobiledeviceWithRequestBuilder(deviceId: deviceId, body: body)
        requestBuilder.execute { (response: Response<UserDevice>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update device
     - PUT /api/v2/mobiledevices/{deviceId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "sessionHash" : "sessionHash",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "notificationId" : "notificationId",
  "model" : "model",
  "acceptNotifications" : true,
  "id" : "id",
  "type" : "android",
  "make" : "make",
  "deviceToken" : "deviceToken"
}, statusCode=200}]
     
     - parameter deviceId: (path) Device ID 
     - parameter body: (body) Device (optional)

     - returns: RequestBuilder<UserDevice> 
     */
    open class func putMobiledeviceWithRequestBuilder(deviceId: String, body: UserDevice? = nil) -> RequestBuilder<UserDevice> {        
        var path = "/api/v2/mobiledevices/{deviceId}"
        let deviceIdPreEscape = "\(deviceId)"
        let deviceIdPostEscape = deviceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deviceId}", with: deviceIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserDevice>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
