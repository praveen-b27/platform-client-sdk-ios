//
// ProcessAutomationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProcessAutomationAPI {
    
    /**
     Delete a Trigger
     
     - parameter triggerId: (path) triggerId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProcessautomationTrigger(triggerId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteProcessautomationTriggerWithRequestBuilder(triggerId: triggerId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Trigger
     - DELETE /api/v2/processautomation/triggers/{triggerId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter triggerId: (path) triggerId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteProcessautomationTriggerWithRequestBuilder(triggerId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/processautomation/triggers/{triggerId}"
        let triggerIdPreEscape = "\(triggerId)"
        let triggerIdPostEscape = triggerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{triggerId}", with: triggerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Retrieve a single Trigger matching id
     
     - parameter triggerId: (path) triggerId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProcessautomationTrigger(triggerId: String, completion: @escaping ((_ data: Trigger?,_ error: Error?) -> Void)) {
        let requestBuilder = getProcessautomationTriggerWithRequestBuilder(triggerId: triggerId)
        requestBuilder.execute { (response: Response<Trigger>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single Trigger matching id
     - GET /api/v2/processautomation/triggers/{triggerId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "matchCriteria" : [ {
    "values" : [ null, null ],
    "jsonPath" : "jsonPath",
    "value" : "{}",
    "operator" : "GreaterThanOrEqual"
  }, {
    "values" : [ null, null ],
    "jsonPath" : "jsonPath",
    "value" : "{}",
    "operator" : "GreaterThanOrEqual"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "topicName" : "topicName",
  "delayBySeconds" : 1,
  "description" : "description",
  "id" : "id",
  "version" : 0,
  "eventTTLSeconds" : 6,
  "enabled" : true,
  "target" : "{}"
}, statusCode=200}]
     
     - parameter triggerId: (path) triggerId 

     - returns: RequestBuilder<Trigger> 
     */
    open class func getProcessautomationTriggerWithRequestBuilder(triggerId: String) -> RequestBuilder<Trigger> {        
        var path = "/api/v2/processautomation/triggers/{triggerId}"
        let triggerIdPreEscape = "\(triggerId)"
        let triggerIdPostEscape = triggerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{triggerId}", with: triggerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Trigger>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    /**
     Retrieves all triggers, optionally filtered by query parameters.
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter topicName: (query) Topic name(s). Separated by commas (optional)
     - parameter enabled: (query) Boolean indicating desired enabled state of triggers (optional)
     - parameter hasDelayBy: (query) Boolean to filter based on delayBySeconds being set in triggers. Default returns all, true returns only those with delayBySeconds set, false returns those without delayBySeconds set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProcessautomationTriggers(before: String? = nil, after: String? = nil, pageSize: String? = nil, topicName: String? = nil, enabled: Bool? = nil, hasDelayBy: Bool? = nil, completion: @escaping ((_ data: TriggerEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getProcessautomationTriggersWithRequestBuilder(before: before, after: after, pageSize: pageSize, topicName: topicName, enabled: enabled, hasDelayBy: hasDelayBy)
        requestBuilder.execute { (response: Response<TriggerEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieves all triggers, optionally filtered by query parameters.
     - GET /api/v2/processautomation/triggers
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "matchCriteria" : [ {
      "values" : [ null, null ],
      "jsonPath" : "jsonPath",
      "value" : "{}",
      "operator" : "GreaterThanOrEqual"
    }, {
      "values" : [ null, null ],
      "jsonPath" : "jsonPath",
      "value" : "{}",
      "operator" : "GreaterThanOrEqual"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "topicName" : "topicName",
    "delayBySeconds" : 1,
    "description" : "description",
    "id" : "id",
    "version" : 0,
    "eventTTLSeconds" : 6,
    "enabled" : true,
    "target" : "{}"
  }, {
    "matchCriteria" : [ {
      "values" : [ null, null ],
      "jsonPath" : "jsonPath",
      "value" : "{}",
      "operator" : "GreaterThanOrEqual"
    }, {
      "values" : [ null, null ],
      "jsonPath" : "jsonPath",
      "value" : "{}",
      "operator" : "GreaterThanOrEqual"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "topicName" : "topicName",
    "delayBySeconds" : 1,
    "description" : "description",
    "id" : "id",
    "version" : 0,
    "eventTTLSeconds" : 6,
    "enabled" : true,
    "target" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter topicName: (query) Topic name(s). Separated by commas (optional)
     - parameter enabled: (query) Boolean indicating desired enabled state of triggers (optional)
     - parameter hasDelayBy: (query) Boolean to filter based on delayBySeconds being set in triggers. Default returns all, true returns only those with delayBySeconds set, false returns those without delayBySeconds set. (optional)

     - returns: RequestBuilder<TriggerEntityListing> 
     */
    open class func getProcessautomationTriggersWithRequestBuilder(before: String? = nil, after: String? = nil, pageSize: String? = nil, topicName: String? = nil, enabled: Bool? = nil, hasDelayBy: Bool? = nil) -> RequestBuilder<TriggerEntityListing> {        
        let path = "/api/v2/processautomation/triggers"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before, 
            "after": after, 
            "pageSize": pageSize, 
            "topicName": topicName, 
            "enabled": enabled, 
            "hasDelayBy": hasDelayBy
        ])

        let requestBuilder: RequestBuilder<TriggerEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Get topics available for organization
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProcessautomationTriggersTopics(before: String? = nil, after: String? = nil, pageSize: String? = nil, completion: @escaping ((_ data: TopicCursorEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getProcessautomationTriggersTopicsWithRequestBuilder(before: before, after: after, pageSize: pageSize)
        requestBuilder.execute { (response: Response<TopicCursorEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get topics available for organization
     - GET /api/v2/processautomation/triggers/topics
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ "entities", "entities" ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)

     - returns: RequestBuilder<TopicCursorEntityListing> 
     */
    open class func getProcessautomationTriggersTopicsWithRequestBuilder(before: String? = nil, after: String? = nil, pageSize: String? = nil) -> RequestBuilder<TopicCursorEntityListing> {        
        let path = "/api/v2/processautomation/triggers/topics"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before, 
            "after": after, 
            "pageSize": pageSize
        ])

        let requestBuilder: RequestBuilder<TopicCursorEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Test the matching of a Trigger based on provided event body
     
     - parameter triggerId: (path) triggerId 
     - parameter body: (body) eventBody (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postProcessautomationTriggerTest(triggerId: String, body: String? = nil, completion: @escaping ((_ data: TestModeResults?,_ error: Error?) -> Void)) {
        let requestBuilder = postProcessautomationTriggerTestWithRequestBuilder(triggerId: triggerId, body: body)
        requestBuilder.execute { (response: Response<TestModeResults>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Test the matching of a Trigger based on provided event body
     - POST /api/v2/processautomation/triggers/{triggerId}/test
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jsonPathValidation" : "{}",
  "triggerMatches" : true,
  "schemaValidation" : "{}",
  "targetValidation" : "{}"
}, statusCode=200}]
     
     - parameter triggerId: (path) triggerId 
     - parameter body: (body) eventBody (optional)

     - returns: RequestBuilder<TestModeResults> 
     */
    open class func postProcessautomationTriggerTestWithRequestBuilder(triggerId: String, body: String? = nil) -> RequestBuilder<TestModeResults> {        
        var path = "/api/v2/processautomation/triggers/{triggerId}/test"
        let triggerIdPreEscape = "\(triggerId)"
        let triggerIdPostEscape = triggerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{triggerId}", with: triggerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestModeResults>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a Trigger
     
     - parameter body: (body) Input used to create a Trigger. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postProcessautomationTriggers(body: CreateTriggerRequest, completion: @escaping ((_ data: Trigger?,_ error: Error?) -> Void)) {
        let requestBuilder = postProcessautomationTriggersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Trigger>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a Trigger
     - POST /api/v2/processautomation/triggers
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "matchCriteria" : [ {
    "values" : [ null, null ],
    "jsonPath" : "jsonPath",
    "value" : "{}",
    "operator" : "GreaterThanOrEqual"
  }, {
    "values" : [ null, null ],
    "jsonPath" : "jsonPath",
    "value" : "{}",
    "operator" : "GreaterThanOrEqual"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "topicName" : "topicName",
  "delayBySeconds" : 1,
  "description" : "description",
  "id" : "id",
  "version" : 0,
  "eventTTLSeconds" : 6,
  "enabled" : true,
  "target" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Input used to create a Trigger. 

     - returns: RequestBuilder<Trigger> 
     */
    open class func postProcessautomationTriggersWithRequestBuilder(body: CreateTriggerRequest) -> RequestBuilder<Trigger> {        
        let path = "/api/v2/processautomation/triggers"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Trigger>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Test the matching of all organization Triggers on given topic using provided event body
     
     - parameter topicName: (path) topicName 
     - parameter body: (body) eventBody (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postProcessautomationTriggersTopicTest(topicName: String, body: String? = nil, completion: @escaping ((_ data: TestModeEventResults?,_ error: Error?) -> Void)) {
        let requestBuilder = postProcessautomationTriggersTopicTestWithRequestBuilder(topicName: topicName, body: body)
        requestBuilder.execute { (response: Response<TestModeEventResults>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Test the matching of all organization Triggers on given topic using provided event body
     - POST /api/v2/processautomation/triggers/topics/{topicName}/test
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schemaValidation" : "{}",
  "triggerMatchValidation" : "{}"
}, statusCode=200}]
     
     - parameter topicName: (path) topicName 
     - parameter body: (body) eventBody (optional)

     - returns: RequestBuilder<TestModeEventResults> 
     */
    open class func postProcessautomationTriggersTopicTestWithRequestBuilder(topicName: String, body: String? = nil) -> RequestBuilder<TestModeEventResults> {        
        var path = "/api/v2/processautomation/triggers/topics/{topicName}/test"
        let topicNamePreEscape = "\(topicName)"
        let topicNamePostEscape = topicNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicName}", with: topicNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestModeEventResults>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update a Trigger
     
     - parameter triggerId: (path) triggerId 
     - parameter body: (body) Input to update Trigger. (topicName cannot be updated, a new trigger must be created to use a new topicName) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putProcessautomationTrigger(triggerId: String, body: UpdateTriggerRequest, completion: @escaping ((_ data: Trigger?,_ error: Error?) -> Void)) {
        let requestBuilder = putProcessautomationTriggerWithRequestBuilder(triggerId: triggerId, body: body)
        requestBuilder.execute { (response: Response<Trigger>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a Trigger
     - PUT /api/v2/processautomation/triggers/{triggerId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "matchCriteria" : [ {
    "values" : [ null, null ],
    "jsonPath" : "jsonPath",
    "value" : "{}",
    "operator" : "GreaterThanOrEqual"
  }, {
    "values" : [ null, null ],
    "jsonPath" : "jsonPath",
    "value" : "{}",
    "operator" : "GreaterThanOrEqual"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "topicName" : "topicName",
  "delayBySeconds" : 1,
  "description" : "description",
  "id" : "id",
  "version" : 0,
  "eventTTLSeconds" : 6,
  "enabled" : true,
  "target" : "{}"
}, statusCode=200}]
     
     - parameter triggerId: (path) triggerId 
     - parameter body: (body) Input to update Trigger. (topicName cannot be updated, a new trigger must be created to use a new topicName) 

     - returns: RequestBuilder<Trigger> 
     */
    open class func putProcessautomationTriggerWithRequestBuilder(triggerId: String, body: UpdateTriggerRequest) -> RequestBuilder<Trigger> {        
        var path = "/api/v2/processautomation/triggers/{triggerId}"
        let triggerIdPreEscape = "\(triggerId)"
        let triggerIdPostEscape = triggerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{triggerId}", with: triggerIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Trigger>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
