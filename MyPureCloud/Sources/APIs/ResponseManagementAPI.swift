//
// ResponseManagementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ResponseManagementAPI {
    
    /**
     Delete an existing response library.
     
     - parameter libraryId: (path) Library ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteResponsemanagementLibrary(libraryId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteResponsemanagementLibraryWithRequestBuilder(libraryId: libraryId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing response library.
     - DELETE /api/v2/responsemanagement/libraries/{libraryId}
     - This will remove any responses associated with the library.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter libraryId: (path) Library ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteResponsemanagementLibraryWithRequestBuilder(libraryId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/responsemanagement/libraries/{libraryId}"
        let libraryIdPreEscape = "\(libraryId)"
        let libraryIdPostEscape = libraryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{libraryId}", with: libraryIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete an existing response.
     
     - parameter responseId: (path) Response ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteResponsemanagementResponse(responseId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteResponsemanagementResponseWithRequestBuilder(responseId: responseId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing response.
     - DELETE /api/v2/responsemanagement/responses/{responseId}
     - This will remove the response from any libraries associated with it.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter responseId: (path) Response ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteResponsemanagementResponseWithRequestBuilder(responseId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/responsemanagement/responses/{responseId}"
        let responseIdPreEscape = "\(responseId)"
        let responseIdPostEscape = responseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{responseId}", with: responseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete response asset
     
     - parameter responseAssetId: (path) Asset Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteResponsemanagementResponseasset(responseAssetId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteResponsemanagementResponseassetWithRequestBuilder(responseAssetId: responseAssetId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete response asset
     - DELETE /api/v2/responsemanagement/responseassets/{responseAssetId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter responseAssetId: (path) Asset Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteResponsemanagementResponseassetWithRequestBuilder(responseAssetId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/responsemanagement/responseassets/{responseAssetId}"
        let responseAssetIdPreEscape = "\(responseAssetId)"
        let responseAssetIdPostEscape = responseAssetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{responseAssetId}", with: responseAssetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    public enum MessagingTemplateFilter_getResponsemanagementLibraries: String { 
        case whatsapp = "whatsapp"
    }

    
    
    /**
     Gets a list of existing response libraries.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter messagingTemplateFilter: (query) Returns a list of libraries that contain responses with at least one messaging template defined for a specific message channel (optional)
     - parameter libraryPrefix: (query) Returns a list of libraries that contain the prefix provided (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResponsemanagementLibraries(pageNumber: Int? = nil, pageSize: Int? = nil, messagingTemplateFilter: MessagingTemplateFilter_getResponsemanagementLibraries? = nil, libraryPrefix: String? = nil, completion: @escaping ((_ data: LibraryEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getResponsemanagementLibrariesWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, messagingTemplateFilter: messagingTemplateFilter, libraryPrefix: libraryPrefix)
        requestBuilder.execute { (response: Response<LibraryEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Gets a list of existing response libraries.
     - GET /api/v2/responsemanagement/libraries
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "pageCount" : 5,
  "pageNumber" : 1,
  "entities" : [ {
    "responseType" : "MessagingTemplate",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "version" : 0
  }, {
    "responseType" : "MessagingTemplate",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "version" : 0
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 6,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter messagingTemplateFilter: (query) Returns a list of libraries that contain responses with at least one messaging template defined for a specific message channel (optional)
     - parameter libraryPrefix: (query) Returns a list of libraries that contain the prefix provided (optional)

     - returns: RequestBuilder<LibraryEntityListing> 
     */
    open class func getResponsemanagementLibrariesWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, messagingTemplateFilter: MessagingTemplateFilter_getResponsemanagementLibraries? = nil, libraryPrefix: String? = nil) -> RequestBuilder<LibraryEntityListing> {        
        let path = "/api/v2/responsemanagement/libraries"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "messagingTemplateFilter": messagingTemplateFilter?.rawValue, 
            "libraryPrefix": libraryPrefix
        ])

        let requestBuilder: RequestBuilder<LibraryEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get details about an existing response library.
     
     - parameter libraryId: (path) Library ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResponsemanagementLibrary(libraryId: String, completion: @escaping ((_ data: Library?,_ error: Error?) -> Void)) {
        let requestBuilder = getResponsemanagementLibraryWithRequestBuilder(libraryId: libraryId)
        requestBuilder.execute { (response: Response<Library>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about an existing response library.
     - GET /api/v2/responsemanagement/libraries/{libraryId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "responseType" : "MessagingTemplate",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "version" : 0
}, statusCode=200}]
     
     - parameter libraryId: (path) Library ID 

     - returns: RequestBuilder<Library> 
     */
    open class func getResponsemanagementLibraryWithRequestBuilder(libraryId: String) -> RequestBuilder<Library> {        
        var path = "/api/v2/responsemanagement/libraries/{libraryId}"
        let libraryIdPreEscape = "\(libraryId)"
        let libraryIdPostEscape = libraryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{libraryId}", with: libraryIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Library>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum Expand_getResponsemanagementResponse: String { 
        case substitutionsschema = "substitutionsSchema"
    }

    
    /**
     Get details about an existing response.
     
     - parameter responseId: (path) Response ID 
     - parameter expand: (query) Expand instructions for the return value. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResponsemanagementResponse(responseId: String, expand: Expand_getResponsemanagementResponse? = nil, completion: @escaping ((_ data: ModelResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getResponsemanagementResponseWithRequestBuilder(responseId: responseId, expand: expand)
        requestBuilder.execute { (response: Response<ModelResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about an existing response.
     - GET /api/v2/responsemanagement/responses/{responseId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "substitutionsSchema" : "{}",
  "footer" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "libraries" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "version" : 0,
  "responseType" : "MessagingTemplate",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "assets" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "texts" : [ {
    "contentType" : "text/plain",
    "content" : "content"
  }, {
    "contentType" : "text/plain",
    "content" : "content"
  } ],
  "substitutions" : [ {
    "defaultValue" : "defaultValue",
    "description" : "description",
    "id" : "id"
  }, {
    "defaultValue" : "defaultValue",
    "description" : "description",
    "id" : "id"
  } ],
  "createdBy" : "{}",
  "interactionType" : "chat",
  "messagingTemplate" : "{}",
  "name" : "name",
  "id" : "id"
}, statusCode=200}]
     
     - parameter responseId: (path) Response ID 
     - parameter expand: (query) Expand instructions for the return value. (optional)

     - returns: RequestBuilder<ModelResponse> 
     */
    open class func getResponsemanagementResponseWithRequestBuilder(responseId: String, expand: Expand_getResponsemanagementResponse? = nil) -> RequestBuilder<ModelResponse> {        
        var path = "/api/v2/responsemanagement/responses/{responseId}"
        let responseIdPreEscape = "\(responseId)"
        let responseIdPostEscape = responseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{responseId}", with: responseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<ModelResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get response asset information
     
     - parameter responseAssetId: (path) Asset Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResponsemanagementResponseasset(responseAssetId: String, completion: @escaping ((_ data: ResponseAsset?,_ error: Error?) -> Void)) {
        let requestBuilder = getResponsemanagementResponseassetWithRequestBuilder(responseAssetId: responseAssetId)
        requestBuilder.execute { (response: Response<ResponseAsset>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get response asset information
     - GET /api/v2/responsemanagement/responseassets/{responseAssetId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "responses" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "contentLength" : 0,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "contentLocation" : "contentLocation",
  "contentType" : "contentType"
}, statusCode=200}]
     
     - parameter responseAssetId: (path) Asset Id 

     - returns: RequestBuilder<ResponseAsset> 
     */
    open class func getResponsemanagementResponseassetWithRequestBuilder(responseAssetId: String) -> RequestBuilder<ResponseAsset> {        
        var path = "/api/v2/responsemanagement/responseassets/{responseAssetId}"
        let responseAssetIdPreEscape = "\(responseAssetId)"
        let responseAssetIdPostEscape = responseAssetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{responseAssetId}", with: responseAssetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseAsset>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get response asset upload status
     
     - parameter statusId: (path) Status Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResponsemanagementResponseassetsStatusStatusId(statusId: String, completion: @escaping ((_ data: ResponseAssetStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getResponsemanagementResponseassetsStatusStatusIdWithRequestBuilder(statusId: statusId)
        requestBuilder.execute { (response: Response<ResponseAssetStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get response asset upload status
     - GET /api/v2/responsemanagement/responseassets/status/{statusId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "errorMessage",
  "errorCode" : "errorCode",
  "id" : "id",
  "status" : "InProgress"
}, statusCode=200}]
     
     - parameter statusId: (path) Status Id 

     - returns: RequestBuilder<ResponseAssetStatus> 
     */
    open class func getResponsemanagementResponseassetsStatusStatusIdWithRequestBuilder(statusId: String) -> RequestBuilder<ResponseAssetStatus> {        
        var path = "/api/v2/responsemanagement/responseassets/status/{statusId}"
        let statusIdPreEscape = "\(statusId)"
        let statusIdPostEscape = statusIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statusId}", with: statusIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseAssetStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Expand_getResponsemanagementResponses: String { 
        case substitutionsschema = "substitutionsSchema"
    }

    
    /**
     Gets a list of existing responses.
     
     - parameter libraryId: (query) Library ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter expand: (query) Expand instructions for the return value. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getResponsemanagementResponses(libraryId: String, pageNumber: Int? = nil, pageSize: Int? = nil, expand: Expand_getResponsemanagementResponses? = nil, completion: @escaping ((_ data: ResponseEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getResponsemanagementResponsesWithRequestBuilder(libraryId: libraryId, pageNumber: pageNumber, pageSize: pageSize, expand: expand)
        requestBuilder.execute { (response: Response<ResponseEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Gets a list of existing responses.
     - GET /api/v2/responsemanagement/responses
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "substitutionsSchema" : "{}",
    "footer" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "libraries" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "version" : 0,
    "responseType" : "MessagingTemplate",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "assets" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "texts" : [ {
      "contentType" : "text/plain",
      "content" : "content"
    }, {
      "contentType" : "text/plain",
      "content" : "content"
    } ],
    "substitutions" : [ {
      "defaultValue" : "defaultValue",
      "description" : "description",
      "id" : "id"
    }, {
      "defaultValue" : "defaultValue",
      "description" : "description",
      "id" : "id"
    } ],
    "createdBy" : "{}",
    "interactionType" : "chat",
    "messagingTemplate" : "{}",
    "name" : "name",
    "id" : "id"
  }, {
    "substitutionsSchema" : "{}",
    "footer" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "libraries" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "version" : 0,
    "responseType" : "MessagingTemplate",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "assets" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "texts" : [ {
      "contentType" : "text/plain",
      "content" : "content"
    }, {
      "contentType" : "text/plain",
      "content" : "content"
    } ],
    "substitutions" : [ {
      "defaultValue" : "defaultValue",
      "description" : "description",
      "id" : "id"
    }, {
      "defaultValue" : "defaultValue",
      "description" : "description",
      "id" : "id"
    } ],
    "createdBy" : "{}",
    "interactionType" : "chat",
    "messagingTemplate" : "{}",
    "name" : "name",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter libraryId: (query) Library ID 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter expand: (query) Expand instructions for the return value. (optional)

     - returns: RequestBuilder<ResponseEntityListing> 
     */
    open class func getResponsemanagementResponsesWithRequestBuilder(libraryId: String, pageNumber: Int? = nil, pageSize: Int? = nil, expand: Expand_getResponsemanagementResponses? = nil) -> RequestBuilder<ResponseEntityListing> {        
        let path = "/api/v2/responsemanagement/responses"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "libraryId": libraryId, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<ResponseEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Create a response library.
     
     - parameter body: (body) Library 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postResponsemanagementLibraries(body: Library, completion: @escaping ((_ data: Library?,_ error: Error?) -> Void)) {
        let requestBuilder = postResponsemanagementLibrariesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Library>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a response library.
     - POST /api/v2/responsemanagement/libraries
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "responseType" : "MessagingTemplate",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "version" : 0
}, statusCode=200}]
     
     - parameter body: (body) Library 

     - returns: RequestBuilder<Library> 
     */
    open class func postResponsemanagementLibrariesWithRequestBuilder(body: Library) -> RequestBuilder<Library> {        
        let path = "/api/v2/responsemanagement/libraries"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Library>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Search response assets
     
     - parameter body: (body) request 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postResponsemanagementResponseassetsSearch(body: ResponseAssetSearchRequest, expand: [String]? = nil, completion: @escaping ((_ data: ResponseAssetSearchResults?,_ error: Error?) -> Void)) {
        let requestBuilder = postResponsemanagementResponseassetsSearchWithRequestBuilder(body: body, expand: expand)
        requestBuilder.execute { (response: Response<ResponseAssetSearchResults>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search response assets
     - POST /api/v2/responsemanagement/responseassets/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "pageNumber" : 5,
  "pageSize" : 1,
  "results" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "responses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "contentLength" : 0,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "contentLocation" : "contentLocation",
    "contentType" : "contentType"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "responses" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "contentLength" : 0,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "contentLocation" : "contentLocation",
    "contentType" : "contentType"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) request 
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<ResponseAssetSearchResults> 
     */
    open class func postResponsemanagementResponseassetsSearchWithRequestBuilder(body: ResponseAssetSearchRequest, expand: [String]? = nil) -> RequestBuilder<ResponseAssetSearchResults> {        
        let path = "/api/v2/responsemanagement/responseassets/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<ResponseAssetSearchResults>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Creates pre-signed url for uploading response asset
     
     - parameter body: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postResponsemanagementResponseassetsUploads(body: CreateResponseAssetRequest, completion: @escaping ((_ data: CreateResponseAssetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postResponsemanagementResponseassetsUploadsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CreateResponseAssetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Creates pre-signed url for uploading response asset
     - POST /api/v2/responsemanagement/responseassets/uploads
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "headers" : {
    "key" : "headers"
  },
  "id" : "id",
  "url" : "url"
}, statusCode=200}]
     
     - parameter body: (body) request 

     - returns: RequestBuilder<CreateResponseAssetResponse> 
     */
    open class func postResponsemanagementResponseassetsUploadsWithRequestBuilder(body: CreateResponseAssetRequest) -> RequestBuilder<CreateResponseAssetResponse> {        
        let path = "/api/v2/responsemanagement/responseassets/uploads"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateResponseAssetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    public enum Expand_postResponsemanagementResponses: String { 
        case substitutionsschema = "substitutionsSchema"
    }

    
    /**
     Create a response.
     
     - parameter body: (body) Response 
     - parameter expand: (query) Expand instructions for the return value. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postResponsemanagementResponses(body: ModelResponse, expand: Expand_postResponsemanagementResponses? = nil, completion: @escaping ((_ data: ModelResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postResponsemanagementResponsesWithRequestBuilder(body: body, expand: expand)
        requestBuilder.execute { (response: Response<ModelResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a response.
     - POST /api/v2/responsemanagement/responses
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "substitutionsSchema" : "{}",
  "footer" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "libraries" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "version" : 0,
  "responseType" : "MessagingTemplate",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "assets" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "texts" : [ {
    "contentType" : "text/plain",
    "content" : "content"
  }, {
    "contentType" : "text/plain",
    "content" : "content"
  } ],
  "substitutions" : [ {
    "defaultValue" : "defaultValue",
    "description" : "description",
    "id" : "id"
  }, {
    "defaultValue" : "defaultValue",
    "description" : "description",
    "id" : "id"
  } ],
  "createdBy" : "{}",
  "interactionType" : "chat",
  "messagingTemplate" : "{}",
  "name" : "name",
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Response 
     - parameter expand: (query) Expand instructions for the return value. (optional)

     - returns: RequestBuilder<ModelResponse> 
     */
    open class func postResponsemanagementResponsesWithRequestBuilder(body: ModelResponse, expand: Expand_postResponsemanagementResponses? = nil) -> RequestBuilder<ModelResponse> {        
        let path = "/api/v2/responsemanagement/responses"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<ModelResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query responses
     
     - parameter body: (body) Response 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postResponsemanagementResponsesQuery(body: ResponseQueryRequest, completion: @escaping ((_ data: ResponseQueryResults?,_ error: Error?) -> Void)) {
        let requestBuilder = postResponsemanagementResponsesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ResponseQueryResults>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query responses
     - POST /api/v2/responsemanagement/responses/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Response 

     - returns: RequestBuilder<ResponseQueryResults> 
     */
    open class func postResponsemanagementResponsesQueryWithRequestBuilder(body: ResponseQueryRequest) -> RequestBuilder<ResponseQueryResults> {        
        let path = "/api/v2/responsemanagement/responses/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseQueryResults>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update an existing response library.
     
     - parameter libraryId: (path) Library ID 
     - parameter body: (body) Library 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putResponsemanagementLibrary(libraryId: String, body: Library, completion: @escaping ((_ data: Library?,_ error: Error?) -> Void)) {
        let requestBuilder = putResponsemanagementLibraryWithRequestBuilder(libraryId: libraryId, body: body)
        requestBuilder.execute { (response: Response<Library>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an existing response library.
     - PUT /api/v2/responsemanagement/libraries/{libraryId}
     - Fields that can be updated: name. The most recent version is required for updates.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "responseType" : "MessagingTemplate",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "version" : 0
}, statusCode=200}]
     
     - parameter libraryId: (path) Library ID 
     - parameter body: (body) Library 

     - returns: RequestBuilder<Library> 
     */
    open class func putResponsemanagementLibraryWithRequestBuilder(libraryId: String, body: Library) -> RequestBuilder<Library> {        
        var path = "/api/v2/responsemanagement/libraries/{libraryId}"
        let libraryIdPreEscape = "\(libraryId)"
        let libraryIdPostEscape = libraryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{libraryId}", with: libraryIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Library>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    public enum Expand_putResponsemanagementResponse: String { 
        case substitutionsschema = "substitutionsSchema"
    }

    
    /**
     Update an existing response.
     
     - parameter responseId: (path) Response ID 
     - parameter body: (body) Response 
     - parameter expand: (query) Expand instructions for the return value. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putResponsemanagementResponse(responseId: String, body: ModelResponse, expand: Expand_putResponsemanagementResponse? = nil, completion: @escaping ((_ data: ModelResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putResponsemanagementResponseWithRequestBuilder(responseId: responseId, body: body, expand: expand)
        requestBuilder.execute { (response: Response<ModelResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an existing response.
     - PUT /api/v2/responsemanagement/responses/{responseId}
     - Fields that can be updated: name, libraries, and texts. The most recent version is required for updates.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "substitutionsSchema" : "{}",
  "footer" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "libraries" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "version" : 0,
  "responseType" : "MessagingTemplate",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "assets" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "texts" : [ {
    "contentType" : "text/plain",
    "content" : "content"
  }, {
    "contentType" : "text/plain",
    "content" : "content"
  } ],
  "substitutions" : [ {
    "defaultValue" : "defaultValue",
    "description" : "description",
    "id" : "id"
  }, {
    "defaultValue" : "defaultValue",
    "description" : "description",
    "id" : "id"
  } ],
  "createdBy" : "{}",
  "interactionType" : "chat",
  "messagingTemplate" : "{}",
  "name" : "name",
  "id" : "id"
}, statusCode=200}]
     
     - parameter responseId: (path) Response ID 
     - parameter body: (body) Response 
     - parameter expand: (query) Expand instructions for the return value. (optional)

     - returns: RequestBuilder<ModelResponse> 
     */
    open class func putResponsemanagementResponseWithRequestBuilder(responseId: String, body: ModelResponse, expand: Expand_putResponsemanagementResponse? = nil) -> RequestBuilder<ModelResponse> {        
        var path = "/api/v2/responsemanagement/responses/{responseId}"
        let responseIdPreEscape = "\(responseId)"
        let responseIdPostEscape = responseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{responseId}", with: responseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<ModelResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update response asset
     
     - parameter responseAssetId: (path) Asset Id 
     - parameter body: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putResponsemanagementResponseasset(responseAssetId: String, body: ResponseAssetRequest, completion: @escaping ((_ data: ResponseAsset?,_ error: Error?) -> Void)) {
        let requestBuilder = putResponsemanagementResponseassetWithRequestBuilder(responseAssetId: responseAssetId, body: body)
        requestBuilder.execute { (response: Response<ResponseAsset>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update response asset
     - PUT /api/v2/responsemanagement/responseassets/{responseAssetId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "responses" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "contentLength" : 0,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "contentLocation" : "contentLocation",
  "contentType" : "contentType"
}, statusCode=200}]
     
     - parameter responseAssetId: (path) Asset Id 
     - parameter body: (body) request 

     - returns: RequestBuilder<ResponseAsset> 
     */
    open class func putResponsemanagementResponseassetWithRequestBuilder(responseAssetId: String, body: ResponseAssetRequest) -> RequestBuilder<ResponseAsset> {        
        var path = "/api/v2/responsemanagement/responseassets/{responseAssetId}"
        let responseAssetIdPreEscape = "\(responseAssetId)"
        let responseAssetIdPostEscape = responseAssetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{responseAssetId}", with: responseAssetIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ResponseAsset>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
