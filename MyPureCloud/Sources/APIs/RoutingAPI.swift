//
// RoutingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class RoutingAPI {
    
    /**
     Delete single benefit assessment.
     
     - parameter assessmentId: (path) Benefit Assessment ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingAssessment(assessmentId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingAssessmentWithRequestBuilder(assessmentId: assessmentId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete single benefit assessment.
     - DELETE /api/v2/routing/assessments/{assessmentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter assessmentId: (path) Benefit Assessment ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingAssessmentWithRequestBuilder(assessmentId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/assessments/{assessmentId}"
        let assessmentIdPreEscape = "\(assessmentId)"
        let assessmentIdPostEscape = assessmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assessmentId}", with: assessmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a domain
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingEmailDomain(domainId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingEmailDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a domain
     - DELETE /api/v2/routing/email/domains/{domainId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingEmailDomainWithRequestBuilder(domainId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/email/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a route
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingEmailDomainRoute(domainName: String, routeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingEmailDomainRouteWithRequestBuilder(domainName: domainName, routeId: routeId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a route
     - DELETE /api/v2/routing/email/domains/{domainName}/routes/{routeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingEmailDomainRouteWithRequestBuilder(domainName: String, routeId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{routeId}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete an outbound domain
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingEmailOutboundDomain(domainId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingEmailOutboundDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an outbound domain
     - DELETE /api/v2/routing/email/outbound/domains/{domainId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingEmailOutboundDomainWithRequestBuilder(domainId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/email/outbound/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a routing language
     
     - parameter languageId: (path) Language ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingLanguage(languageId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingLanguageWithRequestBuilder(languageId: languageId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a routing language
     - DELETE /api/v2/routing/languages/{languageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter languageId: (path) Language ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingLanguageWithRequestBuilder(languageId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/languages/{languageId}"
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete single predictor.
     
     - parameter predictorId: (path) Predictor ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingPredictor(predictorId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingPredictorWithRequestBuilder(predictorId: predictorId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete single predictor.
     - DELETE /api/v2/routing/predictors/{predictorId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter predictorId: (path) Predictor ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingPredictorWithRequestBuilder(predictorId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/predictors/{predictorId}"
        let predictorIdPreEscape = "\(predictorId)"
        let predictorIdPostEscape = predictorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{predictorId}", with: predictorIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter forceDelete: (query) forceDelete (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingQueue(queueId: String, forceDelete: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingQueueWithRequestBuilder(queueId: queueId, forceDelete: forceDelete)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a queue
     - DELETE /api/v2/routing/queues/{queueId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter forceDelete: (query) forceDelete (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingQueueWithRequestBuilder(queueId: String, forceDelete: Bool? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "forceDelete": forceDelete
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a queue member.
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingQueueMember(queueId: String, memberId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingQueueMemberWithRequestBuilder(queueId: queueId, memberId: memberId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a queue member.
     - DELETE /api/v2/routing/queues/{queueId}/members/{memberId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingQueueMemberWithRequestBuilder(queueId: String, memberId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/queues/{queueId}/members/{memberId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     DEPRECATED: use DELETE /routing/queues/{queueId}/members/{memberId}.  Delete queue member.
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingQueueUser(queueId: String, memberId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingQueueUserWithRequestBuilder(queueId: queueId, memberId: memberId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     DEPRECATED: use DELETE /routing/queues/{queueId}/members/{memberId}.  Delete queue member.
     - DELETE /api/v2/routing/queues/{queueId}/users/{memberId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingQueueUserWithRequestBuilder(queueId: String, memberId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/queues/{queueId}/users/{memberId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a wrap-up code from a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingQueueWrapupcode(queueId: String, codeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingQueueWrapupcodeWithRequestBuilder(queueId: queueId, codeId: codeId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a wrap-up code from a queue
     - DELETE /api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingQueueWrapupcodeWithRequestBuilder(queueId: String, codeId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeId}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete an organization's routing settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingSettings(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an organization's routing settings
     - DELETE /api/v2/routing/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingSettingsWithRequestBuilder() -> RequestBuilder<Void> {        
        let path = "/api/v2/routing/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete Routing Skill
     
     - parameter skillId: (path) Skill ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingSkill(skillId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingSkillWithRequestBuilder(skillId: skillId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete Routing Skill
     - DELETE /api/v2/routing/skills/{skillId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter skillId: (path) Skill ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingSkillWithRequestBuilder(skillId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/skills/{skillId}"
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Remove skill group definition
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingSkillgroup(skillGroupId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingSkillgroupWithRequestBuilder(skillGroupId: skillGroupId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove skill group definition
     - DELETE /api/v2/routing/skillgroups/{skillGroupId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter skillGroupId: (path) Skill Group ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingSkillgroupWithRequestBuilder(skillGroupId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/skillgroups/{skillGroupId}"
        let skillGroupIdPreEscape = "\(skillGroupId)"
        let skillGroupIdPostEscape = skillGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillGroupId}", with: skillGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete an Address by Id for SMS
     
     - parameter addressId: (path) Address ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingSmsAddress(addressId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingSmsAddressWithRequestBuilder(addressId: addressId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete an Address by Id for SMS
     - DELETE /api/v2/routing/sms/addresses/{addressId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter addressId: (path) Address ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingSmsAddressWithRequestBuilder(addressId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/sms/addresses/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a phone number provisioned for SMS.
     
     - parameter addressId: (path) Address ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingSmsPhonenumber(addressId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingSmsPhonenumberWithRequestBuilder(addressId: addressId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a phone number provisioned for SMS.
     - DELETE /api/v2/routing/sms/phonenumbers/{addressId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter addressId: (path) Address ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingSmsPhonenumberWithRequestBuilder(addressId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/sms/phonenumbers/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete the user's max utilization settings and revert to the organization-wide default.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingUserUtilization(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingUserUtilizationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete the user's max utilization settings and revert to the organization-wide default.
     - DELETE /api/v2/routing/users/{userId}/utilization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingUserUtilizationWithRequestBuilder(userId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete the organization-wide max utilization settings and revert to the system default.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingUtilization(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingUtilizationWithRequestBuilder()
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete the organization-wide max utilization settings and revert to the system default.
     - DELETE /api/v2/routing/utilization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingUtilizationWithRequestBuilder() -> RequestBuilder<Void> {        
        let path = "/api/v2/routing/utilization"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete wrap-up code
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingWrapupcode(codeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingWrapupcodeWithRequestBuilder(codeId: codeId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete wrap-up code
     - DELETE /api/v2/routing/wrapupcodes/{codeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter codeId: (path) Wrapup Code ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingWrapupcodeWithRequestBuilder(codeId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/wrapupcodes/{codeId}"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeId}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Remove routing language from user
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserRoutinglanguage(userId: String, languageId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserRoutinglanguageWithRequestBuilder(userId: userId, languageId: languageId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove routing language from user
     - DELETE /api/v2/users/{userId}/routinglanguages/{languageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserRoutinglanguageWithRequestBuilder(userId: String, languageId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/routinglanguages/{languageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Remove routing skill from user
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserRoutingskill(userId: String, skillId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserRoutingskillWithRequestBuilder(userId: userId, skillId: skillId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove routing skill from user
     - DELETE /api/v2/users/{userId}/routingskills/{skillId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserRoutingskillWithRequestBuilder(userId: String, skillId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Retrieve a single benefit assessment.
     
     - parameter assessmentId: (path) Benefit Assessment ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingAssessment(assessmentId: String, completion: @escaping ((_ data: BenefitAssessment?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingAssessmentWithRequestBuilder(assessmentId: assessmentId)
        requestBuilder.execute { (response: Response<BenefitAssessment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single benefit assessment.
     - GET /api/v2/routing/assessments/{assessmentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "queues" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Created",
  "kpiAssessments" : [ {
    "assessmentResult" : "Unknown",
    "checks" : [ {
      "result" : "Passed",
      "type" : "HandleTimeValue"
    }, {
      "result" : "Passed",
      "type" : "HandleTimeValue"
    } ],
    "kpi" : "kpi"
  }, {
    "assessmentResult" : "Unknown",
    "checks" : [ {
      "result" : "Passed",
      "type" : "HandleTimeValue"
    }, {
      "result" : "Passed",
      "type" : "HandleTimeValue"
    } ],
    "kpi" : "kpi"
  } ]
}, statusCode=200}]
     
     - parameter assessmentId: (path) Benefit Assessment ID 

     - returns: RequestBuilder<BenefitAssessment> 
     */
    open class func getRoutingAssessmentWithRequestBuilder(assessmentId: String) -> RequestBuilder<BenefitAssessment> {        
        var path = "/api/v2/routing/assessments/{assessmentId}"
        let assessmentIdPreEscape = "\(assessmentId)"
        let assessmentIdPostEscape = assessmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{assessmentId}", with: assessmentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BenefitAssessment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     Retrieve all benefit assessments.
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter queueId: (query) Queue ID(s) to filter assessments by. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingAssessments(before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, queueId: [String]? = nil, completion: @escaping ((_ data: AssessmentListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingAssessmentsWithRequestBuilder(before: before, after: after, limit: limit, pageSize: pageSize, queueId: queueId)
        requestBuilder.execute { (response: Response<AssessmentListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all benefit assessments.
     - GET /api/v2/routing/assessments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "Created",
    "kpiAssessments" : [ {
      "assessmentResult" : "Unknown",
      "checks" : [ {
        "result" : "Passed",
        "type" : "HandleTimeValue"
      }, {
        "result" : "Passed",
        "type" : "HandleTimeValue"
      } ],
      "kpi" : "kpi"
    }, {
      "assessmentResult" : "Unknown",
      "checks" : [ {
        "result" : "Passed",
        "type" : "HandleTimeValue"
      }, {
        "result" : "Passed",
        "type" : "HandleTimeValue"
      } ],
      "kpi" : "kpi"
    } ]
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "Created",
    "kpiAssessments" : [ {
      "assessmentResult" : "Unknown",
      "checks" : [ {
        "result" : "Passed",
        "type" : "HandleTimeValue"
      }, {
        "result" : "Passed",
        "type" : "HandleTimeValue"
      } ],
      "kpi" : "kpi"
    }, {
      "assessmentResult" : "Unknown",
      "checks" : [ {
        "result" : "Passed",
        "type" : "HandleTimeValue"
      }, {
        "result" : "Passed",
        "type" : "HandleTimeValue"
      } ],
      "kpi" : "kpi"
    } ]
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter queueId: (query) Queue ID(s) to filter assessments by. (optional)

     - returns: RequestBuilder<AssessmentListing> 
     */
    open class func getRoutingAssessmentsWithRequestBuilder(before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, queueId: [String]? = nil) -> RequestBuilder<AssessmentListing> {        
        let path = "/api/v2/routing/assessments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before, 
            "after": after, 
            "limit": limit, 
            "pageSize": pageSize, 
            "queueId": queueId
        ])

        let requestBuilder: RequestBuilder<AssessmentListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a single benefit assessments job.
     
     - parameter jobId: (path) Benefit Assessment Job ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingAssessmentsJob(jobId: String, completion: @escaping ((_ data: BenefitAssessmentJob?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingAssessmentsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<BenefitAssessmentJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single benefit assessments job.
     - GET /api/v2/routing/assessments/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Created"
}, statusCode=200}]
     
     - parameter jobId: (path) Benefit Assessment Job ID 

     - returns: RequestBuilder<BenefitAssessmentJob> 
     */
    open class func getRoutingAssessmentsJobWithRequestBuilder(jobId: String) -> RequestBuilder<BenefitAssessmentJob> {        
        var path = "/api/v2/routing/assessments/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BenefitAssessmentJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve all benefit assessment jobs.
     
     - parameter divisionId: (query) Division ID(s) to filter assessment jobs by. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingAssessmentsJobs(divisionId: [String]? = nil, completion: @escaping ((_ data: AssessmentJobListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingAssessmentsJobsWithRequestBuilder(divisionId: divisionId)
        requestBuilder.execute { (response: Response<AssessmentJobListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all benefit assessment jobs.
     - GET /api/v2/routing/assessments/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "Created"
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "Created"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter divisionId: (query) Division ID(s) to filter assessment jobs by. (optional)

     - returns: RequestBuilder<AssessmentJobListing> 
     */
    open class func getRoutingAssessmentsJobsWithRequestBuilder(divisionId: [String]? = nil) -> RequestBuilder<AssessmentJobListing> {        
        let path = "/api/v2/routing/assessments/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "divisionId": divisionId
        ])

        let requestBuilder: RequestBuilder<AssessmentJobListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get available media types
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingAvailablemediatypes(completion: @escaping ((_ data: AvailableMediaTypeEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingAvailablemediatypesWithRequestBuilder()
        requestBuilder.execute { (response: Response<AvailableMediaTypeEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get available media types
     - GET /api/v2/routing/availablemediatypes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "availableSubTypes" : [ "availableSubTypes", "availableSubTypes" ],
    "mediaType" : "mediaType"
  }, {
    "availableSubTypes" : [ "availableSubTypes", "availableSubTypes" ],
    "mediaType" : "mediaType"
  } ]
}, statusCode=200}]

     - returns: RequestBuilder<AvailableMediaTypeEntityListing> 
     */
    open class func getRoutingAvailablemediatypesWithRequestBuilder() -> RequestBuilder<AvailableMediaTypeEntityListing> {        
        let path = "/api/v2/routing/availablemediatypes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AvailableMediaTypeEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get domain
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailDomain(domainId: String, completion: @escaping ((_ data: InboundDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<InboundDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get domain
     - GET /api/v2/routing/email/domains/{domainId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "customSMTPServer" : "{}",
  "mailFromSettings" : "{}",
  "subDomain" : true,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "mxRecordStatus" : "VALID",
  "id" : "id"
}, statusCode=200}]
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<InboundDomain> 
     */
    open class func getRoutingEmailDomainWithRequestBuilder(domainId: String) -> RequestBuilder<InboundDomain> {        
        var path = "/api/v2/routing/email/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a route
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailDomainRoute(domainName: String, routeId: String, completion: @escaping ((_ data: InboundRoute?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailDomainRouteWithRequestBuilder(domainName: domainName, routeId: routeId)
        requestBuilder.execute { (response: Response<InboundRoute>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a route
     - GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "signature" : "{}",
  "replyEmailAddress" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "pattern" : "pattern",
  "language" : "{}",
  "autoBcc" : [ {
    "name" : "name",
    "email" : "email"
  }, {
    "name" : "name",
    "email" : "email"
  } ],
  "priority" : 7,
  "fromEmail" : "fromEmail",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "allowMultipleActions" : true,
  "name" : "name",
  "fromName" : "fromName",
  "id" : "id",
  "historyInclusion" : "Include",
  "queue" : "{}",
  "flow" : "{}",
  "spamFlow" : "{}"
}, statusCode=200}]
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 

     - returns: RequestBuilder<InboundRoute> 
     */
    open class func getRoutingEmailDomainRouteWithRequestBuilder(domainName: String, routeId: String) -> RequestBuilder<InboundRoute> {        
        var path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{routeId}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundRoute>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Get routes
     
     - parameter domainName: (path) email domain 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pattern: (query) Filter routes by the route&#39;s pattern property (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailDomainRoutes(domainName: String, pageSize: Int? = nil, pageNumber: Int? = nil, pattern: String? = nil, completion: @escaping ((_ data: InboundRouteEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailDomainRoutesWithRequestBuilder(domainName: domainName, pageSize: pageSize, pageNumber: pageNumber, pattern: pattern)
        requestBuilder.execute { (response: Response<InboundRouteEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get routes
     - GET /api/v2/routing/email/domains/{domainName}/routes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "signature" : "{}",
    "replyEmailAddress" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "pattern" : "pattern",
    "language" : "{}",
    "autoBcc" : [ {
      "name" : "name",
      "email" : "email"
    }, {
      "name" : "name",
      "email" : "email"
    } ],
    "priority" : 7,
    "fromEmail" : "fromEmail",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "allowMultipleActions" : true,
    "name" : "name",
    "fromName" : "fromName",
    "id" : "id",
    "historyInclusion" : "Include",
    "queue" : "{}",
    "flow" : "{}",
    "spamFlow" : "{}"
  }, {
    "signature" : "{}",
    "replyEmailAddress" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "pattern" : "pattern",
    "language" : "{}",
    "autoBcc" : [ {
      "name" : "name",
      "email" : "email"
    }, {
      "name" : "name",
      "email" : "email"
    } ],
    "priority" : 7,
    "fromEmail" : "fromEmail",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "allowMultipleActions" : true,
    "name" : "name",
    "fromName" : "fromName",
    "id" : "id",
    "historyInclusion" : "Include",
    "queue" : "{}",
    "flow" : "{}",
    "spamFlow" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter domainName: (path) email domain 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter pattern: (query) Filter routes by the route&#39;s pattern property (optional)

     - returns: RequestBuilder<InboundRouteEntityListing> 
     */
    open class func getRoutingEmailDomainRoutesWithRequestBuilder(domainName: String, pageSize: Int? = nil, pageNumber: Int? = nil, pattern: String? = nil) -> RequestBuilder<InboundRouteEntityListing> {        
        var path = "/api/v2/routing/email/domains/{domainName}/routes"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pattern": pattern
        ])

        let requestBuilder: RequestBuilder<InboundRouteEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Get domains
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter excludeStatus: (query) Exclude MX record data (optional)
     - parameter filter: (query) Optional search filter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailDomains(pageSize: Int? = nil, pageNumber: Int? = nil, excludeStatus: Bool? = nil, filter: String? = nil, completion: @escaping ((_ data: InboundDomainEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailDomainsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, excludeStatus: excludeStatus, filter: filter)
        requestBuilder.execute { (response: Response<InboundDomainEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get domains
     - GET /api/v2/routing/email/domains
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "customSMTPServer" : "{}",
    "mailFromSettings" : "{}",
    "subDomain" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "mxRecordStatus" : "VALID",
    "id" : "id"
  }, {
    "customSMTPServer" : "{}",
    "mailFromSettings" : "{}",
    "subDomain" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "mxRecordStatus" : "VALID",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter excludeStatus: (query) Exclude MX record data (optional)
     - parameter filter: (query) Optional search filter (optional)

     - returns: RequestBuilder<InboundDomainEntityListing> 
     */
    open class func getRoutingEmailDomainsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, excludeStatus: Bool? = nil, filter: String? = nil) -> RequestBuilder<InboundDomainEntityListing> {        
        let path = "/api/v2/routing/email/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "excludeStatus": excludeStatus, 
            "filter": filter
        ])

        let requestBuilder: RequestBuilder<InboundDomainEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get domain
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailOutboundDomain(domainId: String, completion: @escaping ((_ data: OutboundDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailOutboundDomainWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<OutboundDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get domain
     - GET /api/v2/routing/email/outbound/domains/{domainId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cnameVerificationResult" : "{}",
  "dkimVerificationResult" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "senderType" : "Unknown",
  "id" : "id"
}, statusCode=200}]
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<OutboundDomain> 
     */
    open class func getRoutingEmailOutboundDomainWithRequestBuilder(domainId: String) -> RequestBuilder<OutboundDomain> {        
        var path = "/api/v2/routing/email/outbound/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutboundDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get activation status (cname + dkim) of an outbound domain
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailOutboundDomainActivation(domainId: String, completion: @escaping ((_ data: EmailOutboundDomainResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailOutboundDomainActivationWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<EmailOutboundDomainResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get activation status (cname + dkim) of an outbound domain
     - GET /api/v2/routing/email/outbound/domains/{domainId}/activation
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "senderStatus" : "RequestReceived",
  "domainName" : "domainName",
  "senderType" : "Unknown",
  "dnsTxtSendingRecord" : {
    "recordContents" : "recordContents",
    "verificationStatus" : "Pending",
    "host" : "host"
  },
  "dnsCnameBounceRecord" : {
    "recordContents" : "recordContents",
    "verificationStatus" : "Pending",
    "host" : "host"
  }
}, statusCode=200}]
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<EmailOutboundDomainResult> 
     */
    open class func getRoutingEmailOutboundDomainActivationWithRequestBuilder(domainId: String) -> RequestBuilder<EmailOutboundDomainResult> {        
        var path = "/api/v2/routing/email/outbound/domains/{domainId}/activation"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailOutboundDomainResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Search a domain across organizations
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailOutboundDomainSearch(domainId: String, completion: @escaping ((_ data: OutboundDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailOutboundDomainSearchWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<OutboundDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search a domain across organizations
     - GET /api/v2/routing/email/outbound/domains/{domainId}/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cnameVerificationResult" : "{}",
  "dkimVerificationResult" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "senderType" : "Unknown",
  "id" : "id"
}, statusCode=200}]
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<OutboundDomain> 
     */
    open class func getRoutingEmailOutboundDomainSearchWithRequestBuilder(domainId: String) -> RequestBuilder<OutboundDomain> {        
        var path = "/api/v2/routing/email/outbound/domains/{domainId}/search"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutboundDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get outbound domains
     
     - parameter filter: (query) Optional search filter (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailOutboundDomains(filter: String? = nil, completion: @escaping ((_ data: OutboundDomainEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailOutboundDomainsWithRequestBuilder(filter: filter)
        requestBuilder.execute { (response: Response<OutboundDomainEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get outbound domains
     - GET /api/v2/routing/email/outbound/domains
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "cnameVerificationResult" : "{}",
    "dkimVerificationResult" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "senderType" : "Unknown",
    "id" : "id"
  }, {
    "cnameVerificationResult" : "{}",
    "dkimVerificationResult" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "senderType" : "Unknown",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter filter: (query) Optional search filter (optional)

     - returns: RequestBuilder<OutboundDomainEntityListing> 
     */
    open class func getRoutingEmailOutboundDomainsWithRequestBuilder(filter: String? = nil) -> RequestBuilder<OutboundDomainEntityListing> {        
        let path = "/api/v2/routing/email/outbound/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter
        ])

        let requestBuilder: RequestBuilder<OutboundDomainEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get email setup
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingEmailSetup(completion: @escaping ((_ data: EmailSetup?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingEmailSetupWithRequestBuilder()
        requestBuilder.execute { (response: Response<EmailSetup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get email setup
     - GET /api/v2/routing/email/setup
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "rootDomain" : "rootDomain"
}, statusCode=200}]

     - returns: RequestBuilder<EmailSetup> 
     */
    open class func getRoutingEmailSetupWithRequestBuilder() -> RequestBuilder<EmailSetup> {        
        let path = "/api/v2/routing/email/setup"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailSetup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a routing language
     
     - parameter languageId: (path) Language ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingLanguage(languageId: String, completion: @escaping ((_ data: Language?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingLanguageWithRequestBuilder(languageId: languageId)
        requestBuilder.execute { (response: Response<Language>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a routing language
     - GET /api/v2/routing/languages/{languageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "version" : "version"
}, statusCode=200}]
     
     - parameter languageId: (path) Language ID 

     - returns: RequestBuilder<Language> 
     */
    open class func getRoutingLanguageWithRequestBuilder(languageId: String) -> RequestBuilder<Language> {        
        var path = "/api/v2/routing/languages/{languageId}"
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Language>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum SortOrder_getRoutingLanguages: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    /**
     Get the list of supported languages.
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingLanguages(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getRoutingLanguages? = nil, name: String? = nil, _id: [String]? = nil, completion: @escaping ((_ data: LanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingLanguagesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, name: name, _id: _id)
        requestBuilder.execute { (response: Response<LanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of supported languages.
     - GET /api/v2/routing/languages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) id (optional)

     - returns: RequestBuilder<LanguageEntityListing> 
     */
    open class func getRoutingLanguagesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getRoutingLanguages? = nil, name: String? = nil, _id: [String]? = nil) -> RequestBuilder<LanguageEntityListing> {        
        let path = "/api/v2/routing/languages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "name": name, 
            "id": _id
        ])

        let requestBuilder: RequestBuilder<LanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a recipient
     
     - parameter recipientId: (path) Recipient ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingMessageRecipient(recipientId: String, completion: @escaping ((_ data: Recipient?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingMessageRecipientWithRequestBuilder(recipientId: recipientId)
        requestBuilder.execute { (response: Response<Recipient>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a recipient
     - GET /api/v2/routing/message/recipients/{recipientId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "messengerType" : "sms",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "flow" : "{}"
}, statusCode=200}]
     
     - parameter recipientId: (path) Recipient ID 

     - returns: RequestBuilder<Recipient> 
     */
    open class func getRoutingMessageRecipientWithRequestBuilder(recipientId: String) -> RequestBuilder<Recipient> {        
        var path = "/api/v2/routing/message/recipients/{recipientId}"
        let recipientIdPreEscape = "\(recipientId)"
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Recipient>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum MessengerType_getRoutingMessageRecipients: String { 
        case sms = "sms"
        case facebook = "facebook"
        case twitter = "twitter"
        case line = "line"
        case whatsapp = "whatsapp"
        case _open = "open"
        case instagram = "instagram"
    }

    
    
    
    
    /**
     Get recipients
     
     - parameter messengerType: (query) Messenger Type (optional)
     - parameter name: (query) Recipient Name (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingMessageRecipients(messengerType: MessengerType_getRoutingMessageRecipients? = nil, name: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: RecipientListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingMessageRecipientsWithRequestBuilder(messengerType: messengerType, name: name, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<RecipientListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get recipients
     - GET /api/v2/routing/message/recipients
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "messengerType" : "sms",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "flow" : "{}"
  }, {
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "messengerType" : "sms",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "flow" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter messengerType: (query) Messenger Type (optional)
     - parameter name: (query) Recipient Name (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)

     - returns: RequestBuilder<RecipientListing> 
     */
    open class func getRoutingMessageRecipientsWithRequestBuilder(messengerType: MessengerType_getRoutingMessageRecipients? = nil, name: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<RecipientListing> {        
        let path = "/api/v2/routing/message/recipients"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "messengerType": messengerType?.rawValue, 
            "name": name, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<RecipientListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve a single predictor.
     
     - parameter predictorId: (path) Predictor ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingPredictor(predictorId: String, completion: @escaping ((_ data: Predictor?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingPredictorWithRequestBuilder(predictorId: predictorId)
        requestBuilder.execute { (response: Response<Predictor>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a single predictor.
     - GET /api/v2/routing/predictors/{predictorId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schedule" : "{}",
  "models" : [ {
    "retrainingErrors" : [ {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    }, {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    } ],
    "mediaType" : "voice",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "state" : "Trained"
  }, {
    "retrainingErrors" : [ {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    }, {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    } ],
    "mediaType" : "voice",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "state" : "Trained"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "kpi" : "kpi",
  "queues" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "routingTimeoutSeconds" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "errorCode" : "errorCode",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Created",
  "workloadBalancingConfig" : "{}"
}, statusCode=200}]
     
     - parameter predictorId: (path) Predictor ID 

     - returns: RequestBuilder<Predictor> 
     */
    open class func getRoutingPredictorWithRequestBuilder(predictorId: String) -> RequestBuilder<Predictor> {        
        var path = "/api/v2/routing/predictors/{predictorId}"
        let predictorIdPreEscape = "\(predictorId)"
        let predictorIdPostEscape = predictorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{predictorId}", with: predictorIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Predictor>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Retrieve Predictor Model Features.
     
     - parameter predictorId: (path) Predictor ID 
     - parameter modelId: (path) Model ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingPredictorModelFeatures(predictorId: String, modelId: String, completion: @escaping ((_ data: PredictorModelFeatureListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingPredictorModelFeaturesWithRequestBuilder(predictorId: predictorId, modelId: modelId)
        requestBuilder.execute { (response: Response<PredictorModelFeatureListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Predictor Model Features.
     - GET /api/v2/routing/predictors/{predictorId}/models/{modelId}/features
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "percentageImportance" : 0.8008281904610115,
    "id" : "id",
    "type" : "User"
  }, {
    "percentageImportance" : 0.8008281904610115,
    "id" : "id",
    "type" : "User"
  } ]
}, statusCode=200}]
     
     - parameter predictorId: (path) Predictor ID 
     - parameter modelId: (path) Model ID 

     - returns: RequestBuilder<PredictorModelFeatureListing> 
     */
    open class func getRoutingPredictorModelFeaturesWithRequestBuilder(predictorId: String, modelId: String) -> RequestBuilder<PredictorModelFeatureListing> {        
        var path = "/api/v2/routing/predictors/{predictorId}/models/{modelId}/features"
        let predictorIdPreEscape = "\(predictorId)"
        let predictorIdPostEscape = predictorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{predictorId}", with: predictorIdPostEscape, options: .literal, range: nil)
        let modelIdPreEscape = "\(modelId)"
        let modelIdPostEscape = modelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelId}", with: modelIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PredictorModelFeatureListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Retrieve Predictor Models and Top Features.
     
     - parameter predictorId: (path) Predictor ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingPredictorModels(predictorId: String, completion: @escaping ((_ data: PredictorModels?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingPredictorModelsWithRequestBuilder(predictorId: predictorId)
        requestBuilder.execute { (response: Response<PredictorModels>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Predictor Models and Top Features.
     - GET /api/v2/routing/predictors/{predictorId}/models
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "predictorModels" : [ {
    "features" : [ {
      "percentageImportance" : 0.8008281904610115,
      "id" : "id",
      "type" : "User"
    }, {
      "percentageImportance" : 0.8008281904610115,
      "id" : "id",
      "type" : "User"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "kpi" : "kpi",
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+00:00",
    "mediaType" : "voice",
    "id" : "id"
  }, {
    "features" : [ {
      "percentageImportance" : 0.8008281904610115,
      "id" : "id",
      "type" : "User"
    }, {
      "percentageImportance" : 0.8008281904610115,
      "id" : "id",
      "type" : "User"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "kpi" : "kpi",
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+00:00",
    "mediaType" : "voice",
    "id" : "id"
  } ],
  "entities" : [ {
    "features" : [ {
      "percentageImportance" : 0.8008281904610115,
      "id" : "id",
      "type" : "User"
    }, {
      "percentageImportance" : 0.8008281904610115,
      "id" : "id",
      "type" : "User"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "kpi" : "kpi",
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+00:00",
    "mediaType" : "voice",
    "id" : "id"
  }, {
    "features" : [ {
      "percentageImportance" : 0.8008281904610115,
      "id" : "id",
      "type" : "User"
    }, {
      "percentageImportance" : 0.8008281904610115,
      "id" : "id",
      "type" : "User"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "kpi" : "kpi",
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "dateTrained" : "2000-01-23T04:56:07.000+00:00",
    "mediaType" : "voice",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter predictorId: (path) Predictor ID 

     - returns: RequestBuilder<PredictorModels> 
     */
    open class func getRoutingPredictorModelsWithRequestBuilder(predictorId: String) -> RequestBuilder<PredictorModels> {        
        var path = "/api/v2/routing/predictors/{predictorId}/models"
        let predictorIdPreEscape = "\(predictorId)"
        let predictorIdPostEscape = predictorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{predictorId}", with: predictorIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PredictorModels>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     Retrieve all predictors.
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter queueId: (query) Comma-separated list of queue Ids to filter by. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingPredictors(before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, queueId: [String]? = nil, completion: @escaping ((_ data: PredictorListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingPredictorsWithRequestBuilder(before: before, after: after, limit: limit, pageSize: pageSize, queueId: queueId)
        requestBuilder.execute { (response: Response<PredictorListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve all predictors.
     - GET /api/v2/routing/predictors
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "schedule" : "{}",
    "models" : [ {
      "retrainingErrors" : [ {
        "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
        "errorCode" : "NotEnoughData",
        "id" : "id"
      }, {
        "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
        "errorCode" : "NotEnoughData",
        "id" : "id"
      } ],
      "mediaType" : "voice",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "state" : "Trained"
    }, {
      "retrainingErrors" : [ {
        "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
        "errorCode" : "NotEnoughData",
        "id" : "id"
      }, {
        "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
        "errorCode" : "NotEnoughData",
        "id" : "id"
      } ],
      "mediaType" : "voice",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "state" : "Trained"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "kpi" : "kpi",
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "routingTimeoutSeconds" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "errorCode" : "errorCode",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "Created",
    "workloadBalancingConfig" : "{}"
  }, {
    "schedule" : "{}",
    "models" : [ {
      "retrainingErrors" : [ {
        "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
        "errorCode" : "NotEnoughData",
        "id" : "id"
      }, {
        "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
        "errorCode" : "NotEnoughData",
        "id" : "id"
      } ],
      "mediaType" : "voice",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "state" : "Trained"
    }, {
      "retrainingErrors" : [ {
        "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
        "errorCode" : "NotEnoughData",
        "id" : "id"
      }, {
        "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
        "errorCode" : "NotEnoughData",
        "id" : "id"
      } ],
      "mediaType" : "voice",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "state" : "Trained"
    } ],
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "kpi" : "kpi",
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "routingTimeoutSeconds" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "errorCode" : "errorCode",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "Created",
    "workloadBalancingConfig" : "{}"
  } ],
  "selfUri" : "selfUri",
  "nextUri" : "nextUri",
  "previousUri" : "previousUri"
}, statusCode=200}]
     
     - parameter before: (query) The cursor that points to the start of the set of entities that has been returned. (optional)
     - parameter after: (query) The cursor that points to the end of the set of entities that has been returned. (optional)
     - parameter limit: (query) Number of entities to return. Maximum of 200. Deprecated in favour of pageSize (optional)
     - parameter pageSize: (query) Number of entities to return. Maximum of 200. (optional)
     - parameter queueId: (query) Comma-separated list of queue Ids to filter by. (optional)

     - returns: RequestBuilder<PredictorListing> 
     */
    open class func getRoutingPredictorsWithRequestBuilder(before: String? = nil, after: String? = nil, limit: String? = nil, pageSize: String? = nil, queueId: [String]? = nil) -> RequestBuilder<PredictorListing> {        
        let path = "/api/v2/routing/predictors"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "before": before, 
            "after": after, 
            "limit": limit, 
            "pageSize": pageSize, 
            "queueId": queueId
        ])

        let requestBuilder: RequestBuilder<PredictorListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum KpiGroup_getRoutingPredictorsKeyperformanceindicators: String { 
        case standard = "Standard"
        case custom = "Custom"
    }

    
    
    /**
     Get a list of Key Performance Indicators
     
     - parameter kpiGroup: (query) The Group of Key Performance Indicators to return (optional)
     - parameter expand: (query) Parameter to request additional data to return in KPI payload (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingPredictorsKeyperformanceindicators(kpiGroup: KpiGroup_getRoutingPredictorsKeyperformanceindicators? = nil, expand: [String]? = nil, completion: @escaping ((_ data: [KeyPerformanceIndicator]?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingPredictorsKeyperformanceindicatorsWithRequestBuilder(kpiGroup: kpiGroup, expand: expand)
        requestBuilder.execute { (response: Response<[KeyPerformanceIndicator]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of Key Performance Indicators
     - GET /api/v2/routing/predictors/keyperformanceindicators
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "wrapUpCodeConfig" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "source" : "WrapUpCode",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "queues" : [ "queues", "queues" ],
  "optimizationType" : "Maximization",
  "kpiType" : "SalesConversion",
  "name" : "name",
  "kpiGroup" : "Standard",
  "outcomeConfig" : "{}",
  "id" : "id",
  "problemType" : "Classification",
  "status" : "Enabled"
}, statusCode=200}]
     
     - parameter kpiGroup: (query) The Group of Key Performance Indicators to return (optional)
     - parameter expand: (query) Parameter to request additional data to return in KPI payload (optional)

     - returns: RequestBuilder<[KeyPerformanceIndicator]> 
     */
    open class func getRoutingPredictorsKeyperformanceindicatorsWithRequestBuilder(kpiGroup: KpiGroup_getRoutingPredictorsKeyperformanceindicators? = nil, expand: [String]? = nil) -> RequestBuilder<[KeyPerformanceIndicator]> {        
        let path = "/api/v2/routing/predictors/keyperformanceindicators"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "kpiGroup": kpiGroup?.rawValue, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<[KeyPerformanceIndicator]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get details about this queue.
     
     - parameter queueId: (path) Queue ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueue(queueId: String, completion: @escaping ((_ data: Queue?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueWithRequestBuilder(queueId: queueId)
        requestBuilder.execute { (response: Response<Queue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about this queue.
     - GET /api/v2/routing/queues/{queueId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "peerId" : "peerId",
  "conditionalGroupRouting" : "{}",
  "enableAudioMonitoring" : true,
  "mediaSettings" : "{}",
  "enableManualAssignment" : true,
  "description" : "description",
  "onHoldPrompt" : "{}",
  "emailInQueueFlow" : "{}",
  "autoAnswerOnly" : true,
  "routingRules" : [ {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  }, {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  } ],
  "skillEvaluationMethod" : "NONE",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+00:00",
      "division" : "{}",
      "features" : "{}",
      "versionId" : "versionId",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "pages" : [ {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      }, {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "startPageName",
      "name" : "name",
      "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "startPageId" : "startPageId",
      "id" : "id",
      "publishedDate" : "2000-01-23T04:56:07.000+00:00"
    }
  },
  "division" : "{}",
  "suppressInQueueCallRecording" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "queueFlow" : "{}",
  "callingPartyNumber" : "callingPartyNumber",
  "userMemberCount" : 6,
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "memberGroups" : [ {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  }, {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  } ],
  "scoringMethod" : "TimestampAndPriority",
  "joinedMemberCount" : 1,
  "messageInQueueFlow" : "{}",
  "callingPartyName" : "callingPartyName",
  "acwSettings" : "{}",
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "whisperPrompt" : "{}",
  "enableTranscription" : true,
  "outboundEmailAddress" : {
    "route" : {
      "signature" : "{}",
      "replyEmailAddress" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "pattern" : "pattern",
      "language" : "{}",
      "autoBcc" : [ {
        "name" : "name",
        "email" : "email"
      }, {
        "name" : "name",
        "email" : "email"
      } ],
      "priority" : 7,
      "fromEmail" : "fromEmail",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "allowMultipleActions" : true,
      "name" : "name",
      "fromName" : "fromName",
      "id" : "id",
      "historyInclusion" : "Include",
      "queue" : "{}",
      "flow" : "{}",
      "spamFlow" : "{}"
    },
    "domain" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }
  },
  "bullseye" : "{}",
  "outboundMessagingAddresses" : "{}",
  "createdBy" : "createdBy",
  "directRouting" : "{}",
  "name" : "name",
  "agentOwnedRouting" : "{}"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 

     - returns: RequestBuilder<Queue> 
     */
    open class func getRoutingQueueWithRequestBuilder(queueId: String) -> RequestBuilder<Queue> {        
        var path = "/api/v2/routing/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Queue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a Comparison Period.
     
     - parameter queueId: (path) Queue id 
     - parameter comparisonPeriodId: (path) ComparisonPeriod id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueComparisonperiod(queueId: String, comparisonPeriodId: String, completion: @escaping ((_ data: ComparisonPeriod?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueComparisonperiodWithRequestBuilder(queueId: queueId, comparisonPeriodId: comparisonPeriodId)
        requestBuilder.execute { (response: Response<ComparisonPeriod>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Comparison Period.
     - GET /api/v2/routing/queues/{queueId}/comparisonperiods/{comparisonPeriodId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "kpiResults" : [ {
    "kpiTotalOff" : 1,
    "interactionCountOff" : 5,
    "percentageBenefit" : 2.3021358869347655,
    "interactionCountOn" : 5,
    "mediaType" : "voice",
    "kpiTotalOn" : 6
  }, {
    "kpiTotalOff" : 1,
    "interactionCountOff" : 5,
    "percentageBenefit" : 2.3021358869347655,
    "interactionCountOn" : 5,
    "mediaType" : "voice",
    "kpiTotalOn" : 6
  } ],
  "kpi" : "kpi",
  "dateStarted" : "2000-01-23T04:56:07.000+00:00",
  "dateEnded" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "percentageBenefit" : 0.8008281904610115,
  "id" : "id"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue id 
     - parameter comparisonPeriodId: (path) ComparisonPeriod id 

     - returns: RequestBuilder<ComparisonPeriod> 
     */
    open class func getRoutingQueueComparisonperiodWithRequestBuilder(queueId: String, comparisonPeriodId: String) -> RequestBuilder<ComparisonPeriod> {        
        var path = "/api/v2/routing/queues/{queueId}/comparisonperiods/{comparisonPeriodId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let comparisonPeriodIdPreEscape = "\(comparisonPeriodId)"
        let comparisonPeriodIdPostEscape = comparisonPeriodIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comparisonPeriodId}", with: comparisonPeriodIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ComparisonPeriod>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get list of comparison periods
     
     - parameter queueId: (path) Queue id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueComparisonperiods(queueId: String, completion: @escaping ((_ data: ComparisonPeriodListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueComparisonperiodsWithRequestBuilder(queueId: queueId)
        requestBuilder.execute { (response: Response<ComparisonPeriodListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of comparison periods
     - GET /api/v2/routing/queues/{queueId}/comparisonperiods
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "kpiResults" : [ {
      "kpiTotalOff" : 1,
      "interactionCountOff" : 5,
      "percentageBenefit" : 2.3021358869347655,
      "interactionCountOn" : 5,
      "mediaType" : "voice",
      "kpiTotalOn" : 6
    }, {
      "kpiTotalOff" : 1,
      "interactionCountOff" : 5,
      "percentageBenefit" : 2.3021358869347655,
      "interactionCountOn" : 5,
      "mediaType" : "voice",
      "kpiTotalOn" : 6
    } ],
    "kpi" : "kpi",
    "dateStarted" : "2000-01-23T04:56:07.000+00:00",
    "dateEnded" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "percentageBenefit" : 0.8008281904610115,
    "id" : "id"
  }, {
    "kpiResults" : [ {
      "kpiTotalOff" : 1,
      "interactionCountOff" : 5,
      "percentageBenefit" : 2.3021358869347655,
      "interactionCountOn" : 5,
      "mediaType" : "voice",
      "kpiTotalOn" : 6
    }, {
      "kpiTotalOff" : 1,
      "interactionCountOff" : 5,
      "percentageBenefit" : 2.3021358869347655,
      "interactionCountOn" : 5,
      "mediaType" : "voice",
      "kpiTotalOn" : 6
    } ],
    "kpi" : "kpi",
    "dateStarted" : "2000-01-23T04:56:07.000+00:00",
    "dateEnded" : "2000-01-23T04:56:07.000+00:00",
    "selfUri" : "https://openapi-generator.tech",
    "percentageBenefit" : 0.8008281904610115,
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue id 

     - returns: RequestBuilder<ComparisonPeriodListing> 
     */
    open class func getRoutingQueueComparisonperiodsWithRequestBuilder(queueId: String) -> RequestBuilder<ComparisonPeriodListing> {        
        var path = "/api/v2/routing/queues/{queueId}/comparisonperiods"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ComparisonPeriodListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get Estimated Wait Time
     
     - parameter queueId: (path) queueId 
     - parameter conversationId: (query) conversationId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueEstimatedwaittime(queueId: String, conversationId: String? = nil, completion: @escaping ((_ data: EstimatedWaitTimePredictions?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueEstimatedwaittimeWithRequestBuilder(queueId: queueId, conversationId: conversationId)
        requestBuilder.execute { (response: Response<EstimatedWaitTimePredictions>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Estimated Wait Time
     - GET /api/v2/routing/queues/{queueId}/estimatedwaittime
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "formula" : "BEST",
    "intent" : "ALL",
    "estimatedWaitTimeSeconds" : 0
  }, {
    "formula" : "BEST",
    "intent" : "ALL",
    "estimatedWaitTimeSeconds" : 0
  } ]
}, statusCode=200}]
     
     - parameter queueId: (path) queueId 
     - parameter conversationId: (query) conversationId (optional)

     - returns: RequestBuilder<EstimatedWaitTimePredictions> 
     */
    open class func getRoutingQueueEstimatedwaittimeWithRequestBuilder(queueId: String, conversationId: String? = nil) -> RequestBuilder<EstimatedWaitTimePredictions> {        
        var path = "/api/v2/routing/queues/{queueId}/estimatedwaittime"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "conversationId": conversationId
        ])

        let requestBuilder: RequestBuilder<EstimatedWaitTimePredictions>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get Estimated Wait Time
     
     - parameter queueId: (path) queueId 
     - parameter mediaType: (path) mediaType 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueMediatypeEstimatedwaittime(queueId: String, mediaType: String, completion: @escaping ((_ data: EstimatedWaitTimePredictions?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueMediatypeEstimatedwaittimeWithRequestBuilder(queueId: queueId, mediaType: mediaType)
        requestBuilder.execute { (response: Response<EstimatedWaitTimePredictions>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Estimated Wait Time
     - GET /api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "formula" : "BEST",
    "intent" : "ALL",
    "estimatedWaitTimeSeconds" : 0
  }, {
    "formula" : "BEST",
    "intent" : "ALL",
    "estimatedWaitTimeSeconds" : 0
  } ]
}, statusCode=200}]
     
     - parameter queueId: (path) queueId 
     - parameter mediaType: (path) mediaType 

     - returns: RequestBuilder<EstimatedWaitTimePredictions> 
     */
    open class func getRoutingQueueMediatypeEstimatedwaittimeWithRequestBuilder(queueId: String, mediaType: String) -> RequestBuilder<EstimatedWaitTimePredictions> {        
        var path = "/api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let mediaTypePreEscape = "\(mediaType)"
        let mediaTypePostEscape = mediaTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mediaType}", with: mediaTypePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EstimatedWaitTimePredictions>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum SortOrder_getRoutingQueueMembers: String { 
        case asc = "asc"
        case desc = "desc"
    }

    
    
    
    
    
    
    
    
    
    public enum MemberBy_getRoutingQueueMembers: String { 
        case user = "user"
        case group = "group"
    }

    
    
    /**
     Get the members of this queue.
     
     - parameter queueId: (path) Queue ID 
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query) Max value is 100 (optional)
     - parameter sortOrder: (query) Note: results are sorted by name. (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter name: (query) Filter by queue member name (contains-style search) (optional)
     - parameter profileSkills: (query) Filter by profile skill (contains-style search) (optional)
     - parameter skills: (query) Filter by skill (contains-style search) (optional)
     - parameter languages: (query) Filter by language (contains-style search) (optional)
     - parameter routingStatus: (query) Filter by routing status (optional)
     - parameter presence: (query) Filter by presence (optional)
     - parameter memberBy: (query) Filter by member type (optional)
     - parameter joined: (query) Filter by joined status (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueMembers(queueId: String, pageNumber: Int? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getRoutingQueueMembers? = nil, expand: [String]? = nil, name: String? = nil, profileSkills: [String]? = nil, skills: [String]? = nil, languages: [String]? = nil, routingStatus: [String]? = nil, presence: [String]? = nil, memberBy: MemberBy_getRoutingQueueMembers? = nil, joined: Bool? = nil, completion: @escaping ((_ data: QueueMemberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueMembersWithRequestBuilder(queueId: queueId, pageNumber: pageNumber, pageSize: pageSize, sortOrder: sortOrder, expand: expand, name: name, profileSkills: profileSkills, skills: skills, languages: languages, routingStatus: routingStatus, presence: presence, memberBy: memberBy, joined: joined)
        requestBuilder.execute { (response: Response<QueueMemberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the members of this queue.
     - GET /api/v2/routing/queues/{queueId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "pageNumber" : 0,
  "entities" : [ {
    "joined" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "memberBy" : "memberBy",
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "userId" : "userId",
      "status" : "OFF_QUEUE"
    },
    "user" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "ringNumber" : 0
  }, {
    "joined" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "memberBy" : "memberBy",
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "userId" : "userId",
      "status" : "OFF_QUEUE"
    },
    "user" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "ringNumber" : 0
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 6,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query) Max value is 100 (optional)
     - parameter sortOrder: (query) Note: results are sorted by name. (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter name: (query) Filter by queue member name (contains-style search) (optional)
     - parameter profileSkills: (query) Filter by profile skill (contains-style search) (optional)
     - parameter skills: (query) Filter by skill (contains-style search) (optional)
     - parameter languages: (query) Filter by language (contains-style search) (optional)
     - parameter routingStatus: (query) Filter by routing status (optional)
     - parameter presence: (query) Filter by presence (optional)
     - parameter memberBy: (query) Filter by member type (optional)
     - parameter joined: (query) Filter by joined status (optional)

     - returns: RequestBuilder<QueueMemberEntityListing> 
     */
    open class func getRoutingQueueMembersWithRequestBuilder(queueId: String, pageNumber: Int? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getRoutingQueueMembers? = nil, expand: [String]? = nil, name: String? = nil, profileSkills: [String]? = nil, skills: [String]? = nil, languages: [String]? = nil, routingStatus: [String]? = nil, presence: [String]? = nil, memberBy: MemberBy_getRoutingQueueMembers? = nil, joined: Bool? = nil) -> RequestBuilder<QueueMemberEntityListing> {        
        var path = "/api/v2/routing/queues/{queueId}/members"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "expand": expand, 
            "name": name, 
            "profileSkills": profileSkills, 
            "skills": skills, 
            "languages": languages, 
            "routingStatus": routingStatus, 
            "presence": presence, 
            "memberBy": memberBy?.rawValue, 
            "joined": joined
        ])

        let requestBuilder: RequestBuilder<QueueMemberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum SortOrder_getRoutingQueueUsers: String { 
        case asc = "asc"
        case desc = "desc"
    }

    
    
    
    
    
    
    
    
    
    /**
     DEPRECATED: use GET /routing/queues/{queueId}/members.  Get the members of this queue.
     
     - parameter queueId: (path) Queue ID 
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query) Max value is 100 (optional)
     - parameter sortOrder: (query) Note: results are sorted by name. (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter joined: (query) Filter by joined status (optional)
     - parameter name: (query) Filter by queue member name (optional)
     - parameter profileSkills: (query) Filter by profile skill (optional)
     - parameter skills: (query) Filter by skill (optional)
     - parameter languages: (query) Filter by language (optional)
     - parameter routingStatus: (query) Filter by routing status (optional)
     - parameter presence: (query) Filter by presence (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueUsers(queueId: String, pageNumber: Int? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getRoutingQueueUsers? = nil, expand: [String]? = nil, joined: Bool? = nil, name: String? = nil, profileSkills: [String]? = nil, skills: [String]? = nil, languages: [String]? = nil, routingStatus: [String]? = nil, presence: [String]? = nil, completion: @escaping ((_ data: QueueMemberEntityListingV1?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueUsersWithRequestBuilder(queueId: queueId, pageNumber: pageNumber, pageSize: pageSize, sortOrder: sortOrder, expand: expand, joined: joined, name: name, profileSkills: profileSkills, skills: skills, languages: languages, routingStatus: routingStatus, presence: presence)
        requestBuilder.execute { (response: Response<QueueMemberEntityListingV1>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     DEPRECATED: use GET /routing/queues/{queueId}/members.  Get the members of this queue.
     - GET /api/v2/routing/queues/{queueId}/users
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "joined" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "memberBy" : "memberBy",
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "userId" : "userId",
      "status" : "OFF_QUEUE"
    },
    "user" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "ringNumber" : 0
  }, {
    "joined" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "memberBy" : "memberBy",
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "userId" : "userId",
      "status" : "OFF_QUEUE"
    },
    "user" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "ringNumber" : 0
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 
     - parameter pageNumber: (query)  (optional)
     - parameter pageSize: (query) Max value is 100 (optional)
     - parameter sortOrder: (query) Note: results are sorted by name. (optional)
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter joined: (query) Filter by joined status (optional)
     - parameter name: (query) Filter by queue member name (optional)
     - parameter profileSkills: (query) Filter by profile skill (optional)
     - parameter skills: (query) Filter by skill (optional)
     - parameter languages: (query) Filter by language (optional)
     - parameter routingStatus: (query) Filter by routing status (optional)
     - parameter presence: (query) Filter by presence (optional)

     - returns: RequestBuilder<QueueMemberEntityListingV1> 
     */
    open class func getRoutingQueueUsersWithRequestBuilder(queueId: String, pageNumber: Int? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getRoutingQueueUsers? = nil, expand: [String]? = nil, joined: Bool? = nil, name: String? = nil, profileSkills: [String]? = nil, skills: [String]? = nil, languages: [String]? = nil, routingStatus: [String]? = nil, presence: [String]? = nil) -> RequestBuilder<QueueMemberEntityListingV1> {        
        var path = "/api/v2/routing/queues/{queueId}/users"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "expand": expand, 
            "joined": joined, 
            "name": name, 
            "profileSkills": profileSkills, 
            "skills": skills, 
            "languages": languages, 
            "routingStatus": routingStatus, 
            "presence": presence
        ])

        let requestBuilder: RequestBuilder<QueueMemberEntityListingV1>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Get the wrap-up codes for a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueueWrapupcodes(queueId: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: WrapupCodeEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueueWrapupcodesWithRequestBuilder(queueId: queueId, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<WrapupCodeEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the wrap-up codes for a queue
     - GET /api/v2/routing/queues/{queueId}/wrapupcodes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "createdBy",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "modifiedBy",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "createdBy",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "modifiedBy",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)

     - returns: RequestBuilder<WrapupCodeEntityListing> 
     */
    open class func getRoutingQueueWrapupcodesWithRequestBuilder(queueId: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<WrapupCodeEntityListing> {        
        var path = "/api/v2/routing/queues/{queueId}/wrapupcodes"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<WrapupCodeEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum SortOrder_getRoutingQueues: String { 
        case asc = "asc"
        case desc = "desc"
    }

    
    
    
    
    
    
    /**
     Get list of queues.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter sortOrder: (query) Note: results are sorted by name. (optional)
     - parameter name: (query) Filter by queue name (optional)
     - parameter _id: (query) Filter by queue ID(s) (optional)
     - parameter divisionId: (query) Filter by queue division ID(s) (optional)
     - parameter peerId: (query) Filter by queue peer ID(s) (optional)
     - parameter hasPeer: (query) Filter by queues associated with peer (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueues(pageNumber: Int? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getRoutingQueues? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, peerId: [String]? = nil, hasPeer: Bool? = nil, completion: @escaping ((_ data: QueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueuesWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, sortOrder: sortOrder, name: name, _id: _id, divisionId: divisionId, peerId: peerId, hasPeer: hasPeer)
        requestBuilder.execute { (response: Response<QueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of queues.
     - GET /api/v2/routing/queues
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  }, {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter sortOrder: (query) Note: results are sorted by name. (optional)
     - parameter name: (query) Filter by queue name (optional)
     - parameter _id: (query) Filter by queue ID(s) (optional)
     - parameter divisionId: (query) Filter by queue division ID(s) (optional)
     - parameter peerId: (query) Filter by queue peer ID(s) (optional)
     - parameter hasPeer: (query) Filter by queues associated with peer (optional)

     - returns: RequestBuilder<QueueEntityListing> 
     */
    open class func getRoutingQueuesWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, sortOrder: SortOrder_getRoutingQueues? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, peerId: [String]? = nil, hasPeer: Bool? = nil) -> RequestBuilder<QueueEntityListing> {        
        let path = "/api/v2/routing/queues"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "name": name, 
            "id": _id, 
            "divisionId": divisionId, 
            "peerId": peerId, 
            "hasPeer": hasPeer
        ])

        let requestBuilder: RequestBuilder<QueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum SortBy_getRoutingQueuesDivisionviews: String { 
        case name = "name"
        case _id = "id"
        case divisionid = "divisionId"
    }

    
    
    public enum SortOrder_getRoutingQueuesDivisionviews: String { 
        case asc = "asc"
        case desc = "desc"
    }

    
    
    
    
    /**
     Get a paged listing of simplified queue objects, filterable by name, queue ID(s), or division ID(s).
     
     - parameter pageSize: (query) Page size [max value is 100] (optional)
     - parameter pageNumber: (query) Page number [max value is 5] (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) Queue ID(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueuesDivisionviews(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingQueuesDivisionviews? = nil, sortOrder: SortOrder_getRoutingQueuesDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, completion: @escaping ((_ data: QueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueuesDivisionviewsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, name: name, _id: _id, divisionId: divisionId)
        requestBuilder.execute { (response: Response<QueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a paged listing of simplified queue objects, filterable by name, queue ID(s), or division ID(s).
     - GET /api/v2/routing/queues/divisionviews
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  }, {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size [max value is 100] (optional)
     - parameter pageNumber: (query) Page number [max value is 5] (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter name: (query) Name (optional)
     - parameter _id: (query) Queue ID(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<QueueEntityListing> 
     */
    open class func getRoutingQueuesDivisionviewsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingQueuesDivisionviews? = nil, sortOrder: SortOrder_getRoutingQueuesDivisionviews? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil) -> RequestBuilder<QueueEntityListing> {        
        let path = "/api/v2/routing/queues/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy?.rawValue, 
            "sortOrder": sortOrder?.rawValue, 
            "name": name, 
            "id": _id, 
            "divisionId": divisionId
        ])

        let requestBuilder: RequestBuilder<QueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum SortOrder_getRoutingQueuesDivisionviewsAll: String { 
        case asc = "asc"
        case desc = "desc"
    }

    
    /**
     Get a paged listing of simplified queue objects, sorted by name.  Can be used to get a digest of all queues in an organization.
     
     - parameter pageSize: (query) Page size [max value is 500] (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueuesDivisionviewsAll(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getRoutingQueuesDivisionviewsAll? = nil, completion: @escaping ((_ data: QueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueuesDivisionviewsAllWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<QueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a paged listing of simplified queue objects, sorted by name.  Can be used to get a digest of all queues in an organization.
     - GET /api/v2/routing/queues/divisionviews/all
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  }, {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "autoAnswerOnly" : true,
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size [max value is 500] (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Sort order (optional)

     - returns: RequestBuilder<QueueEntityListing> 
     */
    open class func getRoutingQueuesDivisionviewsAllWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getRoutingQueuesDivisionviewsAll? = nil) -> RequestBuilder<QueueEntityListing> {        
        let path = "/api/v2/routing/queues/divisionviews/all"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<QueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum SortOrder_getRoutingQueuesMe: String { 
        case asc = "asc"
        case desc = "desc"
    }

    
    /**
     Get a paged listing of queues the user is a member of.
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter joined: (query) Filter by joined status. (optional)
     - parameter sortOrder: (query) Note: results are sorted by name. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingQueuesMe(pageNumber: Int? = nil, pageSize: Int? = nil, joined: Bool? = nil, sortOrder: SortOrder_getRoutingQueuesMe? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingQueuesMeWithRequestBuilder(pageNumber: pageNumber, pageSize: pageSize, joined: joined, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a paged listing of queues the user is a member of.
     - GET /api/v2/routing/queues/me
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "pageCount" : 7,
  "pageNumber" : 5,
  "entities" : [ {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  }, {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 5,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter joined: (query) Filter by joined status. (optional)
     - parameter sortOrder: (query) Note: results are sorted by name. (optional)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func getRoutingQueuesMeWithRequestBuilder(pageNumber: Int? = nil, pageSize: Int? = nil, joined: Bool? = nil, sortOrder: SortOrder_getRoutingQueuesMe? = nil) -> RequestBuilder<UserQueueEntityListing> {        
        let path = "/api/v2/routing/queues/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "joined": joined, 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get an organization's routing settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSettings(completion: @escaping ((_ data: RoutingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<RoutingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get an organization's routing settings
     - GET /api/v2/routing/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "resetAgentScoreOnPresenceChange" : true
}, statusCode=200}]

     - returns: RequestBuilder<RoutingSettings> 
     */
    open class func getRoutingSettingsWithRequestBuilder() -> RequestBuilder<RoutingSettings> {        
        let path = "/api/v2/routing/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get Contact Center Settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSettingsContactcenter(completion: @escaping ((_ data: ContactCenterSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSettingsContactcenterWithRequestBuilder()
        requestBuilder.execute { (response: Response<ContactCenterSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Contact Center Settings
     - GET /api/v2/routing/settings/contactcenter
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "removeSkillsFromBlindTransfer" : true
}, statusCode=200}]

     - returns: RequestBuilder<ContactCenterSettings> 
     */
    open class func getRoutingSettingsContactcenterWithRequestBuilder() -> RequestBuilder<ContactCenterSettings> {        
        let path = "/api/v2/routing/settings/contactcenter"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactCenterSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get Transcription Settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSettingsTranscription(completion: @escaping ((_ data: TranscriptionSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSettingsTranscriptionWithRequestBuilder()
        requestBuilder.execute { (response: Response<TranscriptionSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Transcription Settings
     - GET /api/v2/routing/settings/transcription
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "transcription" : "Disabled",
  "pciDssRedactionEnabled" : true,
  "contentSearchEnabled" : true,
  "transcriptionConfidenceThreshold" : 0,
  "lowLatencyTranscriptionEnabled" : true,
  "piiRedactionEnabled" : true
}, statusCode=200}]

     - returns: RequestBuilder<TranscriptionSettings> 
     */
    open class func getRoutingSettingsTranscriptionWithRequestBuilder() -> RequestBuilder<TranscriptionSettings> {        
        let path = "/api/v2/routing/settings/transcription"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptionSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get Routing Skill
     
     - parameter skillId: (path) Skill ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSkill(skillId: String, completion: @escaping ((_ data: RoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSkillWithRequestBuilder(skillId: skillId)
        requestBuilder.execute { (response: Response<RoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Routing Skill
     - GET /api/v2/routing/skills/{skillId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "version" : "version"
}, statusCode=200}]
     
     - parameter skillId: (path) Skill ID 

     - returns: RequestBuilder<RoutingSkill> 
     */
    open class func getRoutingSkillWithRequestBuilder(skillId: String) -> RequestBuilder<RoutingSkill> {        
        var path = "/api/v2/routing/skills/{skillId}"
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get skill group
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSkillgroup(skillGroupId: String, completion: @escaping ((_ data: SkillGroup?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSkillgroupWithRequestBuilder(skillGroupId: skillGroupId)
        requestBuilder.execute { (response: Response<SkillGroup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get skill group
     - GET /api/v2/routing/skillgroups/{skillGroupId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "skillConditions" : [ {
    "languageSkillConditions" : [ {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "routingSkillConditions" : [ {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "operation" : "And"
  }, {
    "languageSkillConditions" : [ {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "routingSkillConditions" : [ {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "operation" : "And"
  } ],
  "status" : "InProgress"
}, statusCode=200}]
     
     - parameter skillGroupId: (path) Skill Group ID 

     - returns: RequestBuilder<SkillGroup> 
     */
    open class func getRoutingSkillgroupWithRequestBuilder(skillGroupId: String) -> RequestBuilder<SkillGroup> {        
        var path = "/api/v2/routing/skillgroups/{skillGroupId}"
        let skillGroupIdPreEscape = "\(skillGroupId)"
        let skillGroupIdPostEscape = skillGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillGroupId}", with: skillGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SkillGroup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum Expand_getRoutingSkillgroupMembers: String { 
        case entities = "entities"
    }

    
    /**
     Get skill group members
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter after: (query) The cursor that points to the next item (optional)
     - parameter before: (query) The cursor that points to the previous item (optional)
     - parameter expand: (query) Expand the name on each user (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSkillgroupMembers(skillGroupId: String, pageSize: Int? = nil, after: String? = nil, before: String? = nil, expand: Expand_getRoutingSkillgroupMembers? = nil, completion: @escaping ((_ data: SkillGroupMemberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSkillgroupMembersWithRequestBuilder(skillGroupId: skillGroupId, pageSize: pageSize, after: after, before: before, expand: expand)
        requestBuilder.execute { (response: Response<SkillGroupMemberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get skill group members
     - GET /api/v2/routing/skillgroups/{skillGroupId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter after: (query) The cursor that points to the next item (optional)
     - parameter before: (query) The cursor that points to the previous item (optional)
     - parameter expand: (query) Expand the name on each user (optional)

     - returns: RequestBuilder<SkillGroupMemberEntityListing> 
     */
    open class func getRoutingSkillgroupMembersWithRequestBuilder(skillGroupId: String, pageSize: Int? = nil, after: String? = nil, before: String? = nil, expand: Expand_getRoutingSkillgroupMembers? = nil) -> RequestBuilder<SkillGroupMemberEntityListing> {        
        var path = "/api/v2/routing/skillgroups/{skillGroupId}/members"
        let skillGroupIdPreEscape = "\(skillGroupId)"
        let skillGroupIdPostEscape = skillGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillGroupId}", with: skillGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "after": after, 
            "before": before, 
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<SkillGroupMemberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum Expand_getRoutingSkillgroupMembersDivisions: String { 
        case entities = "entities"
    }

    
    /**
     Get list of member divisions for this skill group.
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter expand: (query) Expand the name on each user (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSkillgroupMembersDivisions(skillGroupId: String, expand: Expand_getRoutingSkillgroupMembersDivisions? = nil, completion: @escaping ((_ data: SkillGroupMemberDivisionList?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSkillgroupMembersDivisionsWithRequestBuilder(skillGroupId: skillGroupId, expand: expand)
        requestBuilder.execute { (response: Response<SkillGroupMemberDivisionList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of member divisions for this skill group.
     - GET /api/v2/routing/skillgroups/{skillGroupId}/members/divisions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter expand: (query) Expand the name on each user (optional)

     - returns: RequestBuilder<SkillGroupMemberDivisionList> 
     */
    open class func getRoutingSkillgroupMembersDivisionsWithRequestBuilder(skillGroupId: String, expand: Expand_getRoutingSkillgroupMembersDivisions? = nil) -> RequestBuilder<SkillGroupMemberDivisionList> {        
        var path = "/api/v2/routing/skillgroups/{skillGroupId}/members/divisions"
        let skillGroupIdPreEscape = "\(skillGroupId)"
        let skillGroupIdPostEscape = skillGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillGroupId}", with: skillGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<SkillGroupMemberDivisionList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Get skill group listing
     
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Return only skill group names whose names start with this value (case-insensitive matching) (optional)
     - parameter after: (query) The cursor that points to the next item (optional)
     - parameter before: (query) The cursor that points to the previous item (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSkillgroups(pageSize: Int? = nil, name: String? = nil, after: String? = nil, before: String? = nil, completion: @escaping ((_ data: SkillGroupEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSkillgroupsWithRequestBuilder(pageSize: pageSize, name: name, after: after, before: before)
        requestBuilder.execute { (response: Response<SkillGroupEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get skill group listing
     - GET /api/v2/routing/skillgroups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Return only skill group names whose names start with this value (case-insensitive matching) (optional)
     - parameter after: (query) The cursor that points to the next item (optional)
     - parameter before: (query) The cursor that points to the previous item (optional)

     - returns: RequestBuilder<SkillGroupEntityListing> 
     */
    open class func getRoutingSkillgroupsWithRequestBuilder(pageSize: Int? = nil, name: String? = nil, after: String? = nil, before: String? = nil) -> RequestBuilder<SkillGroupEntityListing> {        
        let path = "/api/v2/routing/skillgroups"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "name": name, 
            "after": after, 
            "before": before
        ])

        let requestBuilder: RequestBuilder<SkillGroupEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Get the list of routing skills.
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter name: (query) Filter for results that start with this value (optional)
     - parameter _id: (query) id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSkills(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, _id: [String]? = nil, completion: @escaping ((_ data: SkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSkillsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, name: name, _id: _id)
        requestBuilder.execute { (response: Response<SkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of routing skills.
     - GET /api/v2/routing/skills
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter name: (query) Filter for results that start with this value (optional)
     - parameter _id: (query) id (optional)

     - returns: RequestBuilder<SkillEntityListing> 
     */
    open class func getRoutingSkillsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, _id: [String]? = nil) -> RequestBuilder<SkillEntityListing> {        
        let path = "/api/v2/routing/skills"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "name": name, 
            "id": _id
        ])

        let requestBuilder: RequestBuilder<SkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get an Address by Id for SMS
     
     - parameter addressId: (path) Address ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsAddress(addressId: String, completion: @escaping ((_ data: SmsAddress?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsAddressWithRequestBuilder(addressId: addressId)
        requestBuilder.execute { (response: Response<SmsAddress>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get an Address by Id for SMS
     - GET /api/v2/routing/sms/addresses/{addressId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "validated" : true,
  "city" : "city",
  "street" : "street",
  "countryCode" : "countryCode",
  "postalCode" : "postalCode",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "region" : "region"
}, statusCode=200}]
     
     - parameter addressId: (path) Address ID 

     - returns: RequestBuilder<SmsAddress> 
     */
    open class func getRoutingSmsAddressWithRequestBuilder(addressId: String) -> RequestBuilder<SmsAddress> {        
        var path = "/api/v2/routing/sms/addresses/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsAddress>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a list of Addresses for SMS
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsAddresses(pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: SmsAddressEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsAddressesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<SmsAddressEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of Addresses for SMS
     - GET /api/v2/routing/sms/addresses
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "validated" : true,
    "city" : "city",
    "street" : "street",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "region" : "region"
  }, {
    "validated" : true,
    "city" : "city",
    "street" : "street",
    "countryCode" : "countryCode",
    "postalCode" : "postalCode",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "region" : "region"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)

     - returns: RequestBuilder<SmsAddressEntityListing> 
     */
    open class func getRoutingSmsAddressesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<SmsAddressEntityListing> {        
        let path = "/api/v2/routing/sms/addresses"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<SmsAddressEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum PhoneNumberType_getRoutingSmsAvailablephonenumbers: String { 
        case local = "local"
        case mobile = "mobile"
        case tollfree = "tollfree"
    }

    
    
    
    
    
    
    public enum AddressRequirement_getRoutingSmsAvailablephonenumbers: String { 
        case _none = "none"
        case any = "any"
        case local = "local"
        case foreign = "foreign"
    }

    
    /**
     Get a list of available phone numbers for SMS provisioning.
     
     - parameter countryCode: (query) The ISO 3166-1 alpha-2 country code of the county for which available phone numbers should be returned 
     - parameter phoneNumberType: (query) Type of available phone numbers searched 
     - parameter region: (query) Region/province/state that can be used to restrict the numbers returned (optional)
     - parameter city: (query) City that can be used to restrict the numbers returned (optional)
     - parameter areaCode: (query) Area code that can be used to restrict the numbers returned (optional)
     - parameter pattern: (query) A pattern to match phone numbers. Valid characters are &#39;*&#39; and [0-9a-zA-Z]. The &#39;*&#39; character will match any single digit. (optional)
     - parameter addressRequirement: (query) This indicates whether the phone number requires to have an Address registered. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsAvailablephonenumbers(countryCode: String, phoneNumberType: PhoneNumberType_getRoutingSmsAvailablephonenumbers, region: String? = nil, city: String? = nil, areaCode: String? = nil, pattern: String? = nil, addressRequirement: AddressRequirement_getRoutingSmsAvailablephonenumbers? = nil, completion: @escaping ((_ data: SMSAvailablePhoneNumberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsAvailablephonenumbersWithRequestBuilder(countryCode: countryCode, phoneNumberType: phoneNumberType, region: region, city: city, areaCode: areaCode, pattern: pattern, addressRequirement: addressRequirement)
        requestBuilder.execute { (response: Response<SMSAvailablePhoneNumberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of available phone numbers for SMS provisioning.
     - GET /api/v2/routing/sms/availablephonenumbers
     - This request will return up to 30 random phone numbers matching the criteria specified.  To get additional phone numbers repeat the request.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "addressRequirement" : "none",
    "phoneNumber" : "phoneNumber",
    "capabilities" : [ "sms", "sms" ],
    "city" : "city",
    "countryCode" : "countryCode",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "phoneNumberType" : "local",
    "id" : "id",
    "region" : "region"
  }, {
    "addressRequirement" : "none",
    "phoneNumber" : "phoneNumber",
    "capabilities" : [ "sms", "sms" ],
    "city" : "city",
    "countryCode" : "countryCode",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "phoneNumberType" : "local",
    "id" : "id",
    "region" : "region"
  } ]
}, statusCode=200}]
     
     - parameter countryCode: (query) The ISO 3166-1 alpha-2 country code of the county for which available phone numbers should be returned 
     - parameter phoneNumberType: (query) Type of available phone numbers searched 
     - parameter region: (query) Region/province/state that can be used to restrict the numbers returned (optional)
     - parameter city: (query) City that can be used to restrict the numbers returned (optional)
     - parameter areaCode: (query) Area code that can be used to restrict the numbers returned (optional)
     - parameter pattern: (query) A pattern to match phone numbers. Valid characters are &#39;*&#39; and [0-9a-zA-Z]. The &#39;*&#39; character will match any single digit. (optional)
     - parameter addressRequirement: (query) This indicates whether the phone number requires to have an Address registered. (optional)

     - returns: RequestBuilder<SMSAvailablePhoneNumberEntityListing> 
     */
    open class func getRoutingSmsAvailablephonenumbersWithRequestBuilder(countryCode: String, phoneNumberType: PhoneNumberType_getRoutingSmsAvailablephonenumbers, region: String? = nil, city: String? = nil, areaCode: String? = nil, pattern: String? = nil, addressRequirement: AddressRequirement_getRoutingSmsAvailablephonenumbers? = nil) -> RequestBuilder<SMSAvailablePhoneNumberEntityListing> {        
        let path = "/api/v2/routing/sms/availablephonenumbers"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": countryCode, 
            "region": region, 
            "city": city, 
            "areaCode": areaCode, 
            "phoneNumberType": phoneNumberType.rawValue, 
            "pattern": pattern, 
            "addressRequirement": addressRequirement?.rawValue
        ])

        let requestBuilder: RequestBuilder<SMSAvailablePhoneNumberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum Expand_getRoutingSmsPhonenumber: String { 
        case compliance = "compliance"
    }

    
    /**
     Get a phone number provisioned for SMS.
     
     - parameter addressId: (path) Address ID 
     - parameter expand: (query) Expand response with additional information (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsPhonenumber(addressId: String, expand: Expand_getRoutingSmsPhonenumber? = nil, completion: @escaping ((_ data: SmsPhoneNumber?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsPhonenumberWithRequestBuilder(addressId: addressId, expand: expand)
        requestBuilder.execute { (response: Response<SmsPhoneNumber>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a phone number provisioned for SMS.
     - GET /api/v2/routing/sms/phonenumbers/{addressId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "supportsSms" : true,
  "country" : "country",
  "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
  "phoneNumberStatus" : "INVALID",
  "addressId" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "countryCode" : "countryCode",
  "provisioningStatus" : "{}",
  "phoneNumberType" : "local",
  "modifiedBy" : "{}",
  "supportsMms" : true,
  "id" : "id",
  "cancellationDate" : "2000-01-23T04:56:07.000+00:00",
  "supportsVoice" : true,
  "capabilities" : [ "sms", "sms" ],
  "shortCodeBillingType" : "Basic",
  "selfUri" : "https://openapi-generator.tech",
  "provisionedThroughPureCloud" : true,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "autoRenewable" : "Quarterly",
  "renewalDate" : "2000-01-23T04:56:07.000+00:00",
  "version" : 0,
  "phoneNumber" : "phoneNumber",
  "createdBy" : "{}",
  "compliance" : "{}",
  "name" : "name",
  "integration" : "{}"
}, statusCode=200}]
     
     - parameter addressId: (path) Address ID 
     - parameter expand: (query) Expand response with additional information (optional)

     - returns: RequestBuilder<SmsPhoneNumber> 
     */
    open class func getRoutingSmsPhonenumberWithRequestBuilder(addressId: String, expand: Expand_getRoutingSmsPhonenumber? = nil) -> RequestBuilder<SmsPhoneNumber> {        
        var path = "/api/v2/routing/sms/phonenumbers/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<SmsPhoneNumber>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    
    public enum SortBy_getRoutingSmsPhonenumbers: String { 
        case phonenumber = "phoneNumber"
        case countrycode = "countryCode"
        case country = "country"
        case datecreated = "dateCreated"
        case datemodified = "dateModified"
        case phonenumberstatus = "phoneNumberStatus"
        case phonenumbertype = "phoneNumberType"
        case purchasedate = "purchaseDate"
        case supportsmms = "supportsMms"
        case supportssms = "supportsSms"
        case supportsvoice = "supportsVoice"
    }

    
    
    public enum SortOrder_getRoutingSmsPhonenumbers: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    /**
     Get a list of provisioned phone numbers.
     
     - parameter phoneNumber: (query) Filter on phone number address. Allowable characters are the digits &#39;0-9&#39; and the wild card character &#39;\\*&#39;. If just digits are present, a contains search is done on the address pattern. For example, &#39;317&#39; could be matched anywhere in the address. An &#39;\\*&#39; will match multiple digits. For example, to match a specific area code within the US a pattern like &#39;1317*&#39; could be used. (optional)
     - parameter phoneNumberType: (query) Filter on phone number type (optional)
     - parameter phoneNumberStatus: (query) Filter on phone number status (optional)
     - parameter countryCode: (query) Filter on country code (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortBy: (query) Optional field to sort results (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter language: (query) A language tag (which is sometimes referred to as a \&quot;locale identifier\&quot;) to use to localize country field and sort operations (optional)
     - parameter integrationId: (query) Filter on the Genesys Cloud integration id to which the phone number belongs to (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingSmsPhonenumbers(phoneNumber: String? = nil, phoneNumberType: [String]? = nil, phoneNumberStatus: [String]? = nil, countryCode: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingSmsPhonenumbers? = nil, sortOrder: SortOrder_getRoutingSmsPhonenumbers? = nil, language: String? = nil, integrationId: String? = nil, completion: @escaping ((_ data: SmsPhoneNumberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingSmsPhonenumbersWithRequestBuilder(phoneNumber: phoneNumber, phoneNumberType: phoneNumberType, phoneNumberStatus: phoneNumberStatus, countryCode: countryCode, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, language: language, integrationId: integrationId)
        requestBuilder.execute { (response: Response<SmsPhoneNumberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of provisioned phone numbers.
     - GET /api/v2/routing/sms/phonenumbers
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "supportsSms" : true,
    "country" : "country",
    "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
    "phoneNumberStatus" : "INVALID",
    "addressId" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "countryCode" : "countryCode",
    "provisioningStatus" : "{}",
    "phoneNumberType" : "local",
    "modifiedBy" : "{}",
    "supportsMms" : true,
    "id" : "id",
    "cancellationDate" : "2000-01-23T04:56:07.000+00:00",
    "supportsVoice" : true,
    "capabilities" : [ "sms", "sms" ],
    "shortCodeBillingType" : "Basic",
    "selfUri" : "https://openapi-generator.tech",
    "provisionedThroughPureCloud" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "autoRenewable" : "Quarterly",
    "renewalDate" : "2000-01-23T04:56:07.000+00:00",
    "version" : 0,
    "phoneNumber" : "phoneNumber",
    "createdBy" : "{}",
    "compliance" : "{}",
    "name" : "name",
    "integration" : "{}"
  }, {
    "supportsSms" : true,
    "country" : "country",
    "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
    "phoneNumberStatus" : "INVALID",
    "addressId" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "countryCode" : "countryCode",
    "provisioningStatus" : "{}",
    "phoneNumberType" : "local",
    "modifiedBy" : "{}",
    "supportsMms" : true,
    "id" : "id",
    "cancellationDate" : "2000-01-23T04:56:07.000+00:00",
    "supportsVoice" : true,
    "capabilities" : [ "sms", "sms" ],
    "shortCodeBillingType" : "Basic",
    "selfUri" : "https://openapi-generator.tech",
    "provisionedThroughPureCloud" : true,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "autoRenewable" : "Quarterly",
    "renewalDate" : "2000-01-23T04:56:07.000+00:00",
    "version" : 0,
    "phoneNumber" : "phoneNumber",
    "createdBy" : "{}",
    "compliance" : "{}",
    "name" : "name",
    "integration" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter phoneNumber: (query) Filter on phone number address. Allowable characters are the digits &#39;0-9&#39; and the wild card character &#39;\\*&#39;. If just digits are present, a contains search is done on the address pattern. For example, &#39;317&#39; could be matched anywhere in the address. An &#39;\\*&#39; will match multiple digits. For example, to match a specific area code within the US a pattern like &#39;1317*&#39; could be used. (optional)
     - parameter phoneNumberType: (query) Filter on phone number type (optional)
     - parameter phoneNumberStatus: (query) Filter on phone number status (optional)
     - parameter countryCode: (query) Filter on country code (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortBy: (query) Optional field to sort results (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter language: (query) A language tag (which is sometimes referred to as a \&quot;locale identifier\&quot;) to use to localize country field and sort operations (optional)
     - parameter integrationId: (query) Filter on the Genesys Cloud integration id to which the phone number belongs to (optional)

     - returns: RequestBuilder<SmsPhoneNumberEntityListing> 
     */
    open class func getRoutingSmsPhonenumbersWithRequestBuilder(phoneNumber: String? = nil, phoneNumberType: [String]? = nil, phoneNumberStatus: [String]? = nil, countryCode: [String]? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingSmsPhonenumbers? = nil, sortOrder: SortOrder_getRoutingSmsPhonenumbers? = nil, language: String? = nil, integrationId: String? = nil) -> RequestBuilder<SmsPhoneNumberEntityListing> {        
        let path = "/api/v2/routing/sms/phonenumbers"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "phoneNumber": phoneNumber, 
            "phoneNumberType": phoneNumberType, 
            "phoneNumberStatus": phoneNumberStatus, 
            "countryCode": countryCode, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy?.rawValue, 
            "sortOrder": sortOrder?.rawValue, 
            "language": language, 
            "integration.id": integrationId
        ])

        let requestBuilder: RequestBuilder<SmsPhoneNumberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get the user's max utilization settings.  If not configured, the organization-wide default is returned.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingUserUtilization(userId: String, completion: @escaping ((_ data: AgentMaxUtilizationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingUserUtilizationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<AgentMaxUtilizationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the user's max utilization settings.  If not configured, the organization-wide default is returned.
     - GET /api/v2/routing/users/{userId}/utilization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "level" : "Agent",
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "interruptableMediaTypes", "interruptableMediaTypes" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 0
    }
  }
}, statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<AgentMaxUtilizationResponse> 
     */
    open class func getRoutingUserUtilizationWithRequestBuilder(userId: String) -> RequestBuilder<AgentMaxUtilizationResponse> {        
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AgentMaxUtilizationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get the organization-wide max utilization settings.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingUtilization(completion: @escaping ((_ data: UtilizationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingUtilizationWithRequestBuilder()
        requestBuilder.execute { (response: Response<UtilizationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the organization-wide max utilization settings.
     - GET /api/v2/routing/utilization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "interruptableMediaTypes", "interruptableMediaTypes" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 0
    }
  }
}, statusCode=200}]

     - returns: RequestBuilder<UtilizationResponse> 
     */
    open class func getRoutingUtilizationWithRequestBuilder() -> RequestBuilder<UtilizationResponse> {        
        let path = "/api/v2/routing/utilization"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UtilizationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get details about this wrap-up code.
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingWrapupcode(codeId: String, completion: @escaping ((_ data: WrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingWrapupcodeWithRequestBuilder(codeId: codeId)
        requestBuilder.execute { (response: Response<WrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get details about this wrap-up code.
     - GET /api/v2/routing/wrapupcodes/{codeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "modifiedBy",
  "id" : "id"
}, statusCode=200}]
     
     - parameter codeId: (path) Wrapup Code ID 

     - returns: RequestBuilder<WrapupCode> 
     */
    open class func getRoutingWrapupcodeWithRequestBuilder(codeId: String) -> RequestBuilder<WrapupCode> {        
        var path = "/api/v2/routing/wrapupcodes/{codeId}"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeId}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum SortBy_getRoutingWrapupcodes: String { 
        case name = "name"
        case _id = "id"
    }

    
    
    public enum SortOrder_getRoutingWrapupcodes: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    
    /**
     Get list of wrapup codes.
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter name: (query) Wrapup code&#39;s name (&#39;Sort by&#39; param is ignored unless this field is provided) (optional)
     - parameter _id: (query) Filter by wrapup code ID(s) (optional)
     - parameter divisionId: (query) Filter by division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingWrapupcodes(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingWrapupcodes? = nil, sortOrder: SortOrder_getRoutingWrapupcodes? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, completion: @escaping ((_ data: WrapupCodeEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingWrapupcodesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, sortOrder: sortOrder, name: name, _id: _id, divisionId: divisionId)
        requestBuilder.execute { (response: Response<WrapupCodeEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of wrapup codes.
     - GET /api/v2/routing/wrapupcodes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "createdBy",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "modifiedBy",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "createdBy",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "modifiedBy",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortBy: (query) Sort by (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter name: (query) Wrapup code&#39;s name (&#39;Sort by&#39; param is ignored unless this field is provided) (optional)
     - parameter _id: (query) Filter by wrapup code ID(s) (optional)
     - parameter divisionId: (query) Filter by division ID(s) (optional)

     - returns: RequestBuilder<WrapupCodeEntityListing> 
     */
    open class func getRoutingWrapupcodesWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: SortBy_getRoutingWrapupcodes? = nil, sortOrder: SortOrder_getRoutingWrapupcodes? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil) -> RequestBuilder<WrapupCodeEntityListing> {        
        let path = "/api/v2/routing/wrapupcodes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy?.rawValue, 
            "sortOrder": sortOrder?.rawValue, 
            "name": name, 
            "id": _id, 
            "divisionId": divisionId
        ])

        let requestBuilder: RequestBuilder<WrapupCodeEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a simplified wrap-up code.
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingWrapupcodesDivisionview(codeId: String, completion: @escaping ((_ data: WrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingWrapupcodesDivisionviewWithRequestBuilder(codeId: codeId)
        requestBuilder.execute { (response: Response<WrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a simplified wrap-up code.
     - GET /api/v2/routing/wrapupcodes/divisionviews/{codeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "modifiedBy",
  "id" : "id"
}, statusCode=200}]
     
     - parameter codeId: (path) Wrapup Code ID 

     - returns: RequestBuilder<WrapupCode> 
     */
    open class func getRoutingWrapupcodesDivisionviewWithRequestBuilder(codeId: String) -> RequestBuilder<WrapupCode> {        
        var path = "/api/v2/routing/wrapupcodes/divisionviews/{codeId}"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeId}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    
    public enum IncludeState_getRoutingWrapupcodesDivisionviews: String { 
        case active = "Active"
        case deleted = "Deleted"
        case activeAndDeleted = "ActiveAndDeleted"
    }

    
    /**
     Get a paged listing of simplified wrapup code objects, filterable by name, wrapup code ID(s), or division ID(s).
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter name: (query) Name (trailing asterisks allowed) (optional)
     - parameter _id: (query) Wrapup code ID(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter includeState: (query) Wrapup code state(s) to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingWrapupcodesDivisionviews(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, includeState: IncludeState_getRoutingWrapupcodesDivisionviews? = nil, completion: @escaping ((_ data: WrapupCodeEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingWrapupcodesDivisionviewsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, name: name, _id: _id, divisionId: divisionId, includeState: includeState)
        requestBuilder.execute { (response: Response<WrapupCodeEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a paged listing of simplified wrapup code objects, filterable by name, wrapup code ID(s), or division ID(s).
     - GET /api/v2/routing/wrapupcodes/divisionviews
     - Specifying both name and ID parameters is not supported.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "createdBy",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "modifiedBy",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "createdBy",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "modifiedBy",
    "id" : "id"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter name: (query) Name (trailing asterisks allowed) (optional)
     - parameter _id: (query) Wrapup code ID(s) (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter includeState: (query) Wrapup code state(s) to include (optional)

     - returns: RequestBuilder<WrapupCodeEntityListing> 
     */
    open class func getRoutingWrapupcodesDivisionviewsWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, name: String? = nil, _id: [String]? = nil, divisionId: [String]? = nil, includeState: IncludeState_getRoutingWrapupcodesDivisionviews? = nil) -> RequestBuilder<WrapupCodeEntityListing> {        
        let path = "/api/v2/routing/wrapupcodes/divisionviews"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "name": name, 
            "id": _id, 
            "divisionId": divisionId, 
            "includeState": includeState?.rawValue
        ])

        let requestBuilder: RequestBuilder<WrapupCodeEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     Get queues for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter joined: (query) Is joined to the queue (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserQueues(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, joined: Bool? = nil, divisionId: [String]? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserQueuesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, joined: joined, divisionId: divisionId)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get queues for user
     - GET /api/v2/users/{userId}/queues
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "pageCount" : 7,
  "pageNumber" : 5,
  "entities" : [ {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  }, {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 5,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter joined: (query) Is joined to the queue (optional)
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func getUserQueuesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, joined: Bool? = nil, divisionId: [String]? = nil) -> RequestBuilder<UserQueueEntityListing> {        
        var path = "/api/v2/users/{userId}/queues"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "joined": joined, 
            "divisionId": divisionId
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum SortOrder_getUserRoutinglanguages: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    /**
     List routing language for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutinglanguages(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutinglanguages? = nil, completion: @escaping ((_ data: UserLanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutinglanguagesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserLanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List routing language for user
     - GET /api/v2/users/{userId}/routinglanguages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<UserLanguageEntityListing> 
     */
    open class func getUserRoutinglanguagesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutinglanguages? = nil) -> RequestBuilder<UserLanguageEntityListing> {        
        var path = "/api/v2/users/{userId}/routinglanguages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<UserLanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum SortOrder_getUserRoutingskills: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    /**
     List routing skills for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutingskills(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutingskills? = nil, completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutingskillsWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List routing skills for user
     - GET /api/v2/users/{userId}/routingskills
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func getUserRoutingskillsWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutingskills? = nil) -> RequestBuilder<UserSkillEntityListing> {        
        var path = "/api/v2/users/{userId}/routingskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Get skill groups for a user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter after: (query) The cursor that points to the next page (optional)
     - parameter before: (query) The cursor that points to the previous page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserSkillgroups(userId: String, pageSize: Int? = nil, after: String? = nil, before: String? = nil, completion: @escaping ((_ data: UserSkillGroupEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserSkillgroupsWithRequestBuilder(userId: userId, pageSize: pageSize, after: after, before: before)
        requestBuilder.execute { (response: Response<UserSkillGroupEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get skill groups for a user
     - GET /api/v2/users/{userId}/skillgroups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "skillConditions" : [ {
      "languageSkillConditions" : [ {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "routingSkillConditions" : [ {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "operation" : "And"
    }, {
      "languageSkillConditions" : [ {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "routingSkillConditions" : [ {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "operation" : "And"
    } ],
    "status" : "InProgress"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "skillConditions" : [ {
      "languageSkillConditions" : [ {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "routingSkillConditions" : [ {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "operation" : "And"
    }, {
      "languageSkillConditions" : [ {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "routingSkillConditions" : [ {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "operation" : "And"
    } ],
    "status" : "InProgress"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter after: (query) The cursor that points to the next page (optional)
     - parameter before: (query) The cursor that points to the previous page (optional)

     - returns: RequestBuilder<UserSkillGroupEntityListing> 
     */
    open class func getUserSkillgroupsWithRequestBuilder(userId: String, pageSize: Int? = nil, after: String? = nil, before: String? = nil) -> RequestBuilder<UserSkillGroupEntityListing> {        
        var path = "/api/v2/users/{userId}/skillgroups"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "after": after, 
            "before": before
        ])

        let requestBuilder: RequestBuilder<UserSkillGroupEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Update attributes of an in-queue conversation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter body: (body) Conversation Attributes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingConversation(conversationId: String, body: RoutingConversationAttributesRequest, completion: @escaping ((_ data: RoutingConversationAttributesResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingConversationWithRequestBuilder(conversationId: conversationId, body: body)
        requestBuilder.execute { (response: Response<RoutingConversationAttributesResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update attributes of an in-queue conversation
     - PATCH /api/v2/routing/conversations/{conversationId}
     - Returns an object indicating the updated values of all settable attributes. Supported attributes: skillIds, languageId, and priority.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  } ],
  "language" : "{}",
  "scoredAgents" : [ {
    "score" : 6,
    "agent" : "{}"
  }, {
    "score" : 6,
    "agent" : "{}"
  } ],
  "priority" : 0
}, statusCode=200}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter body: (body) Conversation Attributes 

     - returns: RequestBuilder<RoutingConversationAttributesResponse> 
     */
    open class func patchRoutingConversationWithRequestBuilder(conversationId: String, body: RoutingConversationAttributesRequest) -> RequestBuilder<RoutingConversationAttributesResponse> {        
        var path = "/api/v2/routing/conversations/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingConversationAttributesResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Update domain settings
     
     - parameter domainId: (path) domain ID 
     - parameter body: (body) Domain settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingEmailDomain(domainId: String, body: InboundDomainPatchRequest, completion: @escaping ((_ data: InboundDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingEmailDomainWithRequestBuilder(domainId: domainId, body: body)
        requestBuilder.execute { (response: Response<InboundDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update domain settings
     - PATCH /api/v2/routing/email/domains/{domainId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "customSMTPServer" : "{}",
  "mailFromSettings" : "{}",
  "subDomain" : true,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "mxRecordStatus" : "VALID",
  "id" : "id"
}, statusCode=200}]
     
     - parameter domainId: (path) domain ID 
     - parameter body: (body) Domain settings 

     - returns: RequestBuilder<InboundDomain> 
     */
    open class func patchRoutingEmailDomainWithRequestBuilder(domainId: String, body: InboundDomainPatchRequest) -> RequestBuilder<InboundDomain> {        
        var path = "/api/v2/routing/email/domains/{domainId}"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Validate domain settings
     
     - parameter domainId: (path) domain ID 
     - parameter body: (body) Domain settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingEmailDomainValidate(domainId: String, body: InboundDomainPatchRequest, completion: @escaping ((_ data: InboundDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingEmailDomainValidateWithRequestBuilder(domainId: domainId, body: body)
        requestBuilder.execute { (response: Response<InboundDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Validate domain settings
     - PATCH /api/v2/routing/email/domains/{domainId}/validate
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "customSMTPServer" : "{}",
  "mailFromSettings" : "{}",
  "subDomain" : true,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "mxRecordStatus" : "VALID",
  "id" : "id"
}, statusCode=200}]
     
     - parameter domainId: (path) domain ID 
     - parameter body: (body) Domain settings 

     - returns: RequestBuilder<InboundDomain> 
     */
    open class func patchRoutingEmailDomainValidateWithRequestBuilder(domainId: String, body: InboundDomainPatchRequest) -> RequestBuilder<InboundDomain> {        
        var path = "/api/v2/routing/email/domains/{domainId}/validate"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Update single predictor.
     
     - parameter predictorId: (path) Predictor ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingPredictor(predictorId: String, body: PatchPredictorRequest? = nil, completion: @escaping ((_ data: Predictor?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingPredictorWithRequestBuilder(predictorId: predictorId, body: body)
        requestBuilder.execute { (response: Response<Predictor>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update single predictor.
     - PATCH /api/v2/routing/predictors/{predictorId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schedule" : "{}",
  "models" : [ {
    "retrainingErrors" : [ {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    }, {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    } ],
    "mediaType" : "voice",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "state" : "Trained"
  }, {
    "retrainingErrors" : [ {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    }, {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    } ],
    "mediaType" : "voice",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "state" : "Trained"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "kpi" : "kpi",
  "queues" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "routingTimeoutSeconds" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "errorCode" : "errorCode",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Created",
  "workloadBalancingConfig" : "{}"
}, statusCode=200}]
     
     - parameter predictorId: (path) Predictor ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Predictor> 
     */
    open class func patchRoutingPredictorWithRequestBuilder(predictorId: String, body: PatchPredictorRequest? = nil) -> RequestBuilder<Predictor> {        
        var path = "/api/v2/routing/predictors/{predictorId}"
        let predictorIdPreEscape = "\(predictorId)"
        let predictorIdPostEscape = predictorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{predictorId}", with: predictorIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Predictor>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     Update the ring number OR joined status for a queue member.
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Queue Member 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingQueueMember(queueId: String, memberId: String, body: QueueMember, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingQueueMemberWithRequestBuilder(queueId: queueId, memberId: memberId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Update the ring number OR joined status for a queue member.
     - PATCH /api/v2/routing/queues/{queueId}/members/{memberId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Queue Member 

     - returns: RequestBuilder<Void> 
     */
    open class func patchRoutingQueueMemberWithRequestBuilder(queueId: String, memberId: String, body: QueueMember) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/queues/{queueId}/members/{memberId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Join or unjoin a set of users for a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingQueueMembers(queueId: String, body: [QueueMember], completion: @escaping ((_ data: QueueMemberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingQueueMembersWithRequestBuilder(queueId: queueId, body: body)
        requestBuilder.execute { (response: Response<QueueMemberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Join or unjoin a set of users for a queue
     - PATCH /api/v2/routing/queues/{queueId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "pageNumber" : 0,
  "entities" : [ {
    "joined" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "memberBy" : "memberBy",
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "userId" : "userId",
      "status" : "OFF_QUEUE"
    },
    "user" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "ringNumber" : 0
  }, {
    "joined" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "memberBy" : "memberBy",
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "userId" : "userId",
      "status" : "OFF_QUEUE"
    },
    "user" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "ringNumber" : 0
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 6,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 

     - returns: RequestBuilder<QueueMemberEntityListing> 
     */
    open class func patchRoutingQueueMembersWithRequestBuilder(queueId: String, body: [QueueMember]) -> RequestBuilder<QueueMemberEntityListing> {        
        var path = "/api/v2/routing/queues/{queueId}/members"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueMemberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     DEPRECATED: use PATCH /routing/queues/{queueId}/members/{memberId}.  Update the ring number OR joined status for a User in a Queue.
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Queue Member 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingQueueUser(queueId: String, memberId: String, body: QueueMember, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingQueueUserWithRequestBuilder(queueId: queueId, memberId: memberId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     DEPRECATED: use PATCH /routing/queues/{queueId}/members/{memberId}.  Update the ring number OR joined status for a User in a Queue.
     - PATCH /api/v2/routing/queues/{queueId}/users/{memberId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Queue Member 

     - returns: RequestBuilder<Void> 
     */
    open class func patchRoutingQueueUserWithRequestBuilder(queueId: String, memberId: String, body: QueueMember) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/queues/{queueId}/users/{memberId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     DEPRECATED: use PATCH /routing/queues/{queueId}/members.  Join or unjoin a set of users for a queue.
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingQueueUsers(queueId: String, body: [QueueMember], completion: @escaping ((_ data: QueueMemberEntityListingV1?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingQueueUsersWithRequestBuilder(queueId: queueId, body: body)
        requestBuilder.execute { (response: Response<QueueMemberEntityListingV1>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     DEPRECATED: use PATCH /routing/queues/{queueId}/members.  Join or unjoin a set of users for a queue.
     - PATCH /api/v2/routing/queues/{queueId}/users
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "joined" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "memberBy" : "memberBy",
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "userId" : "userId",
      "status" : "OFF_QUEUE"
    },
    "user" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "ringNumber" : 0
  }, {
    "joined" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "memberBy" : "memberBy",
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "userId" : "userId",
      "status" : "OFF_QUEUE"
    },
    "user" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "ringNumber" : 0
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 

     - returns: RequestBuilder<QueueMemberEntityListingV1> 
     */
    open class func patchRoutingQueueUsersWithRequestBuilder(queueId: String, body: [QueueMember]) -> RequestBuilder<QueueMemberEntityListingV1> {        
        var path = "/api/v2/routing/queues/{queueId}/users"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueMemberEntityListingV1>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Update Contact Center Settings
     
     - parameter body: (body) Contact Center Settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingSettingsContactcenter(body: ContactCenterSettings, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingSettingsContactcenterWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Update Contact Center Settings
     - PATCH /api/v2/routing/settings/contactcenter
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body) Contact Center Settings 

     - returns: RequestBuilder<Void> 
     */
    open class func patchRoutingSettingsContactcenterWithRequestBuilder(body: ContactCenterSettings) -> RequestBuilder<Void> {        
        let path = "/api/v2/routing/settings/contactcenter"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Patch Transcription Settings
     
     - parameter body: (body) Organization Settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingSettingsTranscription(body: TranscriptionSettings, completion: @escaping ((_ data: TranscriptionSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingSettingsTranscriptionWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TranscriptionSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch Transcription Settings
     - PATCH /api/v2/routing/settings/transcription
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "transcription" : "Disabled",
  "pciDssRedactionEnabled" : true,
  "contentSearchEnabled" : true,
  "transcriptionConfidenceThreshold" : 0,
  "lowLatencyTranscriptionEnabled" : true,
  "piiRedactionEnabled" : true
}, statusCode=200}]
     
     - parameter body: (body) Organization Settings 

     - returns: RequestBuilder<TranscriptionSettings> 
     */
    open class func patchRoutingSettingsTranscriptionWithRequestBuilder(body: TranscriptionSettings) -> RequestBuilder<TranscriptionSettings> {        
        let path = "/api/v2/routing/settings/transcription"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptionSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Update skill group definition
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter body: (body) Update skill groups 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchRoutingSkillgroup(skillGroupId: String, body: SkillGroup, completion: @escaping ((_ data: SkillGroup?,_ error: Error?) -> Void)) {
        let requestBuilder = patchRoutingSkillgroupWithRequestBuilder(skillGroupId: skillGroupId, body: body)
        requestBuilder.execute { (response: Response<SkillGroup>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update skill group definition
     - PATCH /api/v2/routing/skillgroups/{skillGroupId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "skillConditions" : [ {
    "languageSkillConditions" : [ {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "routingSkillConditions" : [ {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "operation" : "And"
  }, {
    "languageSkillConditions" : [ {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "routingSkillConditions" : [ {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "operation" : "And"
  } ],
  "status" : "InProgress"
}, statusCode=200}]
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter body: (body) Update skill groups 

     - returns: RequestBuilder<SkillGroup> 
     */
    open class func patchRoutingSkillgroupWithRequestBuilder(skillGroupId: String, body: SkillGroup) -> RequestBuilder<SkillGroup> {        
        var path = "/api/v2/routing/skillgroups/{skillGroupId}"
        let skillGroupIdPreEscape = "\(skillGroupId)"
        let skillGroupIdPostEscape = skillGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillGroupId}", with: skillGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SkillGroup>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     Join or unjoin a queue for a user
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserQueue(queueId: String, userId: String, body: UserQueue, completion: @escaping ((_ data: UserQueue?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserQueueWithRequestBuilder(queueId: queueId, userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserQueue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Join or unjoin a queue for a user
     - PATCH /api/v2/users/{userId}/queues/{queueId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "peerId" : "peerId",
  "conditionalGroupRouting" : "{}",
  "enableAudioMonitoring" : true,
  "mediaSettings" : "{}",
  "enableManualAssignment" : true,
  "description" : "description",
  "onHoldPrompt" : "{}",
  "emailInQueueFlow" : "{}",
  "routingRules" : [ {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  }, {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  } ],
  "skillEvaluationMethod" : "NONE",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+00:00",
      "division" : "{}",
      "features" : "{}",
      "versionId" : "versionId",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "pages" : [ {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      }, {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "startPageName",
      "name" : "name",
      "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "startPageId" : "startPageId",
      "id" : "id",
      "publishedDate" : "2000-01-23T04:56:07.000+00:00"
    }
  },
  "division" : "{}",
  "suppressInQueueCallRecording" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "queueFlow" : "{}",
  "callingPartyNumber" : "callingPartyNumber",
  "userMemberCount" : 6,
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "memberGroups" : [ {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  }, {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  } ],
  "scoringMethod" : "TimestampAndPriority",
  "joinedMemberCount" : 1,
  "messageInQueueFlow" : "{}",
  "callingPartyName" : "callingPartyName",
  "acwSettings" : "{}",
  "joined" : true,
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "whisperPrompt" : "{}",
  "enableTranscription" : true,
  "outboundEmailAddress" : {
    "route" : {
      "signature" : "{}",
      "replyEmailAddress" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "pattern" : "pattern",
      "language" : "{}",
      "autoBcc" : [ {
        "name" : "name",
        "email" : "email"
      }, {
        "name" : "name",
        "email" : "email"
      } ],
      "priority" : 7,
      "fromEmail" : "fromEmail",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "allowMultipleActions" : true,
      "name" : "name",
      "fromName" : "fromName",
      "id" : "id",
      "historyInclusion" : "Include",
      "queue" : "{}",
      "flow" : "{}",
      "spamFlow" : "{}"
    },
    "domain" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }
  },
  "bullseye" : "{}",
  "outboundMessagingAddresses" : "{}",
  "createdBy" : "createdBy",
  "directRouting" : "{}",
  "name" : "name",
  "agentOwnedRouting" : "{}"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member 

     - returns: RequestBuilder<UserQueue> 
     */
    open class func patchUserQueueWithRequestBuilder(queueId: String, userId: String, body: UserQueue) -> RequestBuilder<UserQueue> {        
        var path = "/api/v2/users/{userId}/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserQueue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     Join or unjoin a set of queues for a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues 
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserQueues(userId: String, body: [UserQueue], divisionId: [String]? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserQueuesWithRequestBuilder(userId: userId, body: body, divisionId: divisionId)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Join or unjoin a set of queues for a user
     - PATCH /api/v2/users/{userId}/queues
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "pageCount" : 7,
  "pageNumber" : 5,
  "entities" : [ {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  }, {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 5,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues 
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func patchUserQueuesWithRequestBuilder(userId: String, body: [UserQueue], divisionId: [String]? = nil) -> RequestBuilder<UserQueueEntityListing> {        
        var path = "/api/v2/users/{userId}/queues"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "divisionId": divisionId
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     Update routing language proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutinglanguage(userId: String, languageId: String, body: UserRoutingLanguage, completion: @escaping ((_ data: UserRoutingLanguage?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutinglanguageWithRequestBuilder(userId: userId, languageId: languageId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingLanguage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update routing language proficiency or state.
     - PATCH /api/v2/users/{userId}/routinglanguages/{languageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "state" : "active",
  "languageUri" : "https://openapi-generator.tech",
  "proficiency" : 9.301444243932576
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserRoutingLanguage> 
     */
    open class func patchUserRoutinglanguageWithRequestBuilder(userId: String, languageId: String, body: UserRoutingLanguage) -> RequestBuilder<UserRoutingLanguage> {        
        var path = "/api/v2/users/{userId}/routinglanguages/{languageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingLanguage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Add bulk routing language to user. Max limit 50 languages
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutinglanguagesBulk(userId: String, body: [UserRoutingLanguagePost], completion: @escaping ((_ data: UserLanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutinglanguagesBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserLanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add bulk routing language to user. Max limit 50 languages
     - PATCH /api/v2/users/{userId}/routinglanguages/bulk
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserLanguageEntityListing> 
     */
    open class func patchUserRoutinglanguagesBulkWithRequestBuilder(userId: String, body: [UserRoutingLanguagePost]) -> RequestBuilder<UserLanguageEntityListing> {        
        var path = "/api/v2/users/{userId}/routinglanguages/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserLanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Bulk add routing skills to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutingskillsBulk(userId: String, body: [UserRoutingSkillPost], completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutingskillsBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk add routing skills to user
     - PATCH /api/v2/users/{userId}/routingskills/bulk
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func patchUserRoutingskillsBulkWithRequestBuilder(userId: String, body: [UserRoutingSkillPost]) -> RequestBuilder<UserSkillEntityListing> {        
        var path = "/api/v2/users/{userId}/routingskills/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Query for queue observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsQueuesObservationsQuery(body: QueueObservationQuery, completion: @escaping ((_ data: QueueObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<QueueObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for queue observations
     - POST /api/v2/analytics/queues/observations/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "systemToOrganizationMappings", "systemToOrganizationMappings" ]
  },
  "results" : [ {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<QueueObservationQueryResponse> 
     */
    open class func postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: QueueObservationQuery) -> RequestBuilder<QueueObservationQueryResponse> {        
        let path = "/api/v2/analytics/queues/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<QueueObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a benefit assessment.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingAssessments(body: CreateBenefitAssessmentRequest? = nil, completion: @escaping ((_ data: BenefitAssessment?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingAssessmentsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BenefitAssessment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a benefit assessment.
     - POST /api/v2/routing/assessments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "queues" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Created",
  "kpiAssessments" : [ {
    "assessmentResult" : "Unknown",
    "checks" : [ {
      "result" : "Passed",
      "type" : "HandleTimeValue"
    }, {
      "result" : "Passed",
      "type" : "HandleTimeValue"
    } ],
    "kpi" : "kpi"
  }, {
    "assessmentResult" : "Unknown",
    "checks" : [ {
      "result" : "Passed",
      "type" : "HandleTimeValue"
    }, {
      "result" : "Passed",
      "type" : "HandleTimeValue"
    } ],
    "kpi" : "kpi"
  } ]
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<BenefitAssessment> 
     */
    open class func postRoutingAssessmentsWithRequestBuilder(body: CreateBenefitAssessmentRequest? = nil) -> RequestBuilder<BenefitAssessment> {        
        let path = "/api/v2/routing/assessments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BenefitAssessment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a benefit assessment job.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingAssessmentsJobs(body: CreateBenefitAssessmentJobRequest? = nil, completion: @escaping ((_ data: BenefitAssessmentJob?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingAssessmentsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<BenefitAssessmentJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a benefit assessment job.
     - POST /api/v2/routing/assessments/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Created"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<BenefitAssessmentJob> 
     */
    open class func postRoutingAssessmentsJobsWithRequestBuilder(body: CreateBenefitAssessmentJobRequest? = nil) -> RequestBuilder<BenefitAssessmentJob> {        
        let path = "/api/v2/routing/assessments/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BenefitAssessmentJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Create a route
     
     - parameter domainName: (path) email domain 
     - parameter body: (body) Route 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingEmailDomainRoutes(domainName: String, body: InboundRoute, completion: @escaping ((_ data: InboundRoute?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingEmailDomainRoutesWithRequestBuilder(domainName: domainName, body: body)
        requestBuilder.execute { (response: Response<InboundRoute>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a route
     - POST /api/v2/routing/email/domains/{domainName}/routes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "signature" : "{}",
  "replyEmailAddress" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "pattern" : "pattern",
  "language" : "{}",
  "autoBcc" : [ {
    "name" : "name",
    "email" : "email"
  }, {
    "name" : "name",
    "email" : "email"
  } ],
  "priority" : 7,
  "fromEmail" : "fromEmail",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "allowMultipleActions" : true,
  "name" : "name",
  "fromName" : "fromName",
  "id" : "id",
  "historyInclusion" : "Include",
  "queue" : "{}",
  "flow" : "{}",
  "spamFlow" : "{}"
}, statusCode=200}]
     
     - parameter domainName: (path) email domain 
     - parameter body: (body) Route 

     - returns: RequestBuilder<InboundRoute> 
     */
    open class func postRoutingEmailDomainRoutesWithRequestBuilder(domainName: String, body: InboundRoute) -> RequestBuilder<InboundRoute> {        
        var path = "/api/v2/routing/email/domains/{domainName}/routes"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundRoute>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Tests the custom SMTP server integration connection set on this domain
     
     - parameter domainId: (path) domain ID 
     - parameter body: (body) TestMessage (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingEmailDomainTestconnection(domainId: String, body: TestMessage? = nil, completion: @escaping ((_ data: TestMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingEmailDomainTestconnectionWithRequestBuilder(domainId: domainId, body: body)
        requestBuilder.execute { (response: Response<TestMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Tests the custom SMTP server integration connection set on this domain
     - POST /api/v2/routing/email/domains/{domainId}/testconnection
     - The request body is optional. If omitted, this endpoint will just test the connection of the Custom SMTP Server. If the body is specified, there will be an attempt to send an email message to the server.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "htmlBody" : "htmlBody",
  "subject" : "subject",
  "from" : "{}",
  "textBody" : "textBody",
  "id" : "id",
  "to" : [ {
    "name" : "name",
    "email" : "email"
  }, {
    "name" : "name",
    "email" : "email"
  } ],
  "time" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter domainId: (path) domain ID 
     - parameter body: (body) TestMessage (optional)

     - returns: RequestBuilder<TestMessage> 
     */
    open class func postRoutingEmailDomainTestconnectionWithRequestBuilder(domainId: String, body: TestMessage? = nil) -> RequestBuilder<TestMessage> {        
        var path = "/api/v2/routing/email/domains/{domainId}/testconnection"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TestMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a domain
     
     - parameter body: (body) Domain 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingEmailDomains(body: InboundDomain, completion: @escaping ((_ data: InboundDomain?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingEmailDomainsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<InboundDomain>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a domain
     - POST /api/v2/routing/email/domains
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "customSMTPServer" : "{}",
  "mailFromSettings" : "{}",
  "subDomain" : true,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "mxRecordStatus" : "VALID",
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Domain 

     - returns: RequestBuilder<InboundDomain> 
     */
    open class func postRoutingEmailDomainsWithRequestBuilder(body: InboundDomain) -> RequestBuilder<InboundDomain> {        
        let path = "/api/v2/routing/email/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundDomain>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a domain
     
     - parameter body: (body) Domain 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingEmailOutboundDomains(body: OutboundDomain, completion: @escaping ((_ data: EmailOutboundDomainResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingEmailOutboundDomainsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EmailOutboundDomainResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a domain
     - POST /api/v2/routing/email/outbound/domains
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "senderStatus" : "RequestReceived",
  "domainName" : "domainName",
  "senderType" : "Unknown",
  "dnsTxtSendingRecord" : {
    "recordContents" : "recordContents",
    "verificationStatus" : "Pending",
    "host" : "host"
  },
  "dnsCnameBounceRecord" : {
    "recordContents" : "recordContents",
    "verificationStatus" : "Pending",
    "host" : "host"
  }
}, statusCode=202}]
     
     - parameter body: (body) Domain 

     - returns: RequestBuilder<EmailOutboundDomainResult> 
     */
    open class func postRoutingEmailOutboundDomainsWithRequestBuilder(body: OutboundDomain) -> RequestBuilder<EmailOutboundDomainResult> {        
        let path = "/api/v2/routing/email/outbound/domains"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailOutboundDomainResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a simulated domain
     
     - parameter body: (body) Domain 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingEmailOutboundDomainsSimulated(body: OutboundDomain, completion: @escaping ((_ data: EmailOutboundDomainResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingEmailOutboundDomainsSimulatedWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<EmailOutboundDomainResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a simulated domain
     - POST /api/v2/routing/email/outbound/domains/simulated
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "senderStatus" : "RequestReceived",
  "domainName" : "domainName",
  "senderType" : "Unknown",
  "dnsTxtSendingRecord" : {
    "recordContents" : "recordContents",
    "verificationStatus" : "Pending",
    "host" : "host"
  },
  "dnsCnameBounceRecord" : {
    "recordContents" : "recordContents",
    "verificationStatus" : "Pending",
    "host" : "host"
  }
}, statusCode=202}]
     
     - parameter body: (body) Domain 

     - returns: RequestBuilder<EmailOutboundDomainResult> 
     */
    open class func postRoutingEmailOutboundDomainsSimulatedWithRequestBuilder(body: OutboundDomain) -> RequestBuilder<EmailOutboundDomainResult> {        
        let path = "/api/v2/routing/email/outbound/domains/simulated"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailOutboundDomainResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create Language
     
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingLanguages(body: Language, completion: @escaping ((_ data: Language?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingLanguagesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Language>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create Language
     - POST /api/v2/routing/languages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "version" : "version"
}, statusCode=200}]
     
     - parameter body: (body) Language 

     - returns: RequestBuilder<Language> 
     */
    open class func postRoutingLanguagesWithRequestBuilder(body: Language) -> RequestBuilder<Language> {        
        let path = "/api/v2/routing/languages"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Language>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a predictor.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingPredictors(body: CreatePredictorRequest? = nil, completion: @escaping ((_ data: Predictor?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingPredictorsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Predictor>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a predictor.
     - POST /api/v2/routing/predictors
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schedule" : "{}",
  "models" : [ {
    "retrainingErrors" : [ {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    }, {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    } ],
    "mediaType" : "voice",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "state" : "Trained"
  }, {
    "retrainingErrors" : [ {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    }, {
      "dateOfFirstOccurrence" : "2000-01-23T04:56:07.000+00:00",
      "errorCode" : "NotEnoughData",
      "id" : "id"
    } ],
    "mediaType" : "voice",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "state" : "Trained"
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "kpi" : "kpi",
  "queues" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "routingTimeoutSeconds" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "errorCode" : "errorCode",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Created",
  "workloadBalancingConfig" : "{}"
}, statusCode=200}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Predictor> 
     */
    open class func postRoutingPredictorsWithRequestBuilder(body: CreatePredictorRequest? = nil) -> RequestBuilder<Predictor> {        
        let path = "/api/v2/routing/predictors"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Predictor>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Bulk add or delete up to 100 queue members
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 
     - parameter delete: (query) True to delete queue members (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingQueueMembers(queueId: String, body: [WritableEntity], delete: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingQueueMembersWithRequestBuilder(queueId: queueId, body: body, delete: delete)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk add or delete up to 100 queue members
     - POST /api/v2/routing/queues/{queueId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 
     - parameter delete: (query) True to delete queue members (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postRoutingQueueMembersWithRequestBuilder(queueId: String, body: [WritableEntity], delete: Bool? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/queues/{queueId}/members"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "delete": delete
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     DEPRECATED: use POST /routing/queues/{queueId}/members.  Bulk add or delete up to 100 queue members.
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 
     - parameter delete: (query) True to delete queue members (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingQueueUsers(queueId: String, body: [WritableEntity], delete: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingQueueUsersWithRequestBuilder(queueId: queueId, body: body, delete: delete)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     DEPRECATED: use POST /routing/queues/{queueId}/members.  Bulk add or delete up to 100 queue members.
     - POST /api/v2/routing/queues/{queueId}/users
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members 
     - parameter delete: (query) True to delete queue members (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postRoutingQueueUsersWithRequestBuilder(queueId: String, body: [WritableEntity], delete: Bool? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/queues/{queueId}/users"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "delete": delete
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Add up to 100 wrap-up codes to a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) List of wrapup codes 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingQueueWrapupcodes(queueId: String, body: [WrapUpCodeReference], completion: @escaping ((_ data: [WrapupCode]?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingQueueWrapupcodesWithRequestBuilder(queueId: queueId, body: body)
        requestBuilder.execute { (response: Response<[WrapupCode]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add up to 100 wrap-up codes to a queue
     - POST /api/v2/routing/queues/{queueId}/wrapupcodes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "modifiedBy",
  "id" : "id"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) List of wrapup codes 

     - returns: RequestBuilder<[WrapupCode]> 
     */
    open class func postRoutingQueueWrapupcodesWithRequestBuilder(queueId: String, body: [WrapUpCodeReference]) -> RequestBuilder<[WrapupCode]> {        
        var path = "/api/v2/routing/queues/{queueId}/wrapupcodes"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[WrapupCode]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a queue
     
     - parameter body: (body) Queue 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingQueues(body: CreateQueueRequest, completion: @escaping ((_ data: Queue?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingQueuesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Queue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a queue
     - POST /api/v2/routing/queues
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "peerId" : "peerId",
  "conditionalGroupRouting" : "{}",
  "enableAudioMonitoring" : true,
  "mediaSettings" : "{}",
  "enableManualAssignment" : true,
  "description" : "description",
  "onHoldPrompt" : "{}",
  "emailInQueueFlow" : "{}",
  "autoAnswerOnly" : true,
  "routingRules" : [ {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  }, {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  } ],
  "skillEvaluationMethod" : "NONE",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+00:00",
      "division" : "{}",
      "features" : "{}",
      "versionId" : "versionId",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "pages" : [ {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      }, {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "startPageName",
      "name" : "name",
      "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "startPageId" : "startPageId",
      "id" : "id",
      "publishedDate" : "2000-01-23T04:56:07.000+00:00"
    }
  },
  "division" : "{}",
  "suppressInQueueCallRecording" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "queueFlow" : "{}",
  "callingPartyNumber" : "callingPartyNumber",
  "userMemberCount" : 6,
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "memberGroups" : [ {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  }, {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  } ],
  "scoringMethod" : "TimestampAndPriority",
  "joinedMemberCount" : 1,
  "messageInQueueFlow" : "{}",
  "callingPartyName" : "callingPartyName",
  "acwSettings" : "{}",
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "whisperPrompt" : "{}",
  "enableTranscription" : true,
  "outboundEmailAddress" : {
    "route" : {
      "signature" : "{}",
      "replyEmailAddress" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "pattern" : "pattern",
      "language" : "{}",
      "autoBcc" : [ {
        "name" : "name",
        "email" : "email"
      }, {
        "name" : "name",
        "email" : "email"
      } ],
      "priority" : 7,
      "fromEmail" : "fromEmail",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "allowMultipleActions" : true,
      "name" : "name",
      "fromName" : "fromName",
      "id" : "id",
      "historyInclusion" : "Include",
      "queue" : "{}",
      "flow" : "{}",
      "spamFlow" : "{}"
    },
    "domain" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }
  },
  "bullseye" : "{}",
  "outboundMessagingAddresses" : "{}",
  "createdBy" : "createdBy",
  "directRouting" : "{}",
  "name" : "name",
  "agentOwnedRouting" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Queue 

     - returns: RequestBuilder<Queue> 
     */
    open class func postRoutingQueuesWithRequestBuilder(body: CreateQueueRequest) -> RequestBuilder<Queue> {        
        let path = "/api/v2/routing/queues"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Queue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Add or remove member divisions for this skill group.
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingSkillgroupMembersDivisions(skillGroupId: String, body: SkillGroupMemberDivisions? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingSkillgroupMembersDivisionsWithRequestBuilder(skillGroupId: skillGroupId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Add or remove member divisions for this skill group.
     - POST /api/v2/routing/skillgroups/{skillGroupId}/members/divisions
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter skillGroupId: (path) Skill Group ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postRoutingSkillgroupMembersDivisionsWithRequestBuilder(skillGroupId: String, body: SkillGroupMemberDivisions? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/skillgroups/{skillGroupId}/members/divisions"
        let skillGroupIdPreEscape = "\(skillGroupId)"
        let skillGroupIdPostEscape = skillGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillGroupId}", with: skillGroupIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a skill group
     
     - parameter body: (body) Create skill group 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingSkillgroups(body: SkillGroupWithMemberDivisions, completion: @escaping ((_ data: SkillGroupWithMemberDivisions?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingSkillgroupsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SkillGroupWithMemberDivisions>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a skill group
     - POST /api/v2/routing/skillgroups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "skillConditions" : [ {
    "languageSkillConditions" : [ {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "routingSkillConditions" : [ {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "operation" : "And"
  }, {
    "languageSkillConditions" : [ {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "languageSkill" : "English-Written",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "routingSkillConditions" : [ {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    }, {
      "comparator" : "EqualTo",
      "routingSkill" : "routingSkill",
      "childConditions" : [ null, null ],
      "proficiency" : 5
    } ],
    "operation" : "And"
  } ],
  "memberDivisions" : [ "memberDivisions", "memberDivisions" ],
  "status" : "InProgress"
}, statusCode=200}]
     
     - parameter body: (body) Create skill group 

     - returns: RequestBuilder<SkillGroupWithMemberDivisions> 
     */
    open class func postRoutingSkillgroupsWithRequestBuilder(body: SkillGroupWithMemberDivisions) -> RequestBuilder<SkillGroupWithMemberDivisions> {        
        let path = "/api/v2/routing/skillgroups"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SkillGroupWithMemberDivisions>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create Skill
     
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingSkills(body: RoutingSkill, completion: @escaping ((_ data: RoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingSkillsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create Skill
     - POST /api/v2/routing/skills
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "version" : "version"
}, statusCode=200}]
     
     - parameter body: (body) Skill 

     - returns: RequestBuilder<RoutingSkill> 
     */
    open class func postRoutingSkillsWithRequestBuilder(body: RoutingSkill) -> RequestBuilder<RoutingSkill> {        
        let path = "/api/v2/routing/skills"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Provision an Address for SMS
     
     - parameter body: (body) SmsAddress 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingSmsAddresses(body: SmsAddressProvision, completion: @escaping ((_ data: SmsAddress?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingSmsAddressesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SmsAddress>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Provision an Address for SMS
     - POST /api/v2/routing/sms/addresses
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "validated" : true,
  "city" : "city",
  "street" : "street",
  "countryCode" : "countryCode",
  "postalCode" : "postalCode",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "region" : "region"
}, statusCode=200}]
     
     - parameter body: (body) SmsAddress 

     - returns: RequestBuilder<SmsAddress> 
     */
    open class func postRoutingSmsAddressesWithRequestBuilder(body: SmsAddressProvision) -> RequestBuilder<SmsAddress> {        
        let path = "/api/v2/routing/sms/addresses"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsAddress>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Provision a phone number for SMS
     
     - parameter body: (body) SmsPhoneNumber 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingSmsPhonenumbers(body: SmsPhoneNumberProvision, completion: @escaping ((_ data: SmsPhoneNumber?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingSmsPhonenumbersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SmsPhoneNumber>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Provision a phone number for SMS
     - POST /api/v2/routing/sms/phonenumbers
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "supportsSms" : true,
  "country" : "country",
  "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
  "phoneNumberStatus" : "INVALID",
  "addressId" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "countryCode" : "countryCode",
  "provisioningStatus" : "{}",
  "phoneNumberType" : "local",
  "modifiedBy" : "{}",
  "supportsMms" : true,
  "id" : "id",
  "cancellationDate" : "2000-01-23T04:56:07.000+00:00",
  "supportsVoice" : true,
  "capabilities" : [ "sms", "sms" ],
  "shortCodeBillingType" : "Basic",
  "selfUri" : "https://openapi-generator.tech",
  "provisionedThroughPureCloud" : true,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "autoRenewable" : "Quarterly",
  "renewalDate" : "2000-01-23T04:56:07.000+00:00",
  "version" : 0,
  "phoneNumber" : "phoneNumber",
  "createdBy" : "{}",
  "compliance" : "{}",
  "name" : "name",
  "integration" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) SmsPhoneNumber 

     - returns: RequestBuilder<SmsPhoneNumber> 
     */
    open class func postRoutingSmsPhonenumbersWithRequestBuilder(body: SmsPhoneNumberProvision) -> RequestBuilder<SmsPhoneNumber> {        
        let path = "/api/v2/routing/sms/phonenumbers"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsPhoneNumber>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Imports a phone number for SMS
     
     - parameter body: (body) SmsPhoneNumber 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingSmsPhonenumbersImport(body: SmsPhoneNumberImport, completion: @escaping ((_ data: SmsPhoneNumber?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingSmsPhonenumbersImportWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SmsPhoneNumber>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Imports a phone number for SMS
     - POST /api/v2/routing/sms/phonenumbers/import
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "supportsSms" : true,
  "country" : "country",
  "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
  "phoneNumberStatus" : "INVALID",
  "addressId" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "countryCode" : "countryCode",
  "provisioningStatus" : "{}",
  "phoneNumberType" : "local",
  "modifiedBy" : "{}",
  "supportsMms" : true,
  "id" : "id",
  "cancellationDate" : "2000-01-23T04:56:07.000+00:00",
  "supportsVoice" : true,
  "capabilities" : [ "sms", "sms" ],
  "shortCodeBillingType" : "Basic",
  "selfUri" : "https://openapi-generator.tech",
  "provisionedThroughPureCloud" : true,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "autoRenewable" : "Quarterly",
  "renewalDate" : "2000-01-23T04:56:07.000+00:00",
  "version" : 0,
  "phoneNumber" : "phoneNumber",
  "createdBy" : "{}",
  "compliance" : "{}",
  "name" : "name",
  "integration" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) SmsPhoneNumber 

     - returns: RequestBuilder<SmsPhoneNumber> 
     */
    open class func postRoutingSmsPhonenumbersImportWithRequestBuilder(body: SmsPhoneNumberImport) -> RequestBuilder<SmsPhoneNumber> {        
        let path = "/api/v2/routing/sms/phonenumbers/import"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsPhoneNumber>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a wrap-up code
     
     - parameter body: (body) WrapupCode 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postRoutingWrapupcodes(body: WrapupCodeRequest, completion: @escaping ((_ data: WrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = postRoutingWrapupcodesWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a wrap-up code
     - POST /api/v2/routing/wrapupcodes
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "modifiedBy",
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) WrapupCode 

     - returns: RequestBuilder<WrapupCode> 
     */
    open class func postRoutingWrapupcodesWithRequestBuilder(body: WrapupCodeRequest) -> RequestBuilder<WrapupCode> {        
        let path = "/api/v2/routing/wrapupcodes"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Add routing language to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserRoutinglanguages(userId: String, body: UserRoutingLanguagePost, completion: @escaping ((_ data: UserRoutingLanguage?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserRoutinglanguagesWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingLanguage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add routing language to user
     - POST /api/v2/users/{userId}/routinglanguages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "state" : "active",
  "languageUri" : "https://openapi-generator.tech",
  "proficiency" : 9.301444243932576
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserRoutingLanguage> 
     */
    open class func postUserRoutinglanguagesWithRequestBuilder(userId: String, body: UserRoutingLanguagePost) -> RequestBuilder<UserRoutingLanguage> {        
        var path = "/api/v2/users/{userId}/routinglanguages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingLanguage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Add routing skill to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserRoutingskills(userId: String, body: UserRoutingSkillPost, completion: @escaping ((_ data: UserRoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserRoutingskillsWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add routing skill to user
     - POST /api/v2/users/{userId}/routingskills
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "skillUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "active",
  "proficiency" : 7.061401241503109
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserRoutingSkill> 
     */
    open class func postUserRoutingskillsWithRequestBuilder(userId: String, body: UserRoutingSkillPost) -> RequestBuilder<UserRoutingSkill> {        
        var path = "/api/v2/users/{userId}/routingskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Update a route
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter body: (body) Route 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingEmailDomainRoute(domainName: String, routeId: String, body: InboundRoute, completion: @escaping ((_ data: InboundRoute?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingEmailDomainRouteWithRequestBuilder(domainName: domainName, routeId: routeId, body: body)
        requestBuilder.execute { (response: Response<InboundRoute>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a route
     - PUT /api/v2/routing/email/domains/{domainName}/routes/{routeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "signature" : "{}",
  "replyEmailAddress" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "pattern" : "pattern",
  "language" : "{}",
  "autoBcc" : [ {
    "name" : "name",
    "email" : "email"
  }, {
    "name" : "name",
    "email" : "email"
  } ],
  "priority" : 7,
  "fromEmail" : "fromEmail",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "allowMultipleActions" : true,
  "name" : "name",
  "fromName" : "fromName",
  "id" : "id",
  "historyInclusion" : "Include",
  "queue" : "{}",
  "flow" : "{}",
  "spamFlow" : "{}"
}, statusCode=200}]
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter body: (body) Route 

     - returns: RequestBuilder<InboundRoute> 
     */
    open class func putRoutingEmailDomainRouteWithRequestBuilder(domainName: String, routeId: String, body: InboundRoute) -> RequestBuilder<InboundRoute> {        
        var path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}"
        let domainNamePreEscape = "\(domainName)"
        let domainNamePostEscape = domainNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainName}", with: domainNamePostEscape, options: .literal, range: nil)
        let routeIdPreEscape = "\(routeId)"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{routeId}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InboundRoute>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Request an activation status (cname + dkim) update of an outbound domain
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingEmailOutboundDomainActivation(domainId: String, completion: @escaping ((_ data: EmailOutboundDomainResult?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingEmailOutboundDomainActivationWithRequestBuilder(domainId: domainId)
        requestBuilder.execute { (response: Response<EmailOutboundDomainResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Request an activation status (cname + dkim) update of an outbound domain
     - PUT /api/v2/routing/email/outbound/domains/{domainId}/activation
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "senderStatus" : "RequestReceived",
  "domainName" : "domainName",
  "senderType" : "Unknown",
  "dnsTxtSendingRecord" : {
    "recordContents" : "recordContents",
    "verificationStatus" : "Pending",
    "host" : "host"
  },
  "dnsCnameBounceRecord" : {
    "recordContents" : "recordContents",
    "verificationStatus" : "Pending",
    "host" : "host"
  }
}, statusCode=200}]
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<EmailOutboundDomainResult> 
     */
    open class func putRoutingEmailOutboundDomainActivationWithRequestBuilder(domainId: String) -> RequestBuilder<EmailOutboundDomainResult> {        
        var path = "/api/v2/routing/email/outbound/domains/{domainId}/activation"
        let domainIdPreEscape = "\(domainId)"
        let domainIdPostEscape = domainIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{domainId}", with: domainIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EmailOutboundDomainResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a recipient
     
     - parameter recipientId: (path) Recipient ID 
     - parameter body: (body) Recipient 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingMessageRecipient(recipientId: String, body: RecipientRequest, completion: @escaping ((_ data: Recipient?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingMessageRecipientWithRequestBuilder(recipientId: recipientId, body: body)
        requestBuilder.execute { (response: Response<Recipient>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a recipient
     - PUT /api/v2/routing/message/recipients/{recipientId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "messengerType" : "sms",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "flow" : "{}"
}, statusCode=200}]
     
     - parameter recipientId: (path) Recipient ID 
     - parameter body: (body) Recipient 

     - returns: RequestBuilder<Recipient> 
     */
    open class func putRoutingMessageRecipientWithRequestBuilder(recipientId: String, body: RecipientRequest) -> RequestBuilder<Recipient> {        
        var path = "/api/v2/routing/message/recipients/{recipientId}"
        let recipientIdPreEscape = "\(recipientId)"
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Recipient>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingQueue(queueId: String, body: QueueRequest, completion: @escaping ((_ data: Queue?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingQueueWithRequestBuilder(queueId: queueId, body: body)
        requestBuilder.execute { (response: Response<Queue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a queue
     - PUT /api/v2/routing/queues/{queueId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "peerId" : "peerId",
  "conditionalGroupRouting" : "{}",
  "enableAudioMonitoring" : true,
  "mediaSettings" : "{}",
  "enableManualAssignment" : true,
  "description" : "description",
  "onHoldPrompt" : "{}",
  "emailInQueueFlow" : "{}",
  "autoAnswerOnly" : true,
  "routingRules" : [ {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  }, {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  } ],
  "skillEvaluationMethod" : "NONE",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+00:00",
      "division" : "{}",
      "features" : "{}",
      "versionId" : "versionId",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "pages" : [ {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      }, {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "startPageName",
      "name" : "name",
      "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "startPageId" : "startPageId",
      "id" : "id",
      "publishedDate" : "2000-01-23T04:56:07.000+00:00"
    }
  },
  "division" : "{}",
  "suppressInQueueCallRecording" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "queueFlow" : "{}",
  "callingPartyNumber" : "callingPartyNumber",
  "userMemberCount" : 6,
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "memberGroups" : [ {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  }, {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  } ],
  "scoringMethod" : "TimestampAndPriority",
  "joinedMemberCount" : 1,
  "messageInQueueFlow" : "{}",
  "callingPartyName" : "callingPartyName",
  "acwSettings" : "{}",
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "whisperPrompt" : "{}",
  "enableTranscription" : true,
  "outboundEmailAddress" : {
    "route" : {
      "signature" : "{}",
      "replyEmailAddress" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "pattern" : "pattern",
      "language" : "{}",
      "autoBcc" : [ {
        "name" : "name",
        "email" : "email"
      }, {
        "name" : "name",
        "email" : "email"
      } ],
      "priority" : 7,
      "fromEmail" : "fromEmail",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "allowMultipleActions" : true,
      "name" : "name",
      "fromName" : "fromName",
      "id" : "id",
      "historyInclusion" : "Include",
      "queue" : "{}",
      "flow" : "{}",
      "spamFlow" : "{}"
    },
    "domain" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }
  },
  "bullseye" : "{}",
  "outboundMessagingAddresses" : "{}",
  "createdBy" : "createdBy",
  "directRouting" : "{}",
  "name" : "name",
  "agentOwnedRouting" : "{}"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue 

     - returns: RequestBuilder<Queue> 
     */
    open class func putRoutingQueueWithRequestBuilder(queueId: String, body: QueueRequest) -> RequestBuilder<Queue> {        
        var path = "/api/v2/routing/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Queue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update an organization's routing settings
     
     - parameter body: (body) Organization Settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingSettings(body: RoutingSettings, completion: @escaping ((_ data: RoutingSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<RoutingSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an organization's routing settings
     - PUT /api/v2/routing/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "resetAgentScoreOnPresenceChange" : true
}, statusCode=200}]
     
     - parameter body: (body) Organization Settings 

     - returns: RequestBuilder<RoutingSettings> 
     */
    open class func putRoutingSettingsWithRequestBuilder(body: RoutingSettings) -> RequestBuilder<RoutingSettings> {        
        let path = "/api/v2/routing/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update Transcription Settings
     
     - parameter body: (body) Organization Settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingSettingsTranscription(body: TranscriptionSettings, completion: @escaping ((_ data: TranscriptionSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingSettingsTranscriptionWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TranscriptionSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update Transcription Settings
     - PUT /api/v2/routing/settings/transcription
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "transcription" : "Disabled",
  "pciDssRedactionEnabled" : true,
  "contentSearchEnabled" : true,
  "transcriptionConfidenceThreshold" : 0,
  "lowLatencyTranscriptionEnabled" : true,
  "piiRedactionEnabled" : true
}, statusCode=200}]
     
     - parameter body: (body) Organization Settings 

     - returns: RequestBuilder<TranscriptionSettings> 
     */
    open class func putRoutingSettingsTranscriptionWithRequestBuilder(body: TranscriptionSettings) -> RequestBuilder<TranscriptionSettings> {        
        let path = "/api/v2/routing/settings/transcription"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptionSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a phone number provisioned for SMS.
     
     - parameter addressId: (path) Address ID 
     - parameter body: (body) SmsPhoneNumber 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingSmsPhonenumber(addressId: String, body: SmsPhoneNumber, completion: @escaping ((_ data: SmsPhoneNumber?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingSmsPhonenumberWithRequestBuilder(addressId: addressId, body: body)
        requestBuilder.execute { (response: Response<SmsPhoneNumber>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a phone number provisioned for SMS.
     - PUT /api/v2/routing/sms/phonenumbers/{addressId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "supportsSms" : true,
  "country" : "country",
  "purchaseDate" : "2000-01-23T04:56:07.000+00:00",
  "phoneNumberStatus" : "INVALID",
  "addressId" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "countryCode" : "countryCode",
  "provisioningStatus" : "{}",
  "phoneNumberType" : "local",
  "modifiedBy" : "{}",
  "supportsMms" : true,
  "id" : "id",
  "cancellationDate" : "2000-01-23T04:56:07.000+00:00",
  "supportsVoice" : true,
  "capabilities" : [ "sms", "sms" ],
  "shortCodeBillingType" : "Basic",
  "selfUri" : "https://openapi-generator.tech",
  "provisionedThroughPureCloud" : true,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "autoRenewable" : "Quarterly",
  "renewalDate" : "2000-01-23T04:56:07.000+00:00",
  "version" : 0,
  "phoneNumber" : "phoneNumber",
  "createdBy" : "{}",
  "compliance" : "{}",
  "name" : "name",
  "integration" : "{}"
}, statusCode=200}]
     
     - parameter addressId: (path) Address ID 
     - parameter body: (body) SmsPhoneNumber 

     - returns: RequestBuilder<SmsPhoneNumber> 
     */
    open class func putRoutingSmsPhonenumberWithRequestBuilder(addressId: String, body: SmsPhoneNumber) -> RequestBuilder<SmsPhoneNumber> {        
        var path = "/api/v2/routing/sms/phonenumbers/{addressId}"
        let addressIdPreEscape = "\(addressId)"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{addressId}", with: addressIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SmsPhoneNumber>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update the user's max utilization settings.  Include only those media types requiring custom configuration.
     
     - parameter userId: (path) User ID 
     - parameter body: (body) utilization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingUserUtilization(userId: String, body: UtilizationRequest, completion: @escaping ((_ data: AgentMaxUtilizationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingUserUtilizationWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<AgentMaxUtilizationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the user's max utilization settings.  Include only those media types requiring custom configuration.
     - PUT /api/v2/routing/users/{userId}/utilization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "level" : "Agent",
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "interruptableMediaTypes", "interruptableMediaTypes" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 0
    }
  }
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) utilization 

     - returns: RequestBuilder<AgentMaxUtilizationResponse> 
     */
    open class func putRoutingUserUtilizationWithRequestBuilder(userId: String, body: UtilizationRequest) -> RequestBuilder<AgentMaxUtilizationResponse> {        
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AgentMaxUtilizationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update the organization-wide max utilization settings.  Include only those media types requiring custom configuration.
     
     - parameter body: (body) utilization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingUtilization(body: UtilizationRequest, completion: @escaping ((_ data: UtilizationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingUtilizationWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UtilizationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the organization-wide max utilization settings.  Include only those media types requiring custom configuration.
     - PUT /api/v2/routing/utilization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "interruptableMediaTypes", "interruptableMediaTypes" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 0
    }
  }
}, statusCode=200}]
     
     - parameter body: (body) utilization 

     - returns: RequestBuilder<UtilizationResponse> 
     */
    open class func putRoutingUtilizationWithRequestBuilder(body: UtilizationRequest) -> RequestBuilder<UtilizationResponse> {        
        let path = "/api/v2/routing/utilization"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UtilizationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update wrap-up code
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter body: (body) WrapupCode 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingWrapupcode(codeId: String, body: WrapupCodeRequest, completion: @escaping ((_ data: WrapupCode?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingWrapupcodeWithRequestBuilder(codeId: codeId, body: body)
        requestBuilder.execute { (response: Response<WrapupCode>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update wrap-up code
     - PUT /api/v2/routing/wrapupcodes/{codeId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "createdBy",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "modifiedBy",
  "id" : "id"
}, statusCode=200}]
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter body: (body) WrapupCode 

     - returns: RequestBuilder<WrapupCode> 
     */
    open class func putRoutingWrapupcodeWithRequestBuilder(codeId: String, body: WrapupCodeRequest) -> RequestBuilder<WrapupCode> {        
        var path = "/api/v2/routing/wrapupcodes/{codeId}"
        let codeIdPreEscape = "\(codeId)"
        let codeIdPostEscape = codeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{codeId}", with: codeIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WrapupCode>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     Update routing skill proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingskill(userId: String, skillId: String, body: UserRoutingSkill, completion: @escaping ((_ data: UserRoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingskillWithRequestBuilder(userId: userId, skillId: skillId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update routing skill proficiency or state.
     - PUT /api/v2/users/{userId}/routingskills/{skillId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "skillUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "active",
  "proficiency" : 7.061401241503109
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserRoutingSkill> 
     */
    open class func putUserRoutingskillWithRequestBuilder(userId: String, skillId: String, body: UserRoutingSkill) -> RequestBuilder<UserRoutingSkill> {        
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Replace all routing skills assigned to a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingskillsBulk(userId: String, body: [UserRoutingSkillPost], completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingskillsBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Replace all routing skills assigned to a user
     - PUT /api/v2/users/{userId}/routingskills/bulk
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func putUserRoutingskillsBulkWithRequestBuilder(userId: String, body: [UserRoutingSkillPost]) -> RequestBuilder<UserSkillEntityListing> {        
        var path = "/api/v2/users/{userId}/routingskills/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
