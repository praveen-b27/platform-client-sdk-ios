//
// SearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SearchAPI {
    
    /**
     Search gkn documentation using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDocumentationGknSearch(q64: String, completion: @escaping ((_ data: GKNDocumentationSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getDocumentationGknSearchWithRequestBuilder(q64: q64)
        requestBuilder.execute { (response: Response<GKNDocumentationSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search gkn documentation using the q64 value returned from a previous search
     - GET /api/v2/documentation/gkn/search
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "link" : "link",
    "_type" : "_type",
    "title" : "title",
    "content" : "content"
  }, {
    "link" : "link",
    "_type" : "_type",
    "title" : "title",
    "content" : "content"
  } ]
}, statusCode=200}]
     
     - parameter q64: (query) q64 

     - returns: RequestBuilder<GKNDocumentationSearchResponse> 
     */
    open class func getDocumentationGknSearchWithRequestBuilder(q64: String) -> RequestBuilder<GKNDocumentationSearchResponse> {        
        let path = "/api/v2/documentation/gkn/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64
        ])

        let requestBuilder: RequestBuilder<GKNDocumentationSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Search documentation using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDocumentationSearch(q64: String, completion: @escaping ((_ data: DocumentationSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getDocumentationSearchWithRequestBuilder(q64: q64)
        requestBuilder.execute { (response: Response<DocumentationSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search documentation using the q64 value returned from a previous search
     - GET /api/v2/documentation/search
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "releasenote_category" : [ 7, 7 ],
    "facet_role" : [ 3, 3 ],
    "link" : "link",
    "service-area" : [ 1, 1 ],
    "description" : "description",
    "facet_service" : [ 2, 2 ],
    "title" : "title",
    "facet_feature" : [ 9, 9 ],
    "content" : "content",
    "releasenote_tag" : [ 1, 1 ],
    "get_type" : "get_type",
    "service" : [ 7, 7 ],
    "faq_categories" : [ 4, 4 ],
    "name" : "name",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "categories" : [ 2, 2 ],
    "video_categories" : [ 1, 1 ],
    "excerpt" : "excerpt",
    "slug" : "slug"
  }, {
    "releasenote_category" : [ 7, 7 ],
    "facet_role" : [ 3, 3 ],
    "link" : "link",
    "service-area" : [ 1, 1 ],
    "description" : "description",
    "facet_service" : [ 2, 2 ],
    "title" : "title",
    "facet_feature" : [ 9, 9 ],
    "content" : "content",
    "releasenote_tag" : [ 1, 1 ],
    "get_type" : "get_type",
    "service" : [ 7, 7 ],
    "faq_categories" : [ 4, 4 ],
    "name" : "name",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "categories" : [ 2, 2 ],
    "video_categories" : [ 1, 1 ],
    "excerpt" : "excerpt",
    "slug" : "slug"
  } ]
}, statusCode=200}]
     
     - parameter q64: (query) q64 

     - returns: RequestBuilder<DocumentationSearchResponse> 
     */
    open class func getDocumentationSearchWithRequestBuilder(q64: String) -> RequestBuilder<DocumentationSearchResponse> {        
        let path = "/api/v2/documentation/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64
        ])

        let requestBuilder: RequestBuilder<DocumentationSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Search groups using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupsSearch(q64: String, expand: [String]? = nil, completion: @escaping ((_ data: GroupsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getGroupsSearchWithRequestBuilder(q64: q64, expand: expand)
        requestBuilder.execute { (response: Response<GroupsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search groups using the q64 value returned from a previous search
     - GET /api/v2/groups/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ]
}, statusCode=200}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)

     - returns: RequestBuilder<GroupsSearchResponse> 
     */
    open class func getGroupsSearchWithRequestBuilder(q64: String, expand: [String]? = nil) -> RequestBuilder<GroupsSearchResponse> {        
        let path = "/api/v2/groups/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<GroupsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Search locations using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Provides more details about a specified resource (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLocationsSearch(q64: String, expand: [String]? = nil, completion: @escaping ((_ data: LocationsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getLocationsSearchWithRequestBuilder(q64: q64, expand: expand)
        requestBuilder.execute { (response: Response<LocationsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search locations using the q64 value returned from a previous search
     - GET /api/v2/locations/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  }, {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  } ]
}, statusCode=200}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Provides more details about a specified resource (optional)

     - returns: RequestBuilder<LocationsSearchResponse> 
     */
    open class func getLocationsSearchWithRequestBuilder(q64: String, expand: [String]? = nil) -> RequestBuilder<LocationsSearchResponse> {        
        let path = "/api/v2/locations/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<LocationsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Search using the q64 value returned from a previous search.
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter profile: (query) profile (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSearch(q64: String, expand: [String]? = nil, profile: Bool? = nil, completion: @escaping ((_ data: JsonNodeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSearchWithRequestBuilder(q64: q64, expand: expand, profile: profile)
        requestBuilder.execute { (response: Response<JsonNodeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search using the q64 value returned from a previous search.
     - GET /api/v2/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : "{}",
  "aggregations" : "{}"
}, statusCode=200}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter profile: (query) profile (optional)

     - returns: RequestBuilder<JsonNodeSearchResponse> 
     */
    open class func getSearchWithRequestBuilder(q64: String, expand: [String]? = nil, profile: Bool? = nil) -> RequestBuilder<JsonNodeSearchResponse> {        
        let path = "/api/v2/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64, 
            "expand": expand, 
            "profile": profile
        ])

        let requestBuilder: RequestBuilder<JsonNodeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Suggest resources using the q64 value returned from a previous suggest query.
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter profile: (query) profile (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSearchSuggest(q64: String, expand: [String]? = nil, profile: Bool? = nil, completion: @escaping ((_ data: JsonNodeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSearchSuggestWithRequestBuilder(q64: q64, expand: expand, profile: profile)
        requestBuilder.execute { (response: Response<JsonNodeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Suggest resources using the q64 value returned from a previous suggest query.
     - GET /api/v2/search/suggest
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : "{}",
  "aggregations" : "{}"
}, statusCode=200}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter profile: (query) profile (optional)

     - returns: RequestBuilder<JsonNodeSearchResponse> 
     */
    open class func getSearchSuggestWithRequestBuilder(q64: String, expand: [String]? = nil, profile: Bool? = nil) -> RequestBuilder<JsonNodeSearchResponse> {        
        let path = "/api/v2/search/suggest"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64, 
            "expand": expand, 
            "profile": profile
        ])

        let requestBuilder: RequestBuilder<JsonNodeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum IntegrationPresenceSource_getUsersSearch: String { 
        case microsoftTeams = "MicrosoftTeams"
        case zoomPhone = "ZoomPhone"
        case eightByEight = "EightByEight"
    }

    
    /**
     Search users using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter integrationPresenceSource: (query) integrationPresenceSource (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersSearch(q64: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsersSearch? = nil, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersSearchWithRequestBuilder(q64: q64, expand: expand, integrationPresenceSource: integrationPresenceSource)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search users using the q64 value returned from a previous search
     - GET /api/v2/users/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter integrationPresenceSource: (query) integrationPresenceSource (optional)

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func getUsersSearchWithRequestBuilder(q64: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsersSearch? = nil) -> RequestBuilder<UsersSearchResponse> {        
        let path = "/api/v2/users/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64, 
            "expand": expand, 
            "integrationPresenceSource": integrationPresenceSource?.rawValue
        ])

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Search voicemails using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVoicemailSearch(q64: String, expand: [String]? = nil, completion: @escaping ((_ data: VoicemailsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getVoicemailSearchWithRequestBuilder(q64: q64, expand: expand)
        requestBuilder.execute { (response: Response<VoicemailsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search voicemails using the q64 value returned from a previous search
     - GET /api/v2/voicemail/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "callerAddress" : "callerAddress",
    "note" : "note",
    "audioRecordingSizeBytes" : 6,
    "copiedTo" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "user" : "{}",
      "group" : "{}"
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "user" : "{}",
      "group" : "{}"
    } ],
    "read" : true,
    "selfUri" : "https://openapi-generator.tech",
    "callerUser" : "{}",
    "deleteRetentionPolicy" : "{}",
    "callerName" : "callerName",
    "copiedFrom" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "deleted" : true,
    "deletedDate" : "2000-01-23T04:56:07.000+00:00",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "audioRecordingDurationSeconds" : 0,
    "user" : "{}",
    "conversation" : "{}",
    "queue" : "{}",
    "group" : "{}"
  }, {
    "callerAddress" : "callerAddress",
    "note" : "note",
    "audioRecordingSizeBytes" : 6,
    "copiedTo" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "user" : "{}",
      "group" : "{}"
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "user" : "{}",
      "group" : "{}"
    } ],
    "read" : true,
    "selfUri" : "https://openapi-generator.tech",
    "callerUser" : "{}",
    "deleteRetentionPolicy" : "{}",
    "callerName" : "callerName",
    "copiedFrom" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "deleted" : true,
    "deletedDate" : "2000-01-23T04:56:07.000+00:00",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "audioRecordingDurationSeconds" : 0,
    "user" : "{}",
    "conversation" : "{}",
    "queue" : "{}",
    "group" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)

     - returns: RequestBuilder<VoicemailsSearchResponse> 
     */
    open class func getVoicemailSearchWithRequestBuilder(q64: String, expand: [String]? = nil) -> RequestBuilder<VoicemailsSearchResponse> {        
        let path = "/api/v2/voicemail/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<VoicemailsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsConversationsTranscriptsQuery(body: TranscriptConversationDetailSearchRequest, completion: @escaping ((_ data: AnalyticsConversationWithoutAttributesMultiGetResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsConversationWithoutAttributesMultiGetResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search resources.
     - POST /api/v2/analytics/conversations/transcripts/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  }, {
    "conversationStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationMos" : 0.8008281904610115,
    "evaluations" : [ {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    }, {
      "formId" : "formId",
      "queueId" : "queueId",
      "oTotalScore" : 5,
      "oTotalCriticalScore" : 1,
      "contextId" : "contextId",
      "assigneeId" : "assigneeId",
      "userId" : "userId",
      "evaluationId" : "evaluationId",
      "assigneeApplicable" : true,
      "deleted" : true,
      "formName" : "formName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "rescored" : true,
      "calibrationId" : "calibrationId",
      "evaluationStatus" : "Finished",
      "evaluatorId" : "evaluatorId",
      "released" : true
    } ],
    "conversationInitiator" : "acd",
    "conversationId" : "conversationId",
    "surveys" : [ {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "surveyStatus" : "surveyStatus",
      "oSurveyTotalScore" : 2,
      "surveyId" : "surveyId",
      "surveyFormName" : "surveyFormName",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "surveyFormId" : "surveyFormId",
      "surveyFormContextId" : "surveyFormContextId",
      "surveyCompletedDate" : "2000-01-23T04:56:07.000+00:00",
      "surveyPromoterScore" : 5,
      "userId" : "userId"
    } ],
    "externalTag" : "externalTag",
    "resolutions" : [ {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    }, {
      "queueId" : "queueId",
      "eventTime" : "2000-01-23T04:56:07.000+00:00",
      "nNextContactAvoided" : 7,
      "userId" : "userId"
    } ],
    "originatingDirection" : "inbound",
    "divisionIds" : [ "divisionIds", "divisionIds" ],
    "conferenceStart" : "2000-01-23T04:56:07.000+00:00",
    "mediaStatsMinConversationRFactor" : 6.027456183070403,
    "conversationEnd" : "2000-01-23T04:56:07.000+00:00",
    "customerParticipation" : true,
    "knowledgeBaseIds" : [ "knowledgeBaseIds", "knowledgeBaseIds" ],
    "selfServed" : true,
    "participants" : [ {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    }, {
      "participantId" : "participantId",
      "sessions" : [ {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      }, {
        "authenticated" : true,
        "usedRouting" : "Bullseye",
        "cobrowseRole" : "cobrowseRole",
        "monitoredParticipantId" : "monitoredParticipantId",
        "videoAddressSelf" : "videoAddressSelf",
        "agentOwned" : true,
        "waitingInteractionCounts" : [ 1, 1 ],
        "proposedAgents" : [ {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        }, {
          "proposedAgentId" : "proposedAgentId",
          "agentRank" : 6
        } ],
        "addressSelf" : "addressSelf",
        "skipEnabled" : true,
        "journeyActionMapId" : "journeyActionMapId",
        "remote" : "remote",
        "deliveryStatusChangeDate" : "2000-01-23T04:56:07.000+00:00",
        "roomId" : "roomId",
        "messageType" : "messageType",
        "removedSkillIds" : [ "removedSkillIds", "removedSkillIds" ],
        "routingRule" : "routingRule",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "mediaCount" : 4,
        "dnis" : "dnis",
        "videoRoomId" : "videoRoomId",
        "flow" : "{}",
        "dispositionAnalyzer" : "dispositionAnalyzer",
        "addressOther" : "addressOther",
        "cobrowseRoomId" : "cobrowseRoomId",
        "activeSkillIds" : [ "activeSkillIds", "activeSkillIds" ],
        "protocolCallId" : "protocolCallId",
        "destinationAddresses" : [ "destinationAddresses", "destinationAddresses" ],
        "flowOutType" : "flowOutType",
        "mediaType" : "callback",
        "outboundCampaignId" : "outboundCampaignId",
        "addressTo" : "addressTo",
        "edgeId" : "edgeId",
        "timeoutSeconds" : 1,
        "metrics" : [ {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        }, {
          "name" : "name",
          "emitDate" : "2000-01-23T04:56:07.000+00:00",
          "value" : 6
        } ],
        "bargedParticipantId" : "bargedParticipantId",
        "cleared" : true,
        "journeyActionMapVersion" : 2,
        "mediaBridgeId" : "mediaBridgeId",
        "routingRuleType" : "Bullseye",
        "agentAssistantId" : "agentAssistantId",
        "deliveryStatus" : "DeliveryFailed",
        "screenShareRoomId" : "screenShareRoomId",
        "assignerId" : "assignerId",
        "outboundContactId" : "outboundContactId",
        "peerId" : "peerId",
        "remoteNameDisplayable" : "remoteNameDisplayable",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+00:00",
        "bcc" : [ "bcc", "bcc" ],
        "agentBullseyeRing" : 9,
        "callbackNumbers" : [ "callbackNumbers", "callbackNumbers" ],
        "recording" : true,
        "screenShareAddressSelf" : "screenShareAddressSelf",
        "sharingScreen" : true,
        "sessionDnis" : "sessionDnis",
        "segments" : [ {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        }, {
          "queueId" : "queueId",
          "conference" : true,
          "subject" : "subject",
          "groupId" : "groupId",
          "sourceConversationId" : "sourceConversationId",
          "errorCode" : "errorCode",
          "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
          "segmentEnd" : "2000-01-23T04:56:07.000+00:00",
          "wrapUpNote" : "wrapUpNote",
          "destinationSessionId" : "destinationSessionId",
          "disconnectType" : "client",
          "requestedRoutingUserIds" : [ "requestedRoutingUserIds", "requestedRoutingUserIds" ],
          "segmentStart" : "2000-01-23T04:56:07.000+00:00",
          "scoredAgents" : [ {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          }, {
            "scoredAgentId" : "scoredAgentId",
            "agentScore" : 1
          } ],
          "videoMuted" : true,
          "audioMuted" : true,
          "q850ResponseCodes" : [ 3, 3 ],
          "wrapUpCode" : "wrapUpCode",
          "destinationConversationId" : "destinationConversationId",
          "wrapUpTags" : [ "wrapUpTags", "wrapUpTags" ],
          "sourceSessionId" : "sourceSessionId",
          "sipResponseCodes" : [ 6, 6 ],
          "requestedLanguageId" : "requestedLanguageId",
          "segmentType" : "alert",
          "properties" : [ {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          }, {
            "propertyType" : "bool",
            "property" : "property",
            "value" : "value"
          } ]
        } ],
        "journeyCustomerSessionIdType" : "journeyCustomerSessionIdType",
        "extendedDeliveryStatus" : "extendedDeliveryStatus",
        "agentGroups" : [ {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        }, {
          "agentGroupType" : "Group",
          "agentGroupId" : "agentGroupId"
        } ],
        "provider" : "provider",
        "journeyCustomerIdType" : "journeyCustomerIdType",
        "journeyCustomerId" : "journeyCustomerId",
        "callbackUserName" : "callbackUserName",
        "addressFrom" : "addressFrom",
        "flowInType" : "flowInType",
        "ani" : "ani",
        "direction" : "inbound",
        "cc" : [ "cc", "cc" ],
        "routingRing" : 7,
        "journeyCustomerSessionId" : "journeyCustomerSessionId",
        "sessionId" : "sessionId",
        "journeyActionId" : "journeyActionId",
        "eligibleAgentCounts" : [ 3, 3 ],
        "dispositionName" : "dispositionName",
        "scriptId" : "scriptId",
        "selectedAgentId" : "selectedAgentId",
        "coachedParticipantId" : "coachedParticipantId",
        "acwSkipped" : true,
        "mediaEndpointStats" : [ {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        }, {
          "minRFactor" : 9.369310271410669,
          "underrunPackets" : 9,
          "overrunPackets" : 6,
          "maxLatencyMs" : 5,
          "minMos" : 9.965781217890562,
          "codecs" : [ "codecs", "codecs" ],
          "eventTime" : "2000-01-23T04:56:07.000+00:00",
          "receivedPackets" : 8,
          "duplicatePackets" : 1,
          "invalidPackets" : 4,
          "discardedPackets" : 7
        } ],
        "selectedAgentRank" : 1,
        "outboundContactListId" : "outboundContactListId"
      } ],
      "externalContactId" : "externalContactId",
      "purpose" : "acd",
      "teamId" : "teamId",
      "externalOrganizationId" : "externalOrganizationId",
      "participantName" : "participantName",
      "flaggedReason" : "general",
      "userId" : "userId"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> 
     */
    open class func postAnalyticsConversationsTranscriptsQueryWithRequestBuilder(body: TranscriptConversationDetailSearchRequest) -> RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse> {        
        let path = "/api/v2/analytics/conversations/transcripts/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsConversationWithoutAttributesMultiGetResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search conversations
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postConversationsParticipantsAttributesSearch(body: ConversationParticipantSearchRequest, completion: @escaping ((_ data: JsonCursorSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postConversationsParticipantsAttributesSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<JsonCursorSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search conversations
     - POST /api/v2/conversations/participants/attributes/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "cursor",
  "types" : [ "types", "types" ],
  "results" : "{}",
  "aggregations" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<JsonCursorSearchResponse> 
     */
    open class func postConversationsParticipantsAttributesSearchWithRequestBuilder(body: ConversationParticipantSearchRequest) -> RequestBuilder<JsonCursorSearchResponse> {        
        let path = "/api/v2/conversations/participants/attributes/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonCursorSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search gkn documentation
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDocumentationGknSearch(body: GKNDocumentationSearchRequest, completion: @escaping ((_ data: GKNDocumentationSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postDocumentationGknSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<GKNDocumentationSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search gkn documentation
     - POST /api/v2/documentation/gkn/search
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "link" : "link",
    "_type" : "_type",
    "title" : "title",
    "content" : "content"
  }, {
    "link" : "link",
    "_type" : "_type",
    "title" : "title",
    "content" : "content"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<GKNDocumentationSearchResponse> 
     */
    open class func postDocumentationGknSearchWithRequestBuilder(body: GKNDocumentationSearchRequest) -> RequestBuilder<GKNDocumentationSearchResponse> {        
        let path = "/api/v2/documentation/gkn/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GKNDocumentationSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search documentation
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDocumentationSearch(body: DocumentationSearchRequest, completion: @escaping ((_ data: DocumentationSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postDocumentationSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DocumentationSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search documentation
     - POST /api/v2/documentation/search
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "releasenote_category" : [ 7, 7 ],
    "facet_role" : [ 3, 3 ],
    "link" : "link",
    "service-area" : [ 1, 1 ],
    "description" : "description",
    "facet_service" : [ 2, 2 ],
    "title" : "title",
    "facet_feature" : [ 9, 9 ],
    "content" : "content",
    "releasenote_tag" : [ 1, 1 ],
    "get_type" : "get_type",
    "service" : [ 7, 7 ],
    "faq_categories" : [ 4, 4 ],
    "name" : "name",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "categories" : [ 2, 2 ],
    "video_categories" : [ 1, 1 ],
    "excerpt" : "excerpt",
    "slug" : "slug"
  }, {
    "releasenote_category" : [ 7, 7 ],
    "facet_role" : [ 3, 3 ],
    "link" : "link",
    "service-area" : [ 1, 1 ],
    "description" : "description",
    "facet_service" : [ 2, 2 ],
    "title" : "title",
    "facet_feature" : [ 9, 9 ],
    "content" : "content",
    "releasenote_tag" : [ 1, 1 ],
    "get_type" : "get_type",
    "service" : [ 7, 7 ],
    "faq_categories" : [ 4, 4 ],
    "name" : "name",
    "modified" : "2000-01-23T04:56:07.000+00:00",
    "id" : 5,
    "categories" : [ 2, 2 ],
    "video_categories" : [ 1, 1 ],
    "excerpt" : "excerpt",
    "slug" : "slug"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<DocumentationSearchResponse> 
     */
    open class func postDocumentationSearchWithRequestBuilder(body: DocumentationSearchRequest) -> RequestBuilder<DocumentationSearchResponse> {        
        let path = "/api/v2/documentation/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DocumentationSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search groups
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGroupsSearch(body: GroupSearchRequest, completion: @escaping ((_ data: GroupsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postGroupsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<GroupsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search groups
     - POST /api/v2/groups/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<GroupsSearchResponse> 
     */
    open class func postGroupsSearchWithRequestBuilder(body: GroupSearchRequest) -> RequestBuilder<GroupsSearchResponse> {        
        let path = "/api/v2/groups/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GroupsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Search Documents
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKnowledgeKnowledgebaseSearch(knowledgeBaseId: String, body: KnowledgeSearchRequest? = nil, completion: @escaping ((_ data: KnowledgeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postKnowledgeKnowledgebaseSearchWithRequestBuilder(knowledgeBaseId: knowledgeBaseId, body: body)
        requestBuilder.execute { (response: Response<KnowledgeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search Documents
     - POST /api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "pageNumber" : 5,
  "searchId" : "searchId",
  "pageSize" : 1,
  "results" : [ {
    "externalUrl" : "externalUrl",
    "confidence" : 5.637376656633329,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "languageCode" : "en-US",
    "type" : "Faq",
    "article" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "knowledgeBase" : "{}",
    "faq" : "{}",
    "name" : "name",
    "id" : "id",
    "categories" : [ {
      "knowledgeBase" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "languageCode" : "en-US"
    }, {
      "knowledgeBase" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "languageCode" : "en-US"
    } ]
  }, {
    "externalUrl" : "externalUrl",
    "confidence" : 5.637376656633329,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "languageCode" : "en-US",
    "type" : "Faq",
    "article" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "knowledgeBase" : "{}",
    "faq" : "{}",
    "name" : "name",
    "id" : "id",
    "categories" : [ {
      "knowledgeBase" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "languageCode" : "en-US"
    }, {
      "knowledgeBase" : "{}",
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "languageCode" : "en-US"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter knowledgeBaseId: (path) Knowledge base ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<KnowledgeSearchResponse> 
     */
    open class func postKnowledgeKnowledgebaseSearchWithRequestBuilder(knowledgeBaseId: String, body: KnowledgeSearchRequest? = nil) -> RequestBuilder<KnowledgeSearchResponse> {        
        var path = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search"
        let knowledgeBaseIdPreEscape = "\(knowledgeBaseId)"
        let knowledgeBaseIdPostEscape = knowledgeBaseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{knowledgeBaseId}", with: knowledgeBaseIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KnowledgeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search locations
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLocationsSearch(body: LocationSearchRequest, completion: @escaping ((_ data: LocationsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postLocationsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<LocationsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search locations
     - POST /api/v2/locations/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  }, {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<LocationsSearchResponse> 
     */
    open class func postLocationsSearchWithRequestBuilder(body: LocationSearchRequest) -> RequestBuilder<LocationsSearchResponse> {        
        let path = "/api/v2/locations/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LocationsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter profile: (query) profile (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSearch(body: SearchRequest, profile: Bool? = nil, completion: @escaping ((_ data: JsonNodeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSearchWithRequestBuilder(body: body, profile: profile)
        requestBuilder.execute { (response: Response<JsonNodeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search resources.
     - POST /api/v2/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : "{}",
  "aggregations" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Search request options 
     - parameter profile: (query) profile (optional)

     - returns: RequestBuilder<JsonNodeSearchResponse> 
     */
    open class func postSearchWithRequestBuilder(body: SearchRequest, profile: Bool? = nil) -> RequestBuilder<JsonNodeSearchResponse> {        
        let path = "/api/v2/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "profile": profile
        ])

        let requestBuilder: RequestBuilder<JsonNodeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Suggest resources.
     
     - parameter body: (body) Search request options 
     - parameter profile: (query) profile (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSearchSuggest(body: SuggestSearchRequest, profile: Bool? = nil, completion: @escaping ((_ data: JsonNodeSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSearchSuggestWithRequestBuilder(body: body, profile: profile)
        requestBuilder.execute { (response: Response<JsonNodeSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Suggest resources.
     - POST /api/v2/search/suggest
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : "{}",
  "aggregations" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Search request options 
     - parameter profile: (query) profile (optional)

     - returns: RequestBuilder<JsonNodeSearchResponse> 
     */
    open class func postSearchSuggestWithRequestBuilder(body: SuggestSearchRequest, profile: Bool? = nil) -> RequestBuilder<JsonNodeSearchResponse> {        
        let path = "/api/v2/search/suggest"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "profile": profile
        ])

        let requestBuilder: RequestBuilder<JsonNodeSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsTranscriptsSearch(body: TranscriptSearchRequest, completion: @escaping ((_ data: JsonSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsTranscriptsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<JsonSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search resources.
     - POST /api/v2/speechandtextanalytics/transcripts/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "pageSize" : 1,
  "results" : "{}",
  "aggregations" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<JsonSearchResponse> 
     */
    open class func postSpeechandtextanalyticsTranscriptsSearchWithRequestBuilder(body: TranscriptSearchRequest) -> RequestBuilder<JsonSearchResponse> {        
        let path = "/api/v2/speechandtextanalytics/transcripts/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTeamsSearch(body: TeamSearchRequest, completion: @escaping ((_ data: TeamsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postTeamsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TeamsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search resources.
     - POST /api/v2/teams/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<TeamsSearchResponse> 
     */
    open class func postTeamsSearchWithRequestBuilder(body: TeamSearchRequest) -> RequestBuilder<TeamsSearchResponse> {        
        let path = "/api/v2/teams/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search users
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersSearch(body: UserSearchRequest, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search users
     - POST /api/v2/users/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func postUsersSearchWithRequestBuilder(body: UserSearchRequest) -> RequestBuilder<UsersSearchResponse> {        
        let path = "/api/v2/users/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search users assigned to teams
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersSearchTeamsAssign(body: UserSearchRequest, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersSearchTeamsAssignWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search users assigned to teams
     - POST /api/v2/users/search/teams/assign
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func postUsersSearchTeamsAssignWithRequestBuilder(body: UserSearchRequest) -> RequestBuilder<UsersSearchResponse> {        
        let path = "/api/v2/users/search/teams/assign"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search voicemails
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postVoicemailSearch(body: VoicemailSearchRequest, completion: @escaping ((_ data: VoicemailsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postVoicemailSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<VoicemailsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search voicemails
     - POST /api/v2/voicemail/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "callerAddress" : "callerAddress",
    "note" : "note",
    "audioRecordingSizeBytes" : 6,
    "copiedTo" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "user" : "{}",
      "group" : "{}"
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "user" : "{}",
      "group" : "{}"
    } ],
    "read" : true,
    "selfUri" : "https://openapi-generator.tech",
    "callerUser" : "{}",
    "deleteRetentionPolicy" : "{}",
    "callerName" : "callerName",
    "copiedFrom" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "deleted" : true,
    "deletedDate" : "2000-01-23T04:56:07.000+00:00",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "audioRecordingDurationSeconds" : 0,
    "user" : "{}",
    "conversation" : "{}",
    "queue" : "{}",
    "group" : "{}"
  }, {
    "callerAddress" : "callerAddress",
    "note" : "note",
    "audioRecordingSizeBytes" : 6,
    "copiedTo" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "user" : "{}",
      "group" : "{}"
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "user" : "{}",
      "group" : "{}"
    } ],
    "read" : true,
    "selfUri" : "https://openapi-generator.tech",
    "callerUser" : "{}",
    "deleteRetentionPolicy" : "{}",
    "callerName" : "callerName",
    "copiedFrom" : "{}",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "deleted" : true,
    "deletedDate" : "2000-01-23T04:56:07.000+00:00",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "audioRecordingDurationSeconds" : 0,
    "user" : "{}",
    "conversation" : "{}",
    "queue" : "{}",
    "group" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<VoicemailsSearchResponse> 
     */
    open class func postVoicemailSearchWithRequestBuilder(body: VoicemailSearchRequest) -> RequestBuilder<VoicemailsSearchResponse> {        
        let path = "/api/v2/voicemail/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VoicemailsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
