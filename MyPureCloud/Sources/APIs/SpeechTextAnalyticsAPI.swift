//
// SpeechTextAnalyticsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SpeechTextAnalyticsAPI {
    
    /**
     Delete a Speech & Text Analytics DictionaryFeedback by Id
     
     - parameter dictionaryFeedbackId: (path) The Id of the Dictionary Feedback 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSpeechandtextanalyticsDictionaryfeedbackDictionaryFeedbackId(dictionaryFeedbackId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteSpeechandtextanalyticsDictionaryfeedbackDictionaryFeedbackIdWithRequestBuilder(dictionaryFeedbackId: dictionaryFeedbackId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Speech & Text Analytics DictionaryFeedback by Id
     - DELETE /api/v2/speechandtextanalytics/dictionaryfeedback/{dictionaryFeedbackId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter dictionaryFeedbackId: (path) The Id of the Dictionary Feedback 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSpeechandtextanalyticsDictionaryfeedbackDictionaryFeedbackIdWithRequestBuilder(dictionaryFeedbackId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/speechandtextanalytics/dictionaryfeedback/{dictionaryFeedbackId}"
        let dictionaryFeedbackIdPreEscape = "\(dictionaryFeedbackId)"
        let dictionaryFeedbackIdPostEscape = dictionaryFeedbackIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dictionaryFeedbackId}", with: dictionaryFeedbackIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a Speech & Text Analytics program by id
     
     - parameter programId: (path) The id of the program 
     - parameter forceDelete: (query) Indicates whether the program is forced to be deleted or not. Required when the program to delete is the default program. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSpeechandtextanalyticsProgram(programId: String, forceDelete: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteSpeechandtextanalyticsProgramWithRequestBuilder(programId: programId, forceDelete: forceDelete)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Speech & Text Analytics program by id
     - DELETE /api/v2/speechandtextanalytics/programs/{programId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter programId: (path) The id of the program 
     - parameter forceDelete: (query) Indicates whether the program is forced to be deleted or not. Required when the program to delete is the default program. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSpeechandtextanalyticsProgramWithRequestBuilder(programId: String, forceDelete: Bool? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/speechandtextanalytics/programs/{programId}"
        let programIdPreEscape = "\(programId)"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "forceDelete": forceDelete
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Delete All Speech & Text Analytics SentimentFeedback
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSpeechandtextanalyticsSentimentfeedback(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteSpeechandtextanalyticsSentimentfeedbackWithRequestBuilder()
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete All Speech & Text Analytics SentimentFeedback
     - DELETE /api/v2/speechandtextanalytics/sentimentfeedback
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSpeechandtextanalyticsSentimentfeedbackWithRequestBuilder() -> RequestBuilder<Void> {        
        let path = "/api/v2/speechandtextanalytics/sentimentfeedback"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a Speech & Text Analytics SentimentFeedback by Id
     
     - parameter sentimentFeedbackId: (path) The Id of the SentimentFeedback 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackId(sentimentFeedbackId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdWithRequestBuilder(sentimentFeedbackId: sentimentFeedbackId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Speech & Text Analytics SentimentFeedback by Id
     - DELETE /api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter sentimentFeedbackId: (path) The Id of the SentimentFeedback 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSpeechandtextanalyticsSentimentfeedbackSentimentFeedbackIdWithRequestBuilder(sentimentFeedbackId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/speechandtextanalytics/sentimentfeedback/{sentimentFeedbackId}"
        let sentimentFeedbackIdPreEscape = "\(sentimentFeedbackId)"
        let sentimentFeedbackIdPostEscape = sentimentFeedbackIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sentimentFeedbackId}", with: sentimentFeedbackIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete a Speech & Text Analytics topic by id
     
     - parameter topicId: (path) The id of the topic 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSpeechandtextanalyticsTopic(topicId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteSpeechandtextanalyticsTopicWithRequestBuilder(topicId: topicId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a Speech & Text Analytics topic by id
     - DELETE /api/v2/speechandtextanalytics/topics/{topicId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter topicId: (path) The id of the topic 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSpeechandtextanalyticsTopicWithRequestBuilder(topicId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/speechandtextanalytics/topics/{topicId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Get Speech and Text Analytics for a specific conversation
     
     - parameter conversationId: (path) Conversation Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsConversation(conversationId: String, completion: @escaping ((_ data: ConversationMetrics?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsConversationWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<ConversationMetrics>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Speech and Text Analytics for a specific conversation
     - GET /api/v2/speechandtextanalytics/conversations/{conversationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "sentimentScore" : 0.8008281904610115,
  "empathyScores" : [ {
    "score" : 1.4658129805029452,
    "userId" : "userId"
  }, {
    "score" : 1.4658129805029452,
    "userId" : "userId"
  } ],
  "participantMetrics" : "{}",
  "sentimentTrend" : 6.027456183070403,
  "sentimentTrendClass" : "NotCalculated",
  "conversation" : "{}"
}, statusCode=200}]
     
     - parameter conversationId: (path) Conversation Id 

     - returns: RequestBuilder<ConversationMetrics> 
     */
    open class func getSpeechandtextanalyticsConversationWithRequestBuilder(conversationId: String) -> RequestBuilder<ConversationMetrics> {        
        var path = "/api/v2/speechandtextanalytics/conversations/{conversationId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ConversationMetrics>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get the pre-signed S3 URL for the transcript of a specific communication of a conversation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter communicationId: (path) Communication ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsConversationCommunicationTranscripturl(conversationId: String, communicationId: String, completion: @escaping ((_ data: TranscriptUrl?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsConversationCommunicationTranscripturlWithRequestBuilder(conversationId: conversationId, communicationId: communicationId)
        requestBuilder.execute { (response: Response<TranscriptUrl>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the pre-signed S3 URL for the transcript of a specific communication of a conversation
     - GET /api/v2/speechandtextanalytics/conversations/{conversationId}/communications/{communicationId}/transcripturl
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "url" : "url"
}, statusCode=200}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter communicationId: (path) Communication ID 

     - returns: RequestBuilder<TranscriptUrl> 
     */
    open class func getSpeechandtextanalyticsConversationCommunicationTranscripturlWithRequestBuilder(conversationId: String, communicationId: String) -> RequestBuilder<TranscriptUrl> {        
        var path = "/api/v2/speechandtextanalytics/conversations/{conversationId}/communications/{communicationId}/transcripturl"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptUrl>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get the list of pre-signed S3 URL for the transcripts of a specific communication of a conversation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter communicationId: (path) Communication ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsConversationCommunicationTranscripturls(conversationId: String, communicationId: String, completion: @escaping ((_ data: TranscriptUrls?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsConversationCommunicationTranscripturlsWithRequestBuilder(conversationId: conversationId, communicationId: communicationId)
        requestBuilder.execute { (response: Response<TranscriptUrls>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of pre-signed S3 URL for the transcripts of a specific communication of a conversation
     - GET /api/v2/speechandtextanalytics/conversations/{conversationId}/communications/{communicationId}/transcripturls
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "urls" : [ {
    "recording" : "{}",
    "url" : "url"
  }, {
    "recording" : "{}",
    "url" : "url"
  } ],
  "communicationId" : "communicationId",
  "conversation" : "{}"
}, statusCode=200}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter communicationId: (path) Communication ID 

     - returns: RequestBuilder<TranscriptUrls> 
     */
    open class func getSpeechandtextanalyticsConversationCommunicationTranscripturlsWithRequestBuilder(conversationId: String, communicationId: String) -> RequestBuilder<TranscriptUrls> {        
        var path = "/api/v2/speechandtextanalytics/conversations/{conversationId}/communications/{communicationId}/transcripturls"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let communicationIdPreEscape = "\(communicationId)"
        let communicationIdPostEscape = communicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{communicationId}", with: communicationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TranscriptUrls>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Get the list of Speech & Text Analytics dictionary feedbacks
     
     - parameter dialect: (query) The key for filter the listing by dialect, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard (optional)
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsDictionaryfeedback(dialect: String? = nil, nextPage: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: DictionaryFeedbackEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsDictionaryfeedbackWithRequestBuilder(dialect: dialect, nextPage: nextPage, pageSize: pageSize)
        requestBuilder.execute { (response: Response<DictionaryFeedbackEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of Speech & Text Analytics dictionary feedbacks
     - GET /api/v2/speechandtextanalytics/dictionaryfeedback
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "pageCount" : 1,
  "total" : 5,
  "entities" : [ {
    "dialect" : "en-US",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "term" : "term",
    "boostValue" : 0.8008282,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "source" : "Manual"
  }, {
    "dialect" : "en-US",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "term" : "term",
    "boostValue" : 0.8008282,
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : "{}",
    "id" : "id",
    "source" : "Manual"
  } ],
  "selfUri" : "selfUri",
  "pageSize" : 6,
  "nextUri" : "nextUri"
}, statusCode=200}]
     
     - parameter dialect: (query) The key for filter the listing by dialect, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard (optional)
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)

     - returns: RequestBuilder<DictionaryFeedbackEntityListing> 
     */
    open class func getSpeechandtextanalyticsDictionaryfeedbackWithRequestBuilder(dialect: String? = nil, nextPage: String? = nil, pageSize: Int? = nil) -> RequestBuilder<DictionaryFeedbackEntityListing> {        
        let path = "/api/v2/speechandtextanalytics/dictionaryfeedback"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "dialect": dialect, 
            "nextPage": nextPage, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DictionaryFeedbackEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a Speech & Text Analytics dictionary feedback by id
     
     - parameter dictionaryFeedbackId: (path) The Id of the Dictionary Feedback 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsDictionaryfeedbackDictionaryFeedbackId(dictionaryFeedbackId: String, completion: @escaping ((_ data: DictionaryFeedback?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsDictionaryfeedbackDictionaryFeedbackIdWithRequestBuilder(dictionaryFeedbackId: dictionaryFeedbackId)
        requestBuilder.execute { (response: Response<DictionaryFeedback>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Speech & Text Analytics dictionary feedback by id
     - GET /api/v2/speechandtextanalytics/dictionaryfeedback/{dictionaryFeedbackId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "examplePhrases" : [ {
    "phrase" : "phrase",
    "source" : "Manual"
  }, {
    "phrase" : "phrase",
    "source" : "Manual"
  } ],
  "dialect" : "en-US",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "soundsLike" : [ "soundsLike", "soundsLike" ],
  "selfUri" : "https://openapi-generator.tech",
  "term" : "term",
  "boostValue" : 0.8008282,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "source" : "Manual"
}, statusCode=200}]
     
     - parameter dictionaryFeedbackId: (path) The Id of the Dictionary Feedback 

     - returns: RequestBuilder<DictionaryFeedback> 
     */
    open class func getSpeechandtextanalyticsDictionaryfeedbackDictionaryFeedbackIdWithRequestBuilder(dictionaryFeedbackId: String) -> RequestBuilder<DictionaryFeedback> {        
        var path = "/api/v2/speechandtextanalytics/dictionaryfeedback/{dictionaryFeedbackId}"
        let dictionaryFeedbackIdPreEscape = "\(dictionaryFeedbackId)"
        let dictionaryFeedbackIdPostEscape = dictionaryFeedbackIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dictionaryFeedbackId}", with: dictionaryFeedbackIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DictionaryFeedback>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a Speech & Text Analytics program by id
     
     - parameter programId: (path) The id of the program 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsProgram(programId: String, completion: @escaping ((_ data: Program?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsProgramWithRequestBuilder(programId: programId)
        requestBuilder.execute { (response: Response<Program>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Speech & Text Analytics program by id
     - GET /api/v2/speechandtextanalytics/programs/{programId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "publishedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "topics" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "modifiedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "published" : true,
  "tags" : [ "tags", "tags" ]
}, statusCode=200}]
     
     - parameter programId: (path) The id of the program 

     - returns: RequestBuilder<Program> 
     */
    open class func getSpeechandtextanalyticsProgramWithRequestBuilder(programId: String) -> RequestBuilder<Program> {        
        var path = "/api/v2/speechandtextanalytics/programs/{programId}"
        let programIdPreEscape = "\(programId)"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Program>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get Speech & Text Analytics program mappings to queues and flows by id
     
     - parameter programId: (path) The id of the program 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsProgramMappings(programId: String, completion: @escaping ((_ data: ProgramMappings?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsProgramMappingsWithRequestBuilder(programId: programId)
        requestBuilder.execute { (response: Response<ProgramMappings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Speech & Text Analytics program mappings to queues and flows by id
     - GET /api/v2/speechandtextanalytics/programs/{programId}/mappings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "flows" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "queues" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "modifiedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "program" : {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }
}, statusCode=200}]
     
     - parameter programId: (path) The id of the program 

     - returns: RequestBuilder<ProgramMappings> 
     */
    open class func getSpeechandtextanalyticsProgramMappingsWithRequestBuilder(programId: String) -> RequestBuilder<ProgramMappings> {        
        var path = "/api/v2/speechandtextanalytics/programs/{programId}/mappings"
        let programIdPreEscape = "\(programId)"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProgramMappings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get transcription engine settings of a program
     
     - parameter programId: (path) The id of the program 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsProgramTranscriptionengines(programId: String, completion: @escaping ((_ data: ProgramTranscriptionEngines?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsProgramTranscriptionenginesWithRequestBuilder(programId: programId)
        requestBuilder.execute { (response: Response<ProgramTranscriptionEngines>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get transcription engine settings of a program
     - GET /api/v2/speechandtextanalytics/programs/{programId}/transcriptionengines
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "modifiedBy" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "program" : "{}",
  "transcriptionEngines" : [ {
    "engine" : "Genesys",
    "dialects" : [ "dialects", "dialects" ]
  }, {
    "engine" : "Genesys",
    "dialects" : [ "dialects", "dialects" ]
  } ]
}, statusCode=200}]
     
     - parameter programId: (path) The id of the program 

     - returns: RequestBuilder<ProgramTranscriptionEngines> 
     */
    open class func getSpeechandtextanalyticsProgramTranscriptionenginesWithRequestBuilder(programId: String) -> RequestBuilder<ProgramTranscriptionEngines> {        
        var path = "/api/v2/speechandtextanalytics/programs/{programId}/transcriptionengines"
        let programIdPreEscape = "\(programId)"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProgramTranscriptionEngines>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum State_getSpeechandtextanalyticsPrograms: String { 
        case latest = "Latest"
        case published = "Published"
    }

    
    /**
     Get the list of Speech & Text Analytics programs
     
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)
     - parameter state: (query) Program state. Defaults to Latest (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsPrograms(nextPage: String? = nil, pageSize: Int? = nil, state: State_getSpeechandtextanalyticsPrograms? = nil, completion: @escaping ((_ data: ProgramsEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsProgramsWithRequestBuilder(nextPage: nextPage, pageSize: pageSize, state: state)
        requestBuilder.execute { (response: Response<ProgramsEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of Speech & Text Analytics programs
     - GET /api/v2/speechandtextanalytics/programs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "pageCount" : 1,
  "entities" : [ {
    "topicsCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "modifiedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "published" : true,
    "tags" : [ "tags", "tags" ]
  }, {
    "topicsCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "modifiedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "published" : true,
    "tags" : [ "tags", "tags" ]
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 6,
  "nextUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)
     - parameter state: (query) Program state. Defaults to Latest (optional)

     - returns: RequestBuilder<ProgramsEntityListing> 
     */
    open class func getSpeechandtextanalyticsProgramsWithRequestBuilder(nextPage: String? = nil, pageSize: Int? = nil, state: State_getSpeechandtextanalyticsPrograms? = nil) -> RequestBuilder<ProgramsEntityListing> {        
        let path = "/api/v2/speechandtextanalytics/programs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "nextPage": nextPage, 
            "pageSize": pageSize?.encodeToJSON(), 
            "state": state?.rawValue
        ])

        let requestBuilder: RequestBuilder<ProgramsEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a Speech & Text Analytics general program job by id
     
     - parameter jobId: (path) The id of the publish programs job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsProgramsGeneralJob(jobId: String, completion: @escaping ((_ data: GeneralProgramJob?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsProgramsGeneralJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<GeneralProgramJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Speech & Text Analytics general program job by id
     - GET /api/v2/speechandtextanalytics/programs/general/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Running"
}, statusCode=200}]
     
     - parameter jobId: (path) The id of the publish programs job 

     - returns: RequestBuilder<GeneralProgramJob> 
     */
    open class func getSpeechandtextanalyticsProgramsGeneralJobWithRequestBuilder(jobId: String) -> RequestBuilder<GeneralProgramJob> {        
        var path = "/api/v2/speechandtextanalytics/programs/general/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GeneralProgramJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get the list of Speech & Text Analytics programs mappings to queues and flows
     
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsProgramsMappings(nextPage: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: ProgramsMappingsEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsProgramsMappingsWithRequestBuilder(nextPage: nextPage, pageSize: pageSize)
        requestBuilder.execute { (response: Response<ProgramsMappingsEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of Speech & Text Analytics programs mappings to queues and flows
     - GET /api/v2/speechandtextanalytics/programs/mappings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "pageCount" : 6,
  "entities" : [ {
    "flows" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "modifiedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "program" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }
  }, {
    "flows" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "queues" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "modifiedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "program" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)

     - returns: RequestBuilder<ProgramsMappingsEntityListing> 
     */
    open class func getSpeechandtextanalyticsProgramsMappingsWithRequestBuilder(nextPage: String? = nil, pageSize: Int? = nil) -> RequestBuilder<ProgramsMappingsEntityListing> {        
        let path = "/api/v2/speechandtextanalytics/programs/mappings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "nextPage": nextPage, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<ProgramsMappingsEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a Speech & Text Analytics publish programs job by id
     
     - parameter jobId: (path) The id of the publish programs job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsProgramsPublishjob(jobId: String, completion: @escaping ((_ data: ProgramJob?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsProgramsPublishjobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<ProgramJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Speech & Text Analytics publish programs job by id
     - GET /api/v2/speechandtextanalytics/programs/publishjobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Running",
  "programs" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter jobId: (path) The id of the publish programs job 

     - returns: RequestBuilder<ProgramJob> 
     */
    open class func getSpeechandtextanalyticsProgramsPublishjobWithRequestBuilder(jobId: String) -> RequestBuilder<ProgramJob> {        
        var path = "/api/v2/speechandtextanalytics/programs/publishjobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProgramJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get supported dialects for each transcription engine
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsProgramsTranscriptionenginesDialects(completion: @escaping ((_ data: SupportedDialectsEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsProgramsTranscriptionenginesDialectsWithRequestBuilder()
        requestBuilder.execute { (response: Response<SupportedDialectsEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get supported dialects for each transcription engine
     - GET /api/v2/speechandtextanalytics/programs/transcriptionengines/dialects
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "engine" : "Genesys",
    "dialects" : [ "dialects", "dialects" ]
  }, {
    "engine" : "Genesys",
    "dialects" : [ "dialects", "dialects" ]
  } ]
}, statusCode=200}]

     - returns: RequestBuilder<SupportedDialectsEntityListing> 
     */
    open class func getSpeechandtextanalyticsProgramsTranscriptionenginesDialectsWithRequestBuilder() -> RequestBuilder<SupportedDialectsEntityListing> {        
        let path = "/api/v2/speechandtextanalytics/programs/transcriptionengines/dialects"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SupportedDialectsEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get the list of Speech & Text Analytics unpublished programs
     
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsProgramsUnpublished(nextPage: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: UnpublishedProgramsEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsProgramsUnpublishedWithRequestBuilder(nextPage: nextPage, pageSize: pageSize)
        requestBuilder.execute { (response: Response<UnpublishedProgramsEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of Speech & Text Analytics unpublished programs
     - GET /api/v2/speechandtextanalytics/programs/unpublished
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "pageCount" : 6,
  "entities" : [ {
    "datePublished" : "2000-01-23T04:56:07.000+00:00",
    "publishedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "topics" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "modifiedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "published" : true,
    "tags" : [ "tags", "tags" ]
  }, {
    "datePublished" : "2000-01-23T04:56:07.000+00:00",
    "publishedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "topics" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "modifiedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "published" : true,
    "tags" : [ "tags", "tags" ]
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)

     - returns: RequestBuilder<UnpublishedProgramsEntityListing> 
     */
    open class func getSpeechandtextanalyticsProgramsUnpublishedWithRequestBuilder(nextPage: String? = nil, pageSize: Int? = nil) -> RequestBuilder<UnpublishedProgramsEntityListing> {        
        let path = "/api/v2/speechandtextanalytics/programs/unpublished"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "nextPage": nextPage, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<UnpublishedProgramsEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get the list of Speech & Text Analytics sentiment supported dialects
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsSentimentDialects(completion: @escaping ((_ data: EntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsSentimentDialectsWithRequestBuilder()
        requestBuilder.execute { (response: Response<EntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of Speech & Text Analytics sentiment supported dialects
     - GET /api/v2/speechandtextanalytics/sentiment/dialects
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ "{}", "{}" ]
}, statusCode=200}]

     - returns: RequestBuilder<EntityListing> 
     */
    open class func getSpeechandtextanalyticsSentimentDialectsWithRequestBuilder() -> RequestBuilder<EntityListing> {        
        let path = "/api/v2/speechandtextanalytics/sentiment/dialects"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get the list of Speech & Text Analytics SentimentFeedback
     
     - parameter dialect: (query) The key for filter the listing by dialect, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsSentimentfeedback(dialect: String? = nil, completion: @escaping ((_ data: SentimentFeedbackEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsSentimentfeedbackWithRequestBuilder(dialect: dialect)
        requestBuilder.execute { (response: Response<SentimentFeedbackEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of Speech & Text Analytics SentimentFeedback
     - GET /api/v2/speechandtextanalytics/sentimentfeedback
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "dialect" : "en-US",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "phrase" : "phrase",
    "createdBy" : "{}",
    "id" : "id",
    "feedbackValue" : "Neutral"
  }, {
    "dialect" : "en-US",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "phrase" : "phrase",
    "createdBy" : "{}",
    "id" : "id",
    "feedbackValue" : "Neutral"
  } ]
}, statusCode=200}]
     
     - parameter dialect: (query) The key for filter the listing by dialect, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard (optional)

     - returns: RequestBuilder<SentimentFeedbackEntityListing> 
     */
    open class func getSpeechandtextanalyticsSentimentfeedbackWithRequestBuilder(dialect: String? = nil) -> RequestBuilder<SentimentFeedbackEntityListing> {        
        let path = "/api/v2/speechandtextanalytics/sentimentfeedback"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "dialect": dialect
        ])

        let requestBuilder: RequestBuilder<SentimentFeedbackEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get Speech And Text Analytics Settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsSettings(completion: @escaping ((_ data: SpeechTextAnalyticsSettingsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<SpeechTextAnalyticsSettingsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Speech And Text Analytics Settings
     - GET /api/v2/speechandtextanalytics/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultProgram" : "{}",
  "agentEmpathyEnabled" : true,
  "expectedDialects" : [ "expectedDialects", "expectedDialects" ],
  "textAnalyticsEnabled" : true
}, statusCode=200}]

     - returns: RequestBuilder<SpeechTextAnalyticsSettingsResponse> 
     */
    open class func getSpeechandtextanalyticsSettingsWithRequestBuilder() -> RequestBuilder<SpeechTextAnalyticsSettingsResponse> {        
        let path = "/api/v2/speechandtextanalytics/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SpeechTextAnalyticsSettingsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a Speech & Text Analytics topic by id
     
     - parameter topicId: (path) The id of the topic 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsTopic(topicId: String, completion: @escaping ((_ data: Topic?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsTopicWithRequestBuilder(topicId: topicId)
        requestBuilder.execute { (response: Response<Topic>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Speech & Text Analytics topic by id
     - GET /api/v2/speechandtextanalytics/topics/{topicId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "dialect" : "dialect",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "published" : true,
  "tags" : [ "tags", "tags" ],
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "strictness" : "1",
  "modifiedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "id" : "id",
  "programs" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "phrases" : [ {
    "sentiment" : "Unspecified",
    "strictness" : "1",
    "text" : "text"
  }, {
    "sentiment" : "Unspecified",
    "strictness" : "1",
    "text" : "text"
  } ],
  "participants" : "External"
}, statusCode=200}]
     
     - parameter topicId: (path) The id of the topic 

     - returns: RequestBuilder<Topic> 
     */
    open class func getSpeechandtextanalyticsTopicWithRequestBuilder(topicId: String) -> RequestBuilder<Topic> {        
        var path = "/api/v2/speechandtextanalytics/topics/{topicId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Topic>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum State_getSpeechandtextanalyticsTopics: String { 
        case latest = "latest"
        case published = "published"
    }

    
    
    
    
    
    public enum SortBy_getSpeechandtextanalyticsTopics: String { 
        case name = "name"
    }

    
    
    public enum SortOrder_getSpeechandtextanalyticsTopics: String { 
        case asc = "asc"
        case desc = "desc"
    }

    
    /**
     Get the list of Speech & Text Analytics topics
     
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)
     - parameter state: (query) Topic state. Defaults to latest (optional)
     - parameter name: (query) Case insensitive partial name to filter by (optional)
     - parameter ids: (query) Comma separated Topic IDs to filter by. Cannot be used with other filters. Maximum of 50 IDs allowed. (optional)
     - parameter dialects: (query) Comma separated dialect strings to filter by. Maximum of 15 dialects allowed. (optional)
     - parameter sortBy: (query) Sort results by. Defaults to name (optional)
     - parameter sortOrder: (query) Sort order. Defaults to asc (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsTopics(nextPage: String? = nil, pageSize: Int? = nil, state: State_getSpeechandtextanalyticsTopics? = nil, name: String? = nil, ids: [String]? = nil, dialects: [String]? = nil, sortBy: SortBy_getSpeechandtextanalyticsTopics? = nil, sortOrder: SortOrder_getSpeechandtextanalyticsTopics? = nil, completion: @escaping ((_ data: TopicsEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsTopicsWithRequestBuilder(nextPage: nextPage, pageSize: pageSize, state: state, name: name, ids: ids, dialects: dialects, sortBy: sortBy, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<TopicsEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of Speech & Text Analytics topics
     - GET /api/v2/speechandtextanalytics/topics
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "pageCount" : 5,
  "entities" : [ {
    "dialect" : "dialect",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "published" : true,
    "tags" : [ "tags", "tags" ],
    "phrasesCount" : 6,
    "name" : "name",
    "programsCount" : 0,
    "strictness" : "1",
    "modifiedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "id" : "id",
    "participants" : "External"
  }, {
    "dialect" : "dialect",
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "published" : true,
    "tags" : [ "tags", "tags" ],
    "phrasesCount" : 6,
    "name" : "name",
    "programsCount" : 0,
    "strictness" : "1",
    "modifiedBy" : {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    },
    "id" : "id",
    "participants" : "External"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 1,
  "nextUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter nextPage: (query) The key for listing the next page (optional)
     - parameter pageSize: (query) The page size for the listing (optional)
     - parameter state: (query) Topic state. Defaults to latest (optional)
     - parameter name: (query) Case insensitive partial name to filter by (optional)
     - parameter ids: (query) Comma separated Topic IDs to filter by. Cannot be used with other filters. Maximum of 50 IDs allowed. (optional)
     - parameter dialects: (query) Comma separated dialect strings to filter by. Maximum of 15 dialects allowed. (optional)
     - parameter sortBy: (query) Sort results by. Defaults to name (optional)
     - parameter sortOrder: (query) Sort order. Defaults to asc (optional)

     - returns: RequestBuilder<TopicsEntityListing> 
     */
    open class func getSpeechandtextanalyticsTopicsWithRequestBuilder(nextPage: String? = nil, pageSize: Int? = nil, state: State_getSpeechandtextanalyticsTopics? = nil, name: String? = nil, ids: [String]? = nil, dialects: [String]? = nil, sortBy: SortBy_getSpeechandtextanalyticsTopics? = nil, sortOrder: SortOrder_getSpeechandtextanalyticsTopics? = nil) -> RequestBuilder<TopicsEntityListing> {        
        let path = "/api/v2/speechandtextanalytics/topics"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "nextPage": nextPage, 
            "pageSize": pageSize?.encodeToJSON(), 
            "state": state?.rawValue, 
            "name": name, 
            "ids": ids, 
            "dialects": dialects, 
            "sortBy": sortBy?.rawValue, 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<TopicsEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get list of supported Speech & Text Analytics topics dialects
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsTopicsDialects(completion: @escaping ((_ data: EntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsTopicsDialectsWithRequestBuilder()
        requestBuilder.execute { (response: Response<EntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of supported Speech & Text Analytics topics dialects
     - GET /api/v2/speechandtextanalytics/topics/dialects
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ "{}", "{}" ]
}, statusCode=200}]

     - returns: RequestBuilder<EntityListing> 
     */
    open class func getSpeechandtextanalyticsTopicsDialectsWithRequestBuilder() -> RequestBuilder<EntityListing> {        
        let path = "/api/v2/speechandtextanalytics/topics/dialects"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<EntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum Dialect_getSpeechandtextanalyticsTopicsGeneral: String { 
        case ar001 = "ar-001"
        case arAe = "ar-AE"
        case arBh = "ar-BH"
        case arEg = "ar-EG"
        case arIl = "ar-IL"
        case arSa = "ar-SA"
        case arTn = "ar-TN"
        case daDk = "da-DK"
        case deCh = "de-CH"
        case deDe = "de-DE"
        case enAu = "en-AU"
        case enGb = "en-GB"
        case enHk = "en-HK"
        case enIe = "en-IE"
        case enIn = "en-IN"
        case enNz = "en-NZ"
        case enSg = "en-SG"
        case enUs = "en-US"
        case enZa = "en-ZA"
        case esEs = "es-ES"
        case esUs = "es-US"
        case fiFi = "fi-FI"
        case frCa = "fr-CA"
        case frFr = "fr-FR"
        case heIl = "he-IL"
        case itIt = "it-IT"
        case jaJp = "ja-JP"
        case koKr = "ko-KR"
        case nbNo = "nb-NO"
        case nlNl = "nl-NL"
        case plPl = "pl-PL"
        case ptBr = "pt-BR"
        case ptPt = "pt-PT"
        case svSe = "sv-SE"
    }

    
    /**
     Get the Speech & Text Analytics general topics for a given dialect
     
     - parameter dialect: (query) The dialect of the general topics, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsTopicsGeneral(dialect: Dialect_getSpeechandtextanalyticsTopicsGeneral? = nil, completion: @escaping ((_ data: GeneralTopicsEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsTopicsGeneralWithRequestBuilder(dialect: dialect)
        requestBuilder.execute { (response: Response<GeneralTopicsEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the Speech & Text Analytics general topics for a given dialect
     - GET /api/v2/speechandtextanalytics/topics/general
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "name" : "name"
  }, {
    "name" : "name"
  } ]
}, statusCode=200}]
     
     - parameter dialect: (query) The dialect of the general topics, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard (optional)

     - returns: RequestBuilder<GeneralTopicsEntityListing> 
     */
    open class func getSpeechandtextanalyticsTopicsGeneralWithRequestBuilder(dialect: Dialect_getSpeechandtextanalyticsTopicsGeneral? = nil) -> RequestBuilder<GeneralTopicsEntityListing> {        
        let path = "/api/v2/speechandtextanalytics/topics/general"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "dialect": dialect?.rawValue
        ])

        let requestBuilder: RequestBuilder<GeneralTopicsEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum Dialect_getSpeechandtextanalyticsTopicsGeneralStatus: String { 
        case ar001 = "ar-001"
        case arAe = "ar-AE"
        case arBh = "ar-BH"
        case arEg = "ar-EG"
        case arIl = "ar-IL"
        case arSa = "ar-SA"
        case arTn = "ar-TN"
        case daDk = "da-DK"
        case deCh = "de-CH"
        case deDe = "de-DE"
        case enAu = "en-AU"
        case enGb = "en-GB"
        case enHk = "en-HK"
        case enIe = "en-IE"
        case enIn = "en-IN"
        case enNz = "en-NZ"
        case enSg = "en-SG"
        case enUs = "en-US"
        case enZa = "en-ZA"
        case esEs = "es-ES"
        case esUs = "es-US"
        case fiFi = "fi-FI"
        case frCa = "fr-CA"
        case frFr = "fr-FR"
        case heIl = "he-IL"
        case itIt = "it-IT"
        case jaJp = "ja-JP"
        case koKr = "ko-KR"
        case nbNo = "nb-NO"
        case nlNl = "nl-NL"
        case plPl = "pl-PL"
        case ptBr = "pt-BR"
        case ptPt = "pt-PT"
        case svSe = "sv-SE"
    }

    
    /**
     Get the list of general topics from the org and the system with their current status
     
     - parameter dialect: (query) The dialect of the general topics, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsTopicsGeneralStatus(dialect: Dialect_getSpeechandtextanalyticsTopicsGeneralStatus? = nil, completion: @escaping ((_ data: UnifiedGeneralTopicEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsTopicsGeneralStatusWithRequestBuilder(dialect: dialect)
        requestBuilder.execute { (response: Response<UnifiedGeneralTopicEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of general topics from the org and the system with their current status
     - GET /api/v2/speechandtextanalytics/topics/general/status
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "name" : "name",
    "status" : "Deprecated"
  }, {
    "name" : "name",
    "status" : "Deprecated"
  } ]
}, statusCode=200}]
     
     - parameter dialect: (query) The dialect of the general topics, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard (optional)

     - returns: RequestBuilder<UnifiedGeneralTopicEntityListing> 
     */
    open class func getSpeechandtextanalyticsTopicsGeneralStatusWithRequestBuilder(dialect: Dialect_getSpeechandtextanalyticsTopicsGeneralStatus? = nil) -> RequestBuilder<UnifiedGeneralTopicEntityListing> {        
        let path = "/api/v2/speechandtextanalytics/topics/general/status"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "dialect": dialect?.rawValue
        ])

        let requestBuilder: RequestBuilder<UnifiedGeneralTopicEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a Speech & Text Analytics publish topics job by id
     
     - parameter jobId: (path) The id of the publish topics job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSpeechandtextanalyticsTopicsPublishjob(jobId: String, completion: @escaping ((_ data: TopicJob?,_ error: Error?) -> Void)) {
        let requestBuilder = getSpeechandtextanalyticsTopicsPublishjobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<TopicJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Speech & Text Analytics publish topics job by id
     - GET /api/v2/speechandtextanalytics/topics/publishjobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "topics" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Running"
}, statusCode=200}]
     
     - parameter jobId: (path) The id of the publish topics job 

     - returns: RequestBuilder<TopicJob> 
     */
    open class func getSpeechandtextanalyticsTopicsPublishjobWithRequestBuilder(jobId: String) -> RequestBuilder<TopicJob> {        
        var path = "/api/v2/speechandtextanalytics/topics/publishjobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TopicJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Patch Speech And Text Analytics Settings
     
     - parameter body: (body) Speech And Text Analytics Settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchSpeechandtextanalyticsSettings(body: SpeechTextAnalyticsSettingsRequest, completion: @escaping ((_ data: SpeechTextAnalyticsSettingsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = patchSpeechandtextanalyticsSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SpeechTextAnalyticsSettingsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch Speech And Text Analytics Settings
     - PATCH /api/v2/speechandtextanalytics/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultProgram" : "{}",
  "agentEmpathyEnabled" : true,
  "expectedDialects" : [ "expectedDialects", "expectedDialects" ],
  "textAnalyticsEnabled" : true
}, statusCode=200}]
     
     - parameter body: (body) Speech And Text Analytics Settings 

     - returns: RequestBuilder<SpeechTextAnalyticsSettingsResponse> 
     */
    open class func patchSpeechandtextanalyticsSettingsWithRequestBuilder(body: SpeechTextAnalyticsSettingsRequest) -> RequestBuilder<SpeechTextAnalyticsSettingsResponse> {        
        let path = "/api/v2/speechandtextanalytics/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SpeechTextAnalyticsSettingsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Create a Speech & Text Analytics DictionaryFeedback
     
     - parameter body: (body) The DictionaryFeedback to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsDictionaryfeedback(body: DictionaryFeedback, completion: @escaping ((_ data: DictionaryFeedback?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsDictionaryfeedbackWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DictionaryFeedback>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a Speech & Text Analytics DictionaryFeedback
     - POST /api/v2/speechandtextanalytics/dictionaryfeedback
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "examplePhrases" : [ {
    "phrase" : "phrase",
    "source" : "Manual"
  }, {
    "phrase" : "phrase",
    "source" : "Manual"
  } ],
  "dialect" : "en-US",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "soundsLike" : [ "soundsLike", "soundsLike" ],
  "selfUri" : "https://openapi-generator.tech",
  "term" : "term",
  "boostValue" : 0.8008282,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "source" : "Manual"
}, statusCode=201}]
     
     - parameter body: (body) The DictionaryFeedback to create 

     - returns: RequestBuilder<DictionaryFeedback> 
     */
    open class func postSpeechandtextanalyticsDictionaryfeedbackWithRequestBuilder(body: DictionaryFeedback) -> RequestBuilder<DictionaryFeedback> {        
        let path = "/api/v2/speechandtextanalytics/dictionaryfeedback"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DictionaryFeedback>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create new Speech & Text Analytics program
     
     - parameter body: (body) The program to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsPrograms(body: ProgramRequest, completion: @escaping ((_ data: Program?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsProgramsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Program>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create new Speech & Text Analytics program
     - POST /api/v2/speechandtextanalytics/programs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "publishedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "topics" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "modifiedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "published" : true,
  "tags" : [ "tags", "tags" ]
}, statusCode=200}]
     
     - parameter body: (body) The program to create 

     - returns: RequestBuilder<Program> 
     */
    open class func postSpeechandtextanalyticsProgramsWithRequestBuilder(body: ProgramRequest) -> RequestBuilder<Program> {        
        let path = "/api/v2/speechandtextanalytics/programs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Program>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create new Speech & Text Analytics general program job
     
     - parameter body: (body) The general programs job to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsProgramsGeneralJobs(body: GeneralProgramJobRequest, completion: @escaping ((_ data: GeneralProgramJob?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsProgramsGeneralJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<GeneralProgramJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create new Speech & Text Analytics general program job
     - POST /api/v2/speechandtextanalytics/programs/general/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Running"
}, statusCode=200}]
     
     - parameter body: (body) The general programs job to create 

     - returns: RequestBuilder<GeneralProgramJob> 
     */
    open class func postSpeechandtextanalyticsProgramsGeneralJobsWithRequestBuilder(body: GeneralProgramJobRequest) -> RequestBuilder<GeneralProgramJob> {        
        let path = "/api/v2/speechandtextanalytics/programs/general/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GeneralProgramJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create new Speech & Text Analytics publish programs job
     
     - parameter body: (body) The publish programs job to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsProgramsPublishjobs(body: ProgramJobRequest, completion: @escaping ((_ data: ProgramJob?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsProgramsPublishjobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<ProgramJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create new Speech & Text Analytics publish programs job
     - POST /api/v2/speechandtextanalytics/programs/publishjobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Running",
  "programs" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) The publish programs job to create 

     - returns: RequestBuilder<ProgramJob> 
     */
    open class func postSpeechandtextanalyticsProgramsPublishjobsWithRequestBuilder(body: ProgramJobRequest) -> RequestBuilder<ProgramJob> {        
        let path = "/api/v2/speechandtextanalytics/programs/publishjobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProgramJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a Speech & Text Analytics SentimentFeedback
     
     - parameter body: (body) The SentimentFeedback to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsSentimentfeedback(body: SentimentFeedback, completion: @escaping ((_ data: SentimentFeedback?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsSentimentfeedbackWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SentimentFeedback>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a Speech & Text Analytics SentimentFeedback
     - POST /api/v2/speechandtextanalytics/sentimentfeedback
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dialect" : "en-US",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "phrase" : "phrase",
  "createdBy" : "{}",
  "id" : "id",
  "feedbackValue" : "Neutral"
}, statusCode=201}]
     
     - parameter body: (body) The SentimentFeedback to create 

     - returns: RequestBuilder<SentimentFeedback> 
     */
    open class func postSpeechandtextanalyticsSentimentfeedbackWithRequestBuilder(body: SentimentFeedback) -> RequestBuilder<SentimentFeedback> {        
        let path = "/api/v2/speechandtextanalytics/sentimentfeedback"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SentimentFeedback>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create new Speech & Text Analytics topic
     
     - parameter body: (body) The topic to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsTopics(body: TopicRequest, completion: @escaping ((_ data: Topic?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsTopicsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Topic>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create new Speech & Text Analytics topic
     - POST /api/v2/speechandtextanalytics/topics
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "dialect" : "dialect",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "published" : true,
  "tags" : [ "tags", "tags" ],
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "strictness" : "1",
  "modifiedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "id" : "id",
  "programs" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "phrases" : [ {
    "sentiment" : "Unspecified",
    "strictness" : "1",
    "text" : "text"
  }, {
    "sentiment" : "Unspecified",
    "strictness" : "1",
    "text" : "text"
  } ],
  "participants" : "External"
}, statusCode=200}]
     
     - parameter body: (body) The topic to create 

     - returns: RequestBuilder<Topic> 
     */
    open class func postSpeechandtextanalyticsTopicsWithRequestBuilder(body: TopicRequest) -> RequestBuilder<Topic> {        
        let path = "/api/v2/speechandtextanalytics/topics"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Topic>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create new Speech & Text Analytics publish topics job
     
     - parameter body: (body) The publish topics job to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsTopicsPublishjobs(body: TopicJobRequest, completion: @escaping ((_ data: TopicJob?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsTopicsPublishjobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TopicJob>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create new Speech & Text Analytics publish topics job
     - POST /api/v2/speechandtextanalytics/topics/publishjobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "topics" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "Running"
}, statusCode=200}]
     
     - parameter body: (body) The publish topics job to create 

     - returns: RequestBuilder<TopicJob> 
     */
    open class func postSpeechandtextanalyticsTopicsPublishjobsWithRequestBuilder(body: TopicJobRequest) -> RequestBuilder<TopicJob> {        
        let path = "/api/v2/speechandtextanalytics/topics/publishjobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TopicJob>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSpeechandtextanalyticsTranscriptsSearch(body: TranscriptSearchRequest, completion: @escaping ((_ data: JsonSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postSpeechandtextanalyticsTranscriptsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<JsonSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search resources.
     - POST /api/v2/speechandtextanalytics/transcripts/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "pageSize" : 1,
  "results" : "{}",
  "aggregations" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<JsonSearchResponse> 
     */
    open class func postSpeechandtextanalyticsTranscriptsSearchWithRequestBuilder(body: TranscriptSearchRequest) -> RequestBuilder<JsonSearchResponse> {        
        let path = "/api/v2/speechandtextanalytics/transcripts/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update existing Speech & Text Analytics dictionary feedback by id
     
     - parameter dictionaryFeedbackId: (path) The Id of the Dictionary Feedback 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSpeechandtextanalyticsDictionaryfeedbackDictionaryFeedbackId(dictionaryFeedbackId: String, body: DictionaryFeedback? = nil, completion: @escaping ((_ data: DictionaryFeedback?,_ error: Error?) -> Void)) {
        let requestBuilder = putSpeechandtextanalyticsDictionaryfeedbackDictionaryFeedbackIdWithRequestBuilder(dictionaryFeedbackId: dictionaryFeedbackId, body: body)
        requestBuilder.execute { (response: Response<DictionaryFeedback>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update existing Speech & Text Analytics dictionary feedback by id
     - PUT /api/v2/speechandtextanalytics/dictionaryfeedback/{dictionaryFeedbackId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "examplePhrases" : [ {
    "phrase" : "phrase",
    "source" : "Manual"
  }, {
    "phrase" : "phrase",
    "source" : "Manual"
  } ],
  "dialect" : "en-US",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "createdBy" : "{}",
  "soundsLike" : [ "soundsLike", "soundsLike" ],
  "selfUri" : "https://openapi-generator.tech",
  "term" : "term",
  "boostValue" : 0.8008282,
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "modifiedBy" : "{}",
  "id" : "id",
  "source" : "Manual"
}, statusCode=200}]
     
     - parameter dictionaryFeedbackId: (path) The Id of the Dictionary Feedback 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DictionaryFeedback> 
     */
    open class func putSpeechandtextanalyticsDictionaryfeedbackDictionaryFeedbackIdWithRequestBuilder(dictionaryFeedbackId: String, body: DictionaryFeedback? = nil) -> RequestBuilder<DictionaryFeedback> {        
        var path = "/api/v2/speechandtextanalytics/dictionaryfeedback/{dictionaryFeedbackId}"
        let dictionaryFeedbackIdPreEscape = "\(dictionaryFeedbackId)"
        let dictionaryFeedbackIdPostEscape = dictionaryFeedbackIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dictionaryFeedbackId}", with: dictionaryFeedbackIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DictionaryFeedback>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update existing Speech & Text Analytics program
     
     - parameter programId: (path) The id of the program 
     - parameter body: (body) The program to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSpeechandtextanalyticsProgram(programId: String, body: ProgramRequest, completion: @escaping ((_ data: Program?,_ error: Error?) -> Void)) {
        let requestBuilder = putSpeechandtextanalyticsProgramWithRequestBuilder(programId: programId, body: body)
        requestBuilder.execute { (response: Response<Program>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update existing Speech & Text Analytics program
     - PUT /api/v2/speechandtextanalytics/programs/{programId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "publishedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "topics" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "modifiedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "published" : true,
  "tags" : [ "tags", "tags" ]
}, statusCode=200}]
     
     - parameter programId: (path) The id of the program 
     - parameter body: (body) The program to update 

     - returns: RequestBuilder<Program> 
     */
    open class func putSpeechandtextanalyticsProgramWithRequestBuilder(programId: String, body: ProgramRequest) -> RequestBuilder<Program> {        
        var path = "/api/v2/speechandtextanalytics/programs/{programId}"
        let programIdPreEscape = "\(programId)"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Program>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Set Speech & Text Analytics program mappings to queues and flows
     
     - parameter programId: (path) The id of the program 
     - parameter body: (body) The program to set mappings for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSpeechandtextanalyticsProgramMappings(programId: String, body: ProgramMappingsRequest, completion: @escaping ((_ data: ProgramMappings?,_ error: Error?) -> Void)) {
        let requestBuilder = putSpeechandtextanalyticsProgramMappingsWithRequestBuilder(programId: programId, body: body)
        requestBuilder.execute { (response: Response<ProgramMappings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Set Speech & Text Analytics program mappings to queues and flows
     - PUT /api/v2/speechandtextanalytics/programs/{programId}/mappings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "flows" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "queues" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "modifiedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "program" : {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }
}, statusCode=200}]
     
     - parameter programId: (path) The id of the program 
     - parameter body: (body) The program to set mappings for 

     - returns: RequestBuilder<ProgramMappings> 
     */
    open class func putSpeechandtextanalyticsProgramMappingsWithRequestBuilder(programId: String, body: ProgramMappingsRequest) -> RequestBuilder<ProgramMappings> {        
        var path = "/api/v2/speechandtextanalytics/programs/{programId}/mappings"
        let programIdPreEscape = "\(programId)"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProgramMappings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update transcription engine settings of a program
     
     - parameter programId: (path) The id of the program 
     - parameter body: (body) Program transcription engine setting 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSpeechandtextanalyticsProgramTranscriptionengines(programId: String, body: TranscriptionEnginesRequest, completion: @escaping ((_ data: ProgramTranscriptionEngines?,_ error: Error?) -> Void)) {
        let requestBuilder = putSpeechandtextanalyticsProgramTranscriptionenginesWithRequestBuilder(programId: programId, body: body)
        requestBuilder.execute { (response: Response<ProgramTranscriptionEngines>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update transcription engine settings of a program
     - PUT /api/v2/speechandtextanalytics/programs/{programId}/transcriptionengines
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "modifiedBy" : "{}",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "program" : "{}",
  "transcriptionEngines" : [ {
    "engine" : "Genesys",
    "dialects" : [ "dialects", "dialects" ]
  }, {
    "engine" : "Genesys",
    "dialects" : [ "dialects", "dialects" ]
  } ]
}, statusCode=200}]
     
     - parameter programId: (path) The id of the program 
     - parameter body: (body) Program transcription engine setting 

     - returns: RequestBuilder<ProgramTranscriptionEngines> 
     */
    open class func putSpeechandtextanalyticsProgramTranscriptionenginesWithRequestBuilder(programId: String, body: TranscriptionEnginesRequest) -> RequestBuilder<ProgramTranscriptionEngines> {        
        var path = "/api/v2/speechandtextanalytics/programs/{programId}/transcriptionengines"
        let programIdPreEscape = "\(programId)"
        let programIdPostEscape = programIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{programId}", with: programIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ProgramTranscriptionEngines>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update Speech And Text Analytics Settings
     
     - parameter body: (body) Speech And Text Analytics Settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSpeechandtextanalyticsSettings(body: SpeechTextAnalyticsSettingsRequest, completion: @escaping ((_ data: SpeechTextAnalyticsSettingsResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putSpeechandtextanalyticsSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<SpeechTextAnalyticsSettingsResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update Speech And Text Analytics Settings
     - PUT /api/v2/speechandtextanalytics/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultProgram" : "{}",
  "agentEmpathyEnabled" : true,
  "expectedDialects" : [ "expectedDialects", "expectedDialects" ],
  "textAnalyticsEnabled" : true
}, statusCode=200}]
     
     - parameter body: (body) Speech And Text Analytics Settings 

     - returns: RequestBuilder<SpeechTextAnalyticsSettingsResponse> 
     */
    open class func putSpeechandtextanalyticsSettingsWithRequestBuilder(body: SpeechTextAnalyticsSettingsRequest) -> RequestBuilder<SpeechTextAnalyticsSettingsResponse> {        
        let path = "/api/v2/speechandtextanalytics/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SpeechTextAnalyticsSettingsResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update existing Speech & Text Analytics topic
     
     - parameter topicId: (path) The id of the topic 
     - parameter body: (body) The topic to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSpeechandtextanalyticsTopic(topicId: String, body: TopicRequest, completion: @escaping ((_ data: Topic?,_ error: Error?) -> Void)) {
        let requestBuilder = putSpeechandtextanalyticsTopicWithRequestBuilder(topicId: topicId, body: body)
        requestBuilder.execute { (response: Response<Topic>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update existing Speech & Text Analytics topic
     - PUT /api/v2/speechandtextanalytics/topics/{topicId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "publishedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "dialect" : "dialect",
  "selfUri" : "https://openapi-generator.tech",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "published" : true,
  "tags" : [ "tags", "tags" ],
  "datePublished" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "strictness" : "1",
  "modifiedBy" : {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  },
  "id" : "id",
  "programs" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "phrases" : [ {
    "sentiment" : "Unspecified",
    "strictness" : "1",
    "text" : "text"
  }, {
    "sentiment" : "Unspecified",
    "strictness" : "1",
    "text" : "text"
  } ],
  "participants" : "External"
}, statusCode=200}]
     
     - parameter topicId: (path) The id of the topic 
     - parameter body: (body) The topic to update 

     - returns: RequestBuilder<Topic> 
     */
    open class func putSpeechandtextanalyticsTopicWithRequestBuilder(topicId: String, body: TopicRequest) -> RequestBuilder<Topic> {        
        var path = "/api/v2/speechandtextanalytics/topics/{topicId}"
        let topicIdPreEscape = "\(topicId)"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Topic>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
