//
// TeamsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class TeamsAPI {
    
    /**
     Delete team
     
     - parameter teamId: (path) Team ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTeam(teamId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTeamWithRequestBuilder(teamId: teamId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete team
     - DELETE /api/v2/teams/{teamId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter teamId: (path) Team ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTeamWithRequestBuilder(teamId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/teams/{teamId}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete team members
     
     - parameter teamId: (path) Team ID 
     - parameter _id: (query) Comma separated list of member ids to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTeamMembers(teamId: String, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteTeamMembersWithRequestBuilder(teamId: teamId, _id: _id)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete team members
     - DELETE /api/v2/teams/{teamId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter teamId: (path) Team ID 
     - parameter _id: (query) Comma separated list of member ids to remove 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTeamMembersWithRequestBuilder(teamId: String, _id: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/teams/{teamId}/members"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Get team
     
     - parameter teamId: (path) Team ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeam(teamId: String, completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        let requestBuilder = getTeamWithRequestBuilder(teamId: teamId)
        requestBuilder.execute { (response: Response<Team>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get team
     - GET /api/v2/teams/{teamId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id"
}, statusCode=200}]
     
     - parameter teamId: (path) Team ID 

     - returns: RequestBuilder<Team> 
     */
    open class func getTeamWithRequestBuilder(teamId: String) -> RequestBuilder<Team> {        
        var path = "/api/v2/teams/{teamId}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Team>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum Expand_getTeamMembers: String { 
        case entities = "entities"
    }

    
    /**
     Get team membership
     
     - parameter teamId: (path) Team ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter before: (query) The cursor that points to the previous item in the complete list of teams (optional)
     - parameter after: (query) The cursor that points to the next item in the complete list of teams (optional)
     - parameter expand: (query) Expand the name on each user (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamMembers(teamId: String, pageSize: Int? = nil, before: String? = nil, after: String? = nil, expand: Expand_getTeamMembers? = nil, completion: @escaping ((_ data: TeamMemberEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTeamMembersWithRequestBuilder(teamId: teamId, pageSize: pageSize, before: before, after: after, expand: expand)
        requestBuilder.execute { (response: Response<TeamMemberEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get team membership
     - GET /api/v2/teams/{teamId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter teamId: (path) Team ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter before: (query) The cursor that points to the previous item in the complete list of teams (optional)
     - parameter after: (query) The cursor that points to the next item in the complete list of teams (optional)
     - parameter expand: (query) Expand the name on each user (optional)

     - returns: RequestBuilder<TeamMemberEntityListing> 
     */
    open class func getTeamMembersWithRequestBuilder(teamId: String, pageSize: Int? = nil, before: String? = nil, after: String? = nil, expand: Expand_getTeamMembers? = nil) -> RequestBuilder<TeamMemberEntityListing> {        
        var path = "/api/v2/teams/{teamId}/members"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "before": before, 
            "after": after, 
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<TeamMemberEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum Expand_getTeams: String { 
        case entitiesDivision = "entities.division"
    }

    
    /**
     Get Team listing
     
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Return only teams whose names start with this value (case-insensitive matching) (optional)
     - parameter after: (query) The cursor that points to the next item in the complete list of teams (optional)
     - parameter before: (query) The cursor that points to the previous item in the complete list of teams (optional)
     - parameter expand: (query) Expand the name on each user (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeams(pageSize: Int? = nil, name: String? = nil, after: String? = nil, before: String? = nil, expand: Expand_getTeams? = nil, completion: @escaping ((_ data: TeamEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getTeamsWithRequestBuilder(pageSize: pageSize, name: name, after: after, before: before, expand: expand)
        requestBuilder.execute { (response: Response<TeamEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get Team listing
     - GET /api/v2/teams
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter name: (query) Return only teams whose names start with this value (case-insensitive matching) (optional)
     - parameter after: (query) The cursor that points to the next item in the complete list of teams (optional)
     - parameter before: (query) The cursor that points to the previous item in the complete list of teams (optional)
     - parameter expand: (query) Expand the name on each user (optional)

     - returns: RequestBuilder<TeamEntityListing> 
     */
    open class func getTeamsWithRequestBuilder(pageSize: Int? = nil, name: String? = nil, after: String? = nil, before: String? = nil, expand: Expand_getTeams? = nil) -> RequestBuilder<TeamEntityListing> {        
        let path = "/api/v2/teams"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "name": name, 
            "after": after, 
            "before": before, 
            "expand": expand?.rawValue
        ])

        let requestBuilder: RequestBuilder<TeamEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Update team
     
     - parameter teamId: (path) Team ID 
     - parameter body: (body) Team 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTeam(teamId: String, body: Team, completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        let requestBuilder = patchTeamWithRequestBuilder(teamId: teamId, body: body)
        requestBuilder.execute { (response: Response<Team>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update team
     - PATCH /api/v2/teams/{teamId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id"
}, statusCode=200}]
     
     - parameter teamId: (path) Team ID 
     - parameter body: (body) Team 

     - returns: RequestBuilder<Team> 
     */
    open class func patchTeamWithRequestBuilder(teamId: String, body: Team) -> RequestBuilder<Team> {        
        var path = "/api/v2/teams/{teamId}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Team>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Add team members
     
     - parameter teamId: (path) Team ID 
     - parameter body: (body) TeamMembers 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTeamMembers(teamId: String, body: TeamMembers, completion: @escaping ((_ data: TeamMemberAddListingResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postTeamMembersWithRequestBuilder(teamId: teamId, body: body)
        requestBuilder.execute { (response: Response<TeamMemberAddListingResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add team members
     - POST /api/v2/teams/{teamId}/members
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "failures" : [ {
    "reason" : "UserNotFound",
    "id" : "id"
  }, {
    "reason" : "UserNotFound",
    "id" : "id"
  } ],
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter teamId: (path) Team ID 
     - parameter body: (body) TeamMembers 

     - returns: RequestBuilder<TeamMemberAddListingResponse> 
     */
    open class func postTeamMembersWithRequestBuilder(teamId: String, body: TeamMembers) -> RequestBuilder<TeamMemberAddListingResponse> {        
        var path = "/api/v2/teams/{teamId}/members"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{teamId}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamMemberAddListingResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create a team
     
     - parameter body: (body) Team 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTeams(body: Team, completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        let requestBuilder = postTeamsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Team>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create a team
     - POST /api/v2/teams
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "division" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id"
}, statusCode=200}]
     
     - parameter body: (body) Team 

     - returns: RequestBuilder<Team> 
     */
    open class func postTeamsWithRequestBuilder(body: Team) -> RequestBuilder<Team> {        
        let path = "/api/v2/teams"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Team>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search resources.
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTeamsSearch(body: TeamSearchRequest, completion: @escaping ((_ data: TeamsSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postTeamsSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<TeamsSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search resources.
     - POST /api/v2/teams/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<TeamsSearchResponse> 
     */
    open class func postTeamsSearchWithRequestBuilder(body: TeamSearchRequest) -> RequestBuilder<TeamsSearchResponse> {        
        let path = "/api/v2/teams/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TeamsSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
