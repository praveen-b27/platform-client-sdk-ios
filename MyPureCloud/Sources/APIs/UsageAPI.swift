//
// UsageAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class UsageAPI {
    
    
    /**
     Get the results of a usage query
     
     - parameter executionId: (path) ID of the query execution 
     - parameter clientId: (path) Client ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOauthClientUsageQueryResult(executionId: String, clientId: String, completion: @escaping ((_ data: ApiUsageQueryResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getOauthClientUsageQueryResultWithRequestBuilder(executionId: executionId, clientId: clientId)
        requestBuilder.execute { (response: Response<ApiUsageQueryResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the results of a usage query
     - GET /api/v2/oauth/clients/{clientId}/usage/query/results/{executionId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "queryStatus" : "Complete",
  "results" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "clientId" : "clientId",
    "clientName" : "clientName",
    "templateUri" : "templateUri",
    "requests" : 2,
    "httpMethod" : "httpMethod",
    "userId" : "userId",
    "organizationId" : "organizationId",
    "status429" : 5,
    "status400" : 1,
    "status500" : 5,
    "status200" : 0,
    "status300" : 6
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "clientId" : "clientId",
    "clientName" : "clientName",
    "templateUri" : "templateUri",
    "requests" : 2,
    "httpMethod" : "httpMethod",
    "userId" : "userId",
    "organizationId" : "organizationId",
    "status429" : 5,
    "status400" : 1,
    "status500" : 5,
    "status200" : 0,
    "status300" : 6
  } ]
}, statusCode=200}]
     
     - parameter executionId: (path) ID of the query execution 
     - parameter clientId: (path) Client ID 

     - returns: RequestBuilder<ApiUsageQueryResult> 
     */
    open class func getOauthClientUsageQueryResultWithRequestBuilder(executionId: String, clientId: String) -> RequestBuilder<ApiUsageQueryResult> {        
        var path = "/api/v2/oauth/clients/{clientId}/usage/query/results/{executionId}"
        let executionIdPreEscape = "\(executionId)"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{executionId}", with: executionIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiUsageQueryResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a summary of OAuth client API usage
     
     - parameter clientId: (path) Client ID 
     - parameter days: (query) Previous number of days to query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOauthClientUsageSummary(clientId: String, days: String? = nil, completion: @escaping ((_ data: UsageExecutionResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getOauthClientUsageSummaryWithRequestBuilder(clientId: clientId, days: days)
        requestBuilder.execute { (response: Response<UsageExecutionResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a summary of OAuth client API usage
     - GET /api/v2/oauth/clients/{clientId}/usage/summary
     - After calling this method, you will then need to poll for the query results based on the returned execution Id
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "executionId" : "executionId",
  "resultsUri" : "resultsUri"
}, statusCode=200}]
     
     - parameter clientId: (path) Client ID 
     - parameter days: (query) Previous number of days to query (optional)

     - returns: RequestBuilder<UsageExecutionResult> 
     */
    open class func getOauthClientUsageSummaryWithRequestBuilder(clientId: String, days: String? = nil) -> RequestBuilder<UsageExecutionResult> {        
        var path = "/api/v2/oauth/clients/{clientId}/usage/summary"
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "days": days
        ])

        let requestBuilder: RequestBuilder<UsageExecutionResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get the results of a usage query
     
     - parameter executionId: (path) ID of the query execution 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsageQueryExecutionIdResults(executionId: String, completion: @escaping ((_ data: ApiUsageQueryResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsageQueryExecutionIdResultsWithRequestBuilder(executionId: executionId)
        requestBuilder.execute { (response: Response<ApiUsageQueryResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the results of a usage query
     - GET /api/v2/usage/query/{executionId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "queryStatus" : "Complete",
  "results" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "clientId" : "clientId",
    "clientName" : "clientName",
    "templateUri" : "templateUri",
    "requests" : 2,
    "httpMethod" : "httpMethod",
    "userId" : "userId",
    "organizationId" : "organizationId",
    "status429" : 5,
    "status400" : 1,
    "status500" : 5,
    "status200" : 0,
    "status300" : 6
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "clientId" : "clientId",
    "clientName" : "clientName",
    "templateUri" : "templateUri",
    "requests" : 2,
    "httpMethod" : "httpMethod",
    "userId" : "userId",
    "organizationId" : "organizationId",
    "status429" : 5,
    "status400" : 1,
    "status500" : 5,
    "status200" : 0,
    "status300" : 6
  } ]
}, statusCode=200}]
     
     - parameter executionId: (path) ID of the query execution 

     - returns: RequestBuilder<ApiUsageQueryResult> 
     */
    open class func getUsageQueryExecutionIdResultsWithRequestBuilder(executionId: String) -> RequestBuilder<ApiUsageQueryResult> {        
        var path = "/api/v2/usage/query/{executionId}/results"
        let executionIdPreEscape = "\(executionId)"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{executionId}", with: executionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiUsageQueryResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get the results of a usage search
     
     - parameter executionId: (path) ID of the search execution 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsageSimplesearchExecutionIdResults(executionId: String, completion: @escaping ((_ data: ApiUsageQueryResult?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsageSimplesearchExecutionIdResultsWithRequestBuilder(executionId: executionId)
        requestBuilder.execute { (response: Response<ApiUsageQueryResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the results of a usage search
     - GET /api/v2/usage/simplesearch/{executionId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "queryStatus" : "Complete",
  "results" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "clientId" : "clientId",
    "clientName" : "clientName",
    "templateUri" : "templateUri",
    "requests" : 2,
    "httpMethod" : "httpMethod",
    "userId" : "userId",
    "organizationId" : "organizationId",
    "status429" : 5,
    "status400" : 1,
    "status500" : 5,
    "status200" : 0,
    "status300" : 6
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "clientId" : "clientId",
    "clientName" : "clientName",
    "templateUri" : "templateUri",
    "requests" : 2,
    "httpMethod" : "httpMethod",
    "userId" : "userId",
    "organizationId" : "organizationId",
    "status429" : 5,
    "status400" : 1,
    "status500" : 5,
    "status200" : 0,
    "status300" : 6
  } ]
}, statusCode=200}]
     
     - parameter executionId: (path) ID of the search execution 

     - returns: RequestBuilder<ApiUsageQueryResult> 
     */
    open class func getUsageSimplesearchExecutionIdResultsWithRequestBuilder(executionId: String) -> RequestBuilder<ApiUsageQueryResult> {        
        var path = "/api/v2/usage/simplesearch/{executionId}/results"
        let executionIdPreEscape = "\(executionId)"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{executionId}", with: executionIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiUsageQueryResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Query for OAuth client API usage
     
     - parameter clientId: (path) Client ID 
     - parameter body: (body) Query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postOauthClientUsageQuery(clientId: String, body: ApiUsageClientQuery, completion: @escaping ((_ data: UsageExecutionResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postOauthClientUsageQueryWithRequestBuilder(clientId: clientId, body: body)
        requestBuilder.execute { (response: Response<UsageExecutionResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for OAuth client API usage
     - POST /api/v2/oauth/clients/{clientId}/usage/query
     - After calling this method, you will then need to poll for the query results based on the returned execution Id
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "executionId" : "executionId",
  "resultsUri" : "resultsUri"
}, statusCode=200}]
     
     - parameter clientId: (path) Client ID 
     - parameter body: (body) Query 

     - returns: RequestBuilder<UsageExecutionResult> 
     */
    open class func postOauthClientUsageQueryWithRequestBuilder(clientId: String, body: ApiUsageClientQuery) -> RequestBuilder<UsageExecutionResult> {        
        var path = "/api/v2/oauth/clients/{clientId}/usage/query"
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UsageExecutionResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query organization API Usage - 
     
     - parameter body: (body) Query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsageQuery(body: ApiUsageOrganizationQuery, completion: @escaping ((_ data: UsageExecutionResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsageQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UsageExecutionResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query organization API Usage - 
     - POST /api/v2/usage/query
     - After calling this method, you will then need to poll for the query results based on the returned execution Id
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "executionId" : "executionId",
  "resultsUri" : "resultsUri"
}, statusCode=200}]
     
     - parameter body: (body) Query 

     - returns: RequestBuilder<UsageExecutionResult> 
     */
    open class func postUsageQueryWithRequestBuilder(body: ApiUsageOrganizationQuery) -> RequestBuilder<UsageExecutionResult> {        
        let path = "/api/v2/usage/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UsageExecutionResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search organization API Usage - 
     
     - parameter body: (body) SimpleSearch 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsageSimplesearch(body: ApiUsageSimpleSearch, completion: @escaping ((_ data: UsageExecutionResult?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsageSimplesearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UsageExecutionResult>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search organization API Usage - 
     - POST /api/v2/usage/simplesearch
     - After calling this method, you will then need to poll for the query results based on the returned execution Id
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "executionId" : "executionId",
  "resultsUri" : "resultsUri"
}, statusCode=200}]
     
     - parameter body: (body) SimpleSearch 

     - returns: RequestBuilder<UsageExecutionResult> 
     */
    open class func postUsageSimplesearchWithRequestBuilder(body: ApiUsageSimpleSearch) -> RequestBuilder<UsageExecutionResult> {        
        let path = "/api/v2/usage/simplesearch"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UsageExecutionResult>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

}
