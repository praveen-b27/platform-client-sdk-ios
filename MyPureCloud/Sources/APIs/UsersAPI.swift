//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class UsersAPI {
    
    /**
     Delete/cancel an async request
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete/cancel an async request
     - DELETE /api/v2/analytics/users/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    
    /**
     Delete a grant of a role in a division
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division of the grant 
     - parameter roleId: (path) the id of the role of the grant 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuthorizationSubjectDivisionRole(subjectId: String, divisionId: String, roleId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: subjectId, divisionId: divisionId, roleId: roleId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a grant of a role in a division
     - DELETE /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division of the grant 
     - parameter roleId: (path) the id of the role of the grant 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: String, divisionId: String, roleId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete the user's max utilization settings and revert to the organization-wide default.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRoutingUserUtilization(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteRoutingUserUtilizationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete the user's max utilization settings and revert to the organization-wide default.
     - DELETE /api/v2/routing/users/{userId}/utilization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRoutingUserUtilizationWithRequestBuilder(userId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Delete user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUser(userId: String, completion: @escaping ((_ data: JSON?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<JSON>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Delete user
     - DELETE /api/v2/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<JSON> 
     */
    open class func deleteUserWithRequestBuilder(userId: String) -> RequestBuilder<JSON> {        
        var path = "/api/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSON>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Remove routing language from user
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserRoutinglanguage(userId: String, languageId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserRoutinglanguageWithRequestBuilder(userId: userId, languageId: languageId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove routing language from user
     - DELETE /api/v2/users/{userId}/routinglanguages/{languageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserRoutinglanguageWithRequestBuilder(userId: String, languageId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/routinglanguages/{languageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Remove routing skill from user
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserRoutingskill(userId: String, skillId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserRoutingskillWithRequestBuilder(userId: userId, skillId: skillId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove routing skill from user
     - DELETE /api/v2/users/{userId}/routingskills/{skillId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserRoutingskillWithRequestBuilder(userId: String, skillId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Clear associated station
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserStationAssociatedstation(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserStationAssociatedstationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Clear associated station
     - DELETE /api/v2/users/{userId}/station/associatedstation
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserStationAssociatedstationWithRequestBuilder(userId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/station/associatedstation"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Clear default station
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserStationDefaultstation(userId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserStationDefaultstationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Clear default station
     - DELETE /api/v2/users/{userId}/station/defaultstation
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserStationDefaultstationWithRequestBuilder(userId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/station/defaultstation"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Delete a verifier
     
     - parameter userId: (path) User ID 
     - parameter verifierId: (path) Verifier ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserVerifier(userId: String, verifierId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteUserVerifierWithRequestBuilder(userId: userId, verifierId: verifierId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a verifier
     - DELETE /api/v2/users/{userId}/verifiers/{verifierId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter verifierId: (path) Verifier ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserVerifierWithRequestBuilder(userId: String, verifierId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/verifiers/{verifierId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let verifierIdPreEscape = "\(verifierId)"
        let verifierIdPostEscape = verifierIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{verifierId}", with: verifierIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Get status for async query for user details
     
     - parameter jobId: (path) jobId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJob(jobId: String, completion: @escaping ((_ data: AsyncQueryStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: jobId)
        requestBuilder.execute { (response: Response<AsyncQueryStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get status for async query for user details
     - GET /api/v2/analytics/users/details/jobs/{jobId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "errorMessage" : "errorMessage",
  "submissionDate" : "2000-01-23T04:56:07.000+00:00",
  "completionDate" : "2000-01-23T04:56:07.000+00:00",
  "state" : "QUEUED",
  "expirationDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 

     - returns: RequestBuilder<AsyncQueryStatus> 
     */
    open class func getAnalyticsUsersDetailsJobWithRequestBuilder(jobId: String) -> RequestBuilder<AsyncQueryStatus> {        
        var path = "/api/v2/analytics/users/details/jobs/{jobId}"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Fetch a page of results for an async query
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJobResults(jobId: String, cursor: String? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: AnalyticsUserDetailsAsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: jobId, cursor: cursor, pageSize: pageSize)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsAsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a page of results for an async query
     - GET /api/v2/analytics/users/details/jobs/{jobId}/results
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "cursor" : "cursor",
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00",
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  }, {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  } ]
}, statusCode=200}]
     
     - parameter jobId: (path) jobId 
     - parameter cursor: (query) Indicates where to resume query results (not required for first page) (optional)
     - parameter pageSize: (query) The desired maximum number of results (optional)

     - returns: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> 
     */
    open class func getAnalyticsUsersDetailsJobResultsWithRequestBuilder(jobId: String, cursor: String? = nil, pageSize: Int? = nil) -> RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse> {        
        var path = "/api/v2/analytics/users/details/jobs/{jobId}/results"
        let jobIdPreEscape = "\(jobId)"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "cursor": cursor, 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsAsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Lookup the datalake availability date and time
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAnalyticsUsersDetailsJobsAvailability(completion: @escaping ((_ data: DataAvailabilityResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getAnalyticsUsersDetailsJobsAvailabilityWithRequestBuilder()
        requestBuilder.execute { (response: Response<DataAvailabilityResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Lookup the datalake availability date and time
     - GET /api/v2/analytics/users/details/jobs/availability
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dataAvailabilityDate" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]

     - returns: RequestBuilder<DataAvailabilityResponse> 
     */
    open class func getAnalyticsUsersDetailsJobsAvailabilityWithRequestBuilder() -> RequestBuilder<DataAvailabilityResponse> {        
        let path = "/api/v2/analytics/users/details/jobs/availability"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DataAvailabilityResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Returns which divisions the current user has the given permission in.
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter name: (query) Search term to filter by division name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionspermittedMe(permission: String, name: String? = nil, completion: @escaping ((_ data: [AuthzDivision]?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionspermittedMeWithRequestBuilder(permission: permission, name: name)
        requestBuilder.execute { (response: Response<[AuthzDivision]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Returns which divisions the current user has the given permission in.
     - GET /api/v2/authorization/divisionspermitted/me
     - This route is deprecated, use authorization/divisionspermitted/paged/me instead.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "objectCounts" : {
    "key" : 0
  },
  "id" : "id",
  "homeDivision" : true
}, statusCode=200}]
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter name: (query) Search term to filter by division name (optional)

     - returns: RequestBuilder<[AuthzDivision]> 
     */
    open class func getAuthorizationDivisionspermittedMeWithRequestBuilder(permission: String, name: String? = nil) -> RequestBuilder<[AuthzDivision]> {        
        let path = "/api/v2/authorization/divisionspermitted/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "permission": permission
        ])

        let requestBuilder: RequestBuilder<[AuthzDivision]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Returns which divisions the current user has the given permission in.
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionspermittedPagedMe(permission: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: DivsPermittedEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionspermittedPagedMeWithRequestBuilder(permission: permission, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<DivsPermittedEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Returns which divisions the current user has the given permission in.
     - GET /api/v2/authorization/divisionspermitted/paged/me
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "allDivsPermitted" : true,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "objectCounts" : {
      "key" : 0
    },
    "id" : "id",
    "homeDivision" : true
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "objectCounts" : {
      "key" : 0
    },
    "id" : "id",
    "homeDivision" : true
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<DivsPermittedEntityListing> 
     */
    open class func getAuthorizationDivisionspermittedPagedMeWithRequestBuilder(permission: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<DivsPermittedEntityListing> {        
        let path = "/api/v2/authorization/divisionspermitted/paged/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "permission": permission, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DivsPermittedEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Returns which divisions the specified user has the given permission in.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationDivisionspermittedPagedSubjectId(subjectId: String, permission: String, pageNumber: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: DivsPermittedEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationDivisionspermittedPagedSubjectIdWithRequestBuilder(subjectId: subjectId, permission: permission, pageNumber: pageNumber, pageSize: pageSize)
        requestBuilder.execute { (response: Response<DivsPermittedEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Returns which divisions the specified user has the given permission in.
     - GET /api/v2/authorization/divisionspermitted/paged/{subjectId}
     - This route is deprecated, use authorization/divisionspermitted/paged/me instead.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "allDivsPermitted" : true,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "objectCounts" : {
      "key" : 0
    },
    "id" : "id",
    "homeDivision" : true
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "objectCounts" : {
      "key" : 0
    },
    "id" : "id",
    "homeDivision" : true
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter permission: (query) The permission string, including the object to access, e.g. routing:queue:view 
     - parameter pageNumber: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)

     - returns: RequestBuilder<DivsPermittedEntityListing> 
     */
    open class func getAuthorizationDivisionspermittedPagedSubjectIdWithRequestBuilder(subjectId: String, permission: String, pageNumber: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<DivsPermittedEntityListing> {        
        var path = "/api/v2/authorization/divisionspermitted/paged/{subjectId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "permission": permission, 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<DivsPermittedEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Returns a listing of roles and permissions for a user.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationSubject(subjectId: String, completion: @escaping ((_ data: AuthzSubject?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationSubjectWithRequestBuilder(subjectId: subjectId)
        requestBuilder.execute { (response: Response<AuthzSubject>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Returns a listing of roles and permissions for a user.
     - GET /api/v2/authorization/subjects/{subjectId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "grants" : [ {
    "division" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "objectCounts" : {
        "key" : 0
      },
      "id" : "id",
      "homeDivision" : true
    },
    "grantMadeAt" : "2000-01-23T04:56:07.000+00:00",
    "role" : {
      "default" : true,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "policies" : [ {
        "condition" : "condition",
        "entityName" : "entityName",
        "domain" : "domain",
        "actions" : [ "actions", "actions" ]
      }, {
        "condition" : "condition",
        "entityName" : "entityName",
        "domain" : "domain",
        "actions" : [ "actions", "actions" ]
      } ],
      "description" : "description",
      "id" : "id"
    },
    "subjectId" : "subjectId"
  }, {
    "division" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "objectCounts" : {
        "key" : 0
      },
      "id" : "id",
      "homeDivision" : true
    },
    "grantMadeAt" : "2000-01-23T04:56:07.000+00:00",
    "role" : {
      "default" : true,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "policies" : [ {
        "condition" : "condition",
        "entityName" : "entityName",
        "domain" : "domain",
        "actions" : [ "actions", "actions" ]
      }, {
        "condition" : "condition",
        "entityName" : "entityName",
        "domain" : "domain",
        "actions" : [ "actions", "actions" ]
      } ],
      "description" : "description",
      "id" : "id"
    },
    "subjectId" : "subjectId"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "version" : 0
}, statusCode=200}]
     
     - parameter subjectId: (path) Subject ID (user or group) 

     - returns: RequestBuilder<AuthzSubject> 
     */
    open class func getAuthorizationSubjectWithRequestBuilder(subjectId: String) -> RequestBuilder<AuthzSubject> {        
        var path = "/api/v2/authorization/subjects/{subjectId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthzSubject>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Returns a listing of roles and permissions for the currently authenticated user.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationSubjectsMe(completion: @escaping ((_ data: AuthzSubject?,_ error: Error?) -> Void)) {
        let requestBuilder = getAuthorizationSubjectsMeWithRequestBuilder()
        requestBuilder.execute { (response: Response<AuthzSubject>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Returns a listing of roles and permissions for the currently authenticated user.
     - GET /api/v2/authorization/subjects/me
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "grants" : [ {
    "division" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "objectCounts" : {
        "key" : 0
      },
      "id" : "id",
      "homeDivision" : true
    },
    "grantMadeAt" : "2000-01-23T04:56:07.000+00:00",
    "role" : {
      "default" : true,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "policies" : [ {
        "condition" : "condition",
        "entityName" : "entityName",
        "domain" : "domain",
        "actions" : [ "actions", "actions" ]
      }, {
        "condition" : "condition",
        "entityName" : "entityName",
        "domain" : "domain",
        "actions" : [ "actions", "actions" ]
      } ],
      "description" : "description",
      "id" : "id"
    },
    "subjectId" : "subjectId"
  }, {
    "division" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "description" : "description",
      "objectCounts" : {
        "key" : 0
      },
      "id" : "id",
      "homeDivision" : true
    },
    "grantMadeAt" : "2000-01-23T04:56:07.000+00:00",
    "role" : {
      "default" : true,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "policies" : [ {
        "condition" : "condition",
        "entityName" : "entityName",
        "domain" : "domain",
        "actions" : [ "actions", "actions" ]
      }, {
        "condition" : "condition",
        "entityName" : "entityName",
        "domain" : "domain",
        "actions" : [ "actions", "actions" ]
      } ],
      "description" : "description",
      "id" : "id"
    },
    "subjectId" : "subjectId"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "version" : 0
}, statusCode=200}]

     - returns: RequestBuilder<AuthzSubject> 
     */
    open class func getAuthorizationSubjectsMeWithRequestBuilder() -> RequestBuilder<AuthzSubject> {        
        let path = "/api/v2/authorization/subjects/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AuthzSubject>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    public enum ModelType_getFieldconfig: String { 
        case person = "person"
        case group = "group"
        case org = "org"
        case externalcontact = "externalContact"
    }

    
    /**
     Fetch field config for an entity type
     
     - parameter type: (query) Field type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFieldconfig(type: ModelType_getFieldconfig, completion: @escaping ((_ data: FieldConfig?,_ error: Error?) -> Void)) {
        let requestBuilder = getFieldconfigWithRequestBuilder(type: type)
        requestBuilder.execute { (response: Response<FieldConfig>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch field config for an entity type
     - GET /api/v2/fieldconfig
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "schemaVersion" : "schemaVersion",
  "entityType" : "person",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "state" : "state",
  "version" : "version",
  "sections" : [ {
    "instructionText" : "instructionText",
    "state" : "state",
    "fieldList" : [ {
      "instructionText" : "instructionText",
      "repeatable" : true,
      "customLabels" : true,
      "labelKeys" : [ "labelKeys", "labelKeys" ],
      "state" : "state",
      "params" : {
        "key" : "{}"
      },
      "type" : "type",
      "key" : "key",
      "required" : true,
      "gdpr" : true
    }, {
      "instructionText" : "instructionText",
      "repeatable" : true,
      "customLabels" : true,
      "labelKeys" : [ "labelKeys", "labelKeys" ],
      "state" : "state",
      "params" : {
        "key" : "{}"
      },
      "type" : "type",
      "key" : "key",
      "required" : true,
      "gdpr" : true
    } ],
    "key" : "key"
  }, {
    "instructionText" : "instructionText",
    "state" : "state",
    "fieldList" : [ {
      "instructionText" : "instructionText",
      "repeatable" : true,
      "customLabels" : true,
      "labelKeys" : [ "labelKeys", "labelKeys" ],
      "state" : "state",
      "params" : {
        "key" : "{}"
      },
      "type" : "type",
      "key" : "key",
      "required" : true,
      "gdpr" : true
    }, {
      "instructionText" : "instructionText",
      "repeatable" : true,
      "customLabels" : true,
      "labelKeys" : [ "labelKeys", "labelKeys" ],
      "state" : "state",
      "params" : {
        "key" : "{}"
      },
      "type" : "type",
      "key" : "key",
      "required" : true,
      "gdpr" : true
    } ],
    "key" : "key"
  } ]
}, statusCode=200}]
     
     - parameter type: (query) Field type 

     - returns: RequestBuilder<FieldConfig> 
     */
    open class func getFieldconfigWithRequestBuilder(type: ModelType_getFieldconfig) -> RequestBuilder<FieldConfig> {        
        let path = "/api/v2/fieldconfig"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<FieldConfig>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum SortOrder_getProfilesUsers: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    public enum IntegrationPresenceSource_getProfilesUsers: String { 
        case microsoftTeams = "MicrosoftTeams"
        case zoomPhone = "ZoomPhone"
        case eightByEight = "EightByEight"
    }

    
    /**
     Get a user profile listing
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter _id: (query) id (optional)
     - parameter jid: (query) jid (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter integrationPresenceSource: (query) Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an \&quot;expand\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfilesUsers(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jid: [String]? = nil, sortOrder: SortOrder_getProfilesUsers? = nil, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getProfilesUsers? = nil, completion: @escaping ((_ data: UserProfileEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getProfilesUsersWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, _id: _id, jid: jid, sortOrder: sortOrder, expand: expand, integrationPresenceSource: integrationPresenceSource)
        requestBuilder.execute { (response: Response<UserProfileEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a user profile listing
     - GET /api/v2/profiles/users
     - This api is deprecated. User /api/v2/users
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "expands" : "{}",
    "version" : 0
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "expands" : "{}",
    "version" : 0
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter _id: (query) id (optional)
     - parameter jid: (query) jid (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter integrationPresenceSource: (query) Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an \&quot;expand\&quot;. (optional)

     - returns: RequestBuilder<UserProfileEntityListing> 
     */
    open class func getProfilesUsersWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jid: [String]? = nil, sortOrder: SortOrder_getProfilesUsers? = nil, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getProfilesUsers? = nil) -> RequestBuilder<UserProfileEntityListing> {        
        let path = "/api/v2/profiles/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "id": _id, 
            "jid": jid, 
            "sortOrder": sortOrder?.rawValue, 
            "expand": expand, 
            "integrationPresenceSource": integrationPresenceSource?.rawValue
        ])

        let requestBuilder: RequestBuilder<UserProfileEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get the user's max utilization settings.  If not configured, the organization-wide default is returned.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutingUserUtilization(userId: String, completion: @escaping ((_ data: AgentMaxUtilizationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getRoutingUserUtilizationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<AgentMaxUtilizationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the user's max utilization settings.  If not configured, the organization-wide default is returned.
     - GET /api/v2/routing/users/{userId}/utilization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "level" : "Agent",
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "interruptableMediaTypes", "interruptableMediaTypes" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 0
    }
  }
}, statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<AgentMaxUtilizationResponse> 
     */
    open class func getRoutingUserUtilizationWithRequestBuilder(userId: String) -> RequestBuilder<AgentMaxUtilizationResponse> {        
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AgentMaxUtilizationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum IntegrationPresenceSource_getUser: String { 
        case microsoftTeams = "MicrosoftTeams"
        case zoomPhone = "ZoomPhone"
        case eightByEight = "EightByEight"
    }

    
    
    public enum State_getUser: String { 
        case active = "active"
        case deleted = "deleted"
    }

    
    /**
     Get user.
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter integrationPresenceSource: (query) Gets an integration presence for a user instead of their default. (optional)
     - parameter state: (query) Search for a user with this state (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(userId: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUser? = nil, state: State_getUser? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserWithRequestBuilder(userId: userId, expand: expand, integrationPresenceSource: integrationPresenceSource, state: state)
        requestBuilder.execute { (response: Response<User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get user.
     - GET /api/v2/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "acdAutoAnswer" : true,
  "routingStatus" : "{}",
  "title" : "title",
  "division" : "{}",
  "authorization" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "station" : "{}",
  "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "preferredName" : "preferredName",
  "department" : "department",
  "presence" : "{}",
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+00:00"
  },
  "email" : "email",
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "employerInfo" : {
    "employeeType" : "employeeType",
    "dateHire" : "dateHire",
    "employeeId" : "employeeId",
    "officialName" : "officialName"
  },
  "languages" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "conversationSummary" : "{}",
  "groups" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "biography" : {
    "education" : [ {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    }, {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    } ],
    "hobbies" : [ "hobbies", "hobbies" ],
    "biography" : "biography",
    "interests" : [ "interests", "interests" ],
    "spouse" : "spouse"
  },
  "team" : "{}",
  "certifications" : [ "certifications", "certifications" ],
  "version" : 6,
  "outOfOffice" : "{}",
  "languagePreference" : "languagePreference",
  "profileSkills" : [ "profileSkills", "profileSkills" ],
  "chat" : {
    "jabberId" : "jabberId"
  },
  "name" : "name",
  "integrationPresence" : "{}",
  "locations" : [ {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  }, {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  } ],
  "username" : "username",
  "geolocation" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter integrationPresenceSource: (query) Gets an integration presence for a user instead of their default. (optional)
     - parameter state: (query) Search for a user with this state (optional)

     - returns: RequestBuilder<User> 
     */
    open class func getUserWithRequestBuilder(userId: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUser? = nil, state: State_getUser? = nil) -> RequestBuilder<User> {        
        var path = "/api/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand, 
            "integrationPresenceSource": integrationPresenceSource?.rawValue, 
            "state": state?.rawValue
        ])

        let requestBuilder: RequestBuilder<User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get adjacents
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserAdjacents(userId: String, expand: [String]? = nil, completion: @escaping ((_ data: Adjacents?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserAdjacentsWithRequestBuilder(userId: userId, expand: expand)
        requestBuilder.execute { (response: Response<Adjacents>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get adjacents
     - GET /api/v2/users/{userId}/adjacents
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "superiors" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "siblings" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "directReports" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<Adjacents> 
     */
    open class func getUserAdjacentsWithRequestBuilder(userId: String, expand: [String]? = nil) -> RequestBuilder<Adjacents> {        
        var path = "/api/v2/users/{userId}/adjacents"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<Adjacents>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a user's CallForwarding
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserCallforwarding(userId: String, completion: @escaping ((_ data: CallForwarding?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserCallforwardingWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<CallForwarding>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a user's CallForwarding
     - GET /api/v2/users/{userId}/callforwarding
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "phoneNumber" : "phoneNumber",
  "voicemail" : "PURECLOUD",
  "calls" : [ {
    "targets" : [ {
      "type" : "STATION",
      "value" : "value"
    }, {
      "type" : "STATION",
      "value" : "value"
    } ]
  }, {
    "targets" : [ {
      "type" : "STATION",
      "value" : "value"
    }, {
      "type" : "STATION",
      "value" : "value"
    } ]
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "user" : {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  },
  "enabled" : true
}, statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<CallForwarding> 
     */
    open class func getUserCallforwardingWithRequestBuilder(userId: String) -> RequestBuilder<CallForwarding> {        
        var path = "/api/v2/users/{userId}/callforwarding"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallForwarding>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get direct reports
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserDirectreports(userId: String, expand: [String]? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserDirectreportsWithRequestBuilder(userId: userId, expand: expand)
        requestBuilder.execute { (response: Response<[User]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get direct reports
     - GET /api/v2/users/{userId}/directreports
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "acdAutoAnswer" : true,
  "routingStatus" : "{}",
  "title" : "title",
  "division" : "{}",
  "authorization" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "station" : "{}",
  "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "preferredName" : "preferredName",
  "department" : "department",
  "presence" : "{}",
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+00:00"
  },
  "email" : "email",
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "employerInfo" : {
    "employeeType" : "employeeType",
    "dateHire" : "dateHire",
    "employeeId" : "employeeId",
    "officialName" : "officialName"
  },
  "languages" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "conversationSummary" : "{}",
  "groups" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "biography" : {
    "education" : [ {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    }, {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    } ],
    "hobbies" : [ "hobbies", "hobbies" ],
    "biography" : "biography",
    "interests" : [ "interests", "interests" ],
    "spouse" : "spouse"
  },
  "team" : "{}",
  "certifications" : [ "certifications", "certifications" ],
  "version" : 6,
  "outOfOffice" : "{}",
  "languagePreference" : "languagePreference",
  "profileSkills" : [ "profileSkills", "profileSkills" ],
  "chat" : {
    "jabberId" : "jabberId"
  },
  "name" : "name",
  "integrationPresence" : "{}",
  "locations" : [ {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  }, {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  } ],
  "username" : "username",
  "geolocation" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getUserDirectreportsWithRequestBuilder(userId: String, expand: [String]? = nil) -> RequestBuilder<[User]> {        
        var path = "/api/v2/users/{userId}/directreports"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<[User]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     Deprecated; will be revived with new contract
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserFavorites(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil, completion: @escaping ((_ data: UserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserFavoritesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, expand: expand)
        requestBuilder.execute { (response: Response<UserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Deprecated; will be revived with new contract
     - GET /api/v2/users/{userId}/favorites
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<UserEntityListing> 
     */
    open class func getUserFavoritesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: String? = nil, expand: [String]? = nil) -> RequestBuilder<UserEntityListing> {        
        var path = "/api/v2/users/{userId}/favorites"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder, 
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<UserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a user's Geolocation
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserGeolocation(userId: String, clientId: String, completion: @escaping ((_ data: Geolocation?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserGeolocationWithRequestBuilder(userId: userId, clientId: clientId)
        requestBuilder.execute { (response: Response<Geolocation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a user's Geolocation
     - GET /api/v2/users/{userId}/geolocations/{clientId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "city" : "city",
  "latitude" : 0.8008281904610115,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "locations" : [ {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  }, {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  } ],
  "id" : "id",
  "type" : "type",
  "region" : "region",
  "primary" : true,
  "longitude" : 6.027456183070403
}, statusCode=200}]
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 

     - returns: RequestBuilder<Geolocation> 
     */
    open class func getUserGeolocationWithRequestBuilder(userId: String, clientId: String) -> RequestBuilder<Geolocation> {        
        var path = "/api/v2/users/{userId}/geolocations/{clientId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Geolocation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a OutOfOffice
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserOutofoffice(userId: String, completion: @escaping ((_ data: OutOfOffice?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserOutofofficeWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<OutOfOffice>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a OutOfOffice
     - GET /api/v2/users/{userId}/outofoffice
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "endDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "active" : true,
  "id" : "id",
  "user" : {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  },
  "startDate" : "2000-01-23T04:56:07.000+00:00",
  "indefinite" : true
}, statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<OutOfOffice> 
     */
    open class func getUserOutofofficeWithRequestBuilder(userId: String) -> RequestBuilder<OutOfOffice> {        
        var path = "/api/v2/users/{userId}/outofoffice"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutOfOffice>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum IntegrationPresenceSource_getUserProfile: String { 
        case microsoftTeams = "MicrosoftTeams"
        case zoomPhone = "ZoomPhone"
        case eightByEight = "EightByEight"
    }

    
    /**
     Get user profile
     
     - parameter userId: (path) userId 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter integrationPresenceSource: (query) Gets an integration presence for a user instead of their default. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserProfile(userId: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUserProfile? = nil, completion: @escaping ((_ data: UserProfile?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserProfileWithRequestBuilder(userId: userId, expand: expand, integrationPresenceSource: integrationPresenceSource)
        requestBuilder.execute { (response: Response<UserProfile>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get user profile
     - GET /api/v2/users/{userId}/profile
     - This api has been deprecated. Use api/v2/users instead
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "expands" : "{}",
  "version" : 0
}, statusCode=200}]
     
     - parameter userId: (path) userId 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter integrationPresenceSource: (query) Gets an integration presence for a user instead of their default. (optional)

     - returns: RequestBuilder<UserProfile> 
     */
    open class func getUserProfileWithRequestBuilder(userId: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUserProfile? = nil) -> RequestBuilder<UserProfile> {        
        var path = "/api/v2/users/{userId}/profile"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand, 
            "integrationPresenceSource": integrationPresenceSource?.rawValue
        ])

        let requestBuilder: RequestBuilder<UserProfile>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     List profile skills for a user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserProfileskills(userId: String, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserProfileskillsWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List profile skills for a user
     - GET /api/v2/users/{userId}/profileskills
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example="", statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<[String]> 
     */
    open class func getUserProfileskillsWithRequestBuilder(userId: String) -> RequestBuilder<[String]> {        
        var path = "/api/v2/users/{userId}/profileskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    /**
     Get queues for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter joined: (query) Is joined to the queue (optional)
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserQueues(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, joined: Bool? = nil, divisionId: [String]? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserQueuesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, joined: joined, divisionId: divisionId)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get queues for user
     - GET /api/v2/users/{userId}/queues
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "pageCount" : 7,
  "pageNumber" : 5,
  "entities" : [ {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  }, {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 5,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter joined: (query) Is joined to the queue (optional)
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func getUserQueuesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, joined: Bool? = nil, divisionId: [String]? = nil) -> RequestBuilder<UserQueueEntityListing> {        
        var path = "/api/v2/users/{userId}/queues"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "joined": joined, 
            "divisionId": divisionId
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Returns a listing of roles and permissions for a user.
     
     - parameter subjectId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoles(subjectId: String, completion: @escaping ((_ data: UserAuthorization?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRolesWithRequestBuilder(subjectId: subjectId)
        requestBuilder.execute { (response: Response<UserAuthorization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Returns a listing of roles and permissions for a user.
     - GET /api/v2/users/{subjectId}/roles
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unusedRoles" : [ {
    "name" : "name",
    "id" : "id"
  }, {
    "name" : "name",
    "id" : "id"
  } ],
  "permissions" : [ "permissions", "permissions" ],
  "permissionPolicies" : [ {
    "policyDescription" : "policyDescription",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "SCALAR",
        "value" : "value"
      }, {
        "type" : "SCALAR",
        "value" : "value"
      } ],
      "variableName" : "variableName",
      "conjunction" : "AND",
      "terms" : [ null, null ],
      "operator" : "EQ"
    },
    "actionSetKey" : "actionSetKey",
    "namedResources" : [ "namedResources", "namedResources" ],
    "policyName" : "policyName",
    "entityName" : "entityName",
    "domain" : "domain",
    "allowConditions" : true,
    "id" : "id",
    "resourceCondition" : "resourceCondition",
    "actionSet" : [ "actionSet", "actionSet" ]
  }, {
    "policyDescription" : "policyDescription",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "SCALAR",
        "value" : "value"
      }, {
        "type" : "SCALAR",
        "value" : "value"
      } ],
      "variableName" : "variableName",
      "conjunction" : "AND",
      "terms" : [ null, null ],
      "operator" : "EQ"
    },
    "actionSetKey" : "actionSetKey",
    "namedResources" : [ "namedResources", "namedResources" ],
    "policyName" : "policyName",
    "entityName" : "entityName",
    "domain" : "domain",
    "allowConditions" : true,
    "id" : "id",
    "resourceCondition" : "resourceCondition",
    "actionSet" : [ "actionSet", "actionSet" ]
  } ],
  "roles" : [ {
    "name" : "name",
    "id" : "id"
  }, {
    "name" : "name",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter subjectId: (path) User ID 

     - returns: RequestBuilder<UserAuthorization> 
     */
    open class func getUserRolesWithRequestBuilder(subjectId: String) -> RequestBuilder<UserAuthorization> {        
        var path = "/api/v2/users/{subjectId}/roles"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuthorization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum SortOrder_getUserRoutinglanguages: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    /**
     List routing language for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutinglanguages(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutinglanguages? = nil, completion: @escaping ((_ data: UserLanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutinglanguagesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserLanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List routing language for user
     - GET /api/v2/users/{userId}/routinglanguages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<UserLanguageEntityListing> 
     */
    open class func getUserRoutinglanguagesWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutinglanguages? = nil) -> RequestBuilder<UserLanguageEntityListing> {        
        var path = "/api/v2/users/{userId}/routinglanguages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<UserLanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum SortOrder_getUserRoutingskills: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    /**
     List routing skills for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutingskills(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutingskills? = nil, completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutingskillsWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List routing skills for user
     - GET /api/v2/users/{userId}/routingskills
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func getUserRoutingskillsWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUserRoutingskills? = nil) -> RequestBuilder<UserSkillEntityListing> {        
        var path = "/api/v2/users/{userId}/routingskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue
        ])

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Fetch the routing status of a user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserRoutingstatus(userId: String, completion: @escaping ((_ data: RoutingStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserRoutingstatusWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<RoutingStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Fetch the routing status of a user
     - GET /api/v2/users/{userId}/routingstatus
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "startTime" : "2000-01-23T04:56:07.000+00:00",
  "userId" : "userId",
  "status" : "OFF_QUEUE"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<RoutingStatus> 
     */
    open class func getUserRoutingstatusWithRequestBuilder(userId: String) -> RequestBuilder<RoutingStatus> {        
        var path = "/api/v2/users/{userId}/routingstatus"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Get skill groups for a user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter after: (query) The cursor that points to the next page (optional)
     - parameter before: (query) The cursor that points to the previous page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserSkillgroups(userId: String, pageSize: Int? = nil, after: String? = nil, before: String? = nil, completion: @escaping ((_ data: UserSkillGroupEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserSkillgroupsWithRequestBuilder(userId: userId, pageSize: pageSize, after: after, before: before)
        requestBuilder.execute { (response: Response<UserSkillGroupEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get skill groups for a user
     - GET /api/v2/users/{userId}/skillgroups
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "skillConditions" : [ {
      "languageSkillConditions" : [ {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "routingSkillConditions" : [ {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "operation" : "And"
    }, {
      "languageSkillConditions" : [ {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "routingSkillConditions" : [ {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "operation" : "And"
    } ],
    "status" : "InProgress"
  }, {
    "division" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "skillConditions" : [ {
      "languageSkillConditions" : [ {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "routingSkillConditions" : [ {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "operation" : "And"
    }, {
      "languageSkillConditions" : [ {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "languageSkill" : "English-Written",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "routingSkillConditions" : [ {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      }, {
        "comparator" : "EqualTo",
        "routingSkill" : "routingSkill",
        "childConditions" : [ null, null ],
        "proficiency" : 5
      } ],
      "operation" : "And"
    } ],
    "status" : "InProgress"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter after: (query) The cursor that points to the next page (optional)
     - parameter before: (query) The cursor that points to the previous page (optional)

     - returns: RequestBuilder<UserSkillGroupEntityListing> 
     */
    open class func getUserSkillgroupsWithRequestBuilder(userId: String, pageSize: Int? = nil, after: String? = nil, before: String? = nil) -> RequestBuilder<UserSkillGroupEntityListing> {        
        var path = "/api/v2/users/{userId}/skillgroups"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "after": after, 
            "before": before
        ])

        let requestBuilder: RequestBuilder<UserSkillGroupEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get user state information.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserState(userId: String, completion: @escaping ((_ data: UserState?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserStateWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<UserState>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get user state information.
     - GET /api/v2/users/{userId}/state
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "stateChangeReason" : "Voluntary",
  "stateChangeDate" : "2000-01-23T04:56:07.000+00:00",
  "state" : "active",
  "version" : 0
}, statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<UserState> 
     */
    open class func getUserStateWithRequestBuilder(userId: String) -> RequestBuilder<UserState> {        
        var path = "/api/v2/users/{userId}/state"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserState>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get station information for user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserStation(userId: String, completion: @escaping ((_ data: UserStations?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserStationWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<UserStations>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get station information for user
     - GET /api/v2/users/{userId}/station
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "defaultStation" : "{}",
  "lastAssociatedStation" : "{}",
  "associatedStation" : "{}",
  "effectiveStation" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<UserStations> 
     */
    open class func getUserStationWithRequestBuilder(userId: String) -> RequestBuilder<UserStations> {        
        var path = "/api/v2/users/{userId}/station"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserStations>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get superiors
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserSuperiors(userId: String, expand: [String]? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserSuperiorsWithRequestBuilder(userId: userId, expand: expand)
        requestBuilder.execute { (response: Response<[User]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get superiors
     - GET /api/v2/users/{userId}/superiors
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "acdAutoAnswer" : true,
  "routingStatus" : "{}",
  "title" : "title",
  "division" : "{}",
  "authorization" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "station" : "{}",
  "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "preferredName" : "preferredName",
  "department" : "department",
  "presence" : "{}",
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+00:00"
  },
  "email" : "email",
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "employerInfo" : {
    "employeeType" : "employeeType",
    "dateHire" : "dateHire",
    "employeeId" : "employeeId",
    "officialName" : "officialName"
  },
  "languages" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "conversationSummary" : "{}",
  "groups" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "biography" : {
    "education" : [ {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    }, {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    } ],
    "hobbies" : [ "hobbies", "hobbies" ],
    "biography" : "biography",
    "interests" : [ "interests", "interests" ],
    "spouse" : "spouse"
  },
  "team" : "{}",
  "certifications" : [ "certifications", "certifications" ],
  "version" : 6,
  "outOfOffice" : "{}",
  "languagePreference" : "languagePreference",
  "profileSkills" : [ "profileSkills", "profileSkills" ],
  "chat" : {
    "jabberId" : "jabberId"
  },
  "name" : "name",
  "integrationPresence" : "{}",
  "locations" : [ {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  }, {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  } ],
  "username" : "username",
  "geolocation" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func getUserSuperiorsWithRequestBuilder(userId: String, expand: [String]? = nil) -> RequestBuilder<[User]> {        
        var path = "/api/v2/users/{userId}/superiors"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand
        ])

        let requestBuilder: RequestBuilder<[User]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     List the organizations that have authorized/trusted the user.
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserTrustors(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil, completion: @escaping ((_ data: TrustorEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserTrustorsWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber)
        requestBuilder.execute { (response: Response<TrustorEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List the organizations that have authorized/trusted the user.
     - GET /api/v2/users/{userId}/trustors
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "authorization" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "organization" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "enabled" : true
  }, {
    "authorization" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "organization" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "enabled" : true
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)

     - returns: RequestBuilder<TrustorEntityListing> 
     */
    open class func getUserTrustorsWithRequestBuilder(userId: String, pageSize: Int? = nil, pageNumber: Int? = nil) -> RequestBuilder<TrustorEntityListing> {        
        var path = "/api/v2/users/{userId}/trustors"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<TrustorEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get a list of verifiers
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserVerifiers(userId: String, completion: @escaping ((_ data: VerifierEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUserVerifiersWithRequestBuilder(userId: userId)
        requestBuilder.execute { (response: Response<VerifierEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of verifiers
     - GET /api/v2/users/{userId}/verifiers
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "default" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "enabled" : true
  }, {
    "default" : true,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "enabled" : true
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<VerifierEntityListing> 
     */
    open class func getUserVerifiersWithRequestBuilder(userId: String) -> RequestBuilder<VerifierEntityListing> {        
        var path = "/api/v2/users/{userId}/verifiers"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<VerifierEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum SortOrder_getUsers: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    
    public enum IntegrationPresenceSource_getUsers: String { 
        case microsoftTeams = "MicrosoftTeams"
        case zoomPhone = "ZoomPhone"
        case eightByEight = "EightByEight"
    }

    
    
    public enum State_getUsers: String { 
        case active = "active"
        case inactive = "inactive"
        case deleted = "deleted"
        case any = "any"
    }

    
    /**
     Get the list of available users.
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter _id: (query) A list of user IDs to fetch by bulk (optional)
     - parameter jabberId: (query) A list of jabberIds to fetch by bulk (cannot be used with the \&quot;id\&quot; parameter) (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter integrationPresenceSource: (query) Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an \&quot;expand\&quot;. When using this parameter the maximum number of users that can be returned is 100. (optional)
     - parameter state: (query) Only list users of this state (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jabberId: [String]? = nil, sortOrder: SortOrder_getUsers? = nil, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsers? = nil, state: State_getUsers? = nil, completion: @escaping ((_ data: UserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, _id: _id, jabberId: jabberId, sortOrder: sortOrder, expand: expand, integrationPresenceSource: integrationPresenceSource, state: state)
        requestBuilder.execute { (response: Response<UserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the list of available users.
     - GET /api/v2/users
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter _id: (query) A list of user IDs to fetch by bulk (optional)
     - parameter jabberId: (query) A list of jabberIds to fetch by bulk (cannot be used with the \&quot;id\&quot; parameter) (optional)
     - parameter sortOrder: (query) Ascending or descending sort order (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter integrationPresenceSource: (query) Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an \&quot;expand\&quot;. When using this parameter the maximum number of users that can be returned is 100. (optional)
     - parameter state: (query) Only list users of this state (optional)

     - returns: RequestBuilder<UserEntityListing> 
     */
    open class func getUsersWithRequestBuilder(pageSize: Int? = nil, pageNumber: Int? = nil, _id: [String]? = nil, jabberId: [String]? = nil, sortOrder: SortOrder_getUsers? = nil, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsers? = nil, state: State_getUsers? = nil) -> RequestBuilder<UserEntityListing> {        
        let path = "/api/v2/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "id": _id, 
            "jabberId": jabberId, 
            "sortOrder": sortOrder?.rawValue, 
            "expand": expand, 
            "integrationPresenceSource": integrationPresenceSource?.rawValue, 
            "state": state?.rawValue
        ])

        let requestBuilder: RequestBuilder<UserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    
    public enum Overdue_getUsersDevelopmentActivities: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    public enum Pass_getUsersDevelopmentActivities: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    public enum SortOrder_getUsersDevelopmentActivities: String { 
        case asc = "Asc"
        case desc = "Desc"
    }

    
    
    
    
    /**
     Get list of Development Activities
     
     - parameter userId: (query) Specifies the list of user IDs to be queried, up to 100 user IDs. It searches for any relationship for the userId. (optional)
     - parameter moduleId: (query) Specifies the ID of the learning module. (optional)
     - parameter interval: (query) Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned (optional)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) activities are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all activities are returned (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc) (optional)
     - parameter types: (query) Specifies the activity types. (optional)
     - parameter statuses: (query) Specifies the activity statuses to filter by (optional)
     - parameter relationship: (query) Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersDevelopmentActivities(userId: [String]? = nil, moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getUsersDevelopmentActivities? = nil, pass: Pass_getUsersDevelopmentActivities? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUsersDevelopmentActivities? = nil, types: [String]? = nil, statuses: [String]? = nil, relationship: [String]? = nil, completion: @escaping ((_ data: DevelopmentActivityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersDevelopmentActivitiesWithRequestBuilder(userId: userId, moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pass: pass, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, types: types, statuses: statuses, relationship: relationship)
        requestBuilder.execute { (response: Response<DevelopmentActivityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of Development Activities
     - GET /api/v2/users/development/activities
     - Either moduleId or userId is required. Results are filtered based on the applicable permissions.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "dateDue" : "2000-01-23T04:56:07.000+00:00",
    "isPassed" : true,
    "archivalMode" : "Graceful",
    "isModuleArchived" : true,
    "attendees" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "type" : "Informational",
    "facilitator" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "status" : "Planned"
  }, {
    "dateDue" : "2000-01-23T04:56:07.000+00:00",
    "isPassed" : true,
    "archivalMode" : "Graceful",
    "isModuleArchived" : true,
    "attendees" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "type" : "Informational",
    "facilitator" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "status" : "Planned"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (query) Specifies the list of user IDs to be queried, up to 100 user IDs. It searches for any relationship for the userId. (optional)
     - parameter moduleId: (query) Specifies the ID of the learning module. (optional)
     - parameter interval: (query) Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned (optional)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) activities are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all activities are returned (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc) (optional)
     - parameter types: (query) Specifies the activity types. (optional)
     - parameter statuses: (query) Specifies the activity statuses to filter by (optional)
     - parameter relationship: (query) Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied. (optional)

     - returns: RequestBuilder<DevelopmentActivityListing> 
     */
    open class func getUsersDevelopmentActivitiesWithRequestBuilder(userId: [String]? = nil, moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getUsersDevelopmentActivities? = nil, pass: Pass_getUsersDevelopmentActivities? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUsersDevelopmentActivities? = nil, types: [String]? = nil, statuses: [String]? = nil, relationship: [String]? = nil) -> RequestBuilder<DevelopmentActivityListing> {        
        let path = "/api/v2/users/development/activities"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": userId, 
            "moduleId": moduleId, 
            "interval": interval, 
            "completionInterval": completionInterval, 
            "overdue": overdue?.rawValue, 
            "pass": pass?.rawValue, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "types": types, 
            "statuses": statuses, 
            "relationship": relationship
        ])

        let requestBuilder: RequestBuilder<DevelopmentActivityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum Overdue_getUsersDevelopmentActivitiesMe: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    public enum Pass_getUsersDevelopmentActivitiesMe: String { 
        case _true = "True"
        case _false = "False"
        case any = "Any"
    }

    
    
    
    
    public enum SortOrder_getUsersDevelopmentActivitiesMe: String { 
        case asc = "Asc"
        case desc = "Desc"
    }

    
    
    
    
    /**
     Get list of Development Activities for current user
     
     - parameter moduleId: (query) Specifies the ID of the learning module. (optional)
     - parameter interval: (query) Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned (optional)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) activities are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all activities are returned (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc) (optional)
     - parameter types: (query) Specifies the activity types. (optional)
     - parameter statuses: (query) Specifies the activity statuses to filter by (optional)
     - parameter relationship: (query) Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersDevelopmentActivitiesMe(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getUsersDevelopmentActivitiesMe? = nil, pass: Pass_getUsersDevelopmentActivitiesMe? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUsersDevelopmentActivitiesMe? = nil, types: [String]? = nil, statuses: [String]? = nil, relationship: [String]? = nil, completion: @escaping ((_ data: DevelopmentActivityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersDevelopmentActivitiesMeWithRequestBuilder(moduleId: moduleId, interval: interval, completionInterval: completionInterval, overdue: overdue, pass: pass, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder, types: types, statuses: statuses, relationship: relationship)
        requestBuilder.execute { (response: Response<DevelopmentActivityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get list of Development Activities for current user
     - GET /api/v2/users/development/activities/me
     - Results are filtered based on the applicable permissions.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "dateDue" : "2000-01-23T04:56:07.000+00:00",
    "isPassed" : true,
    "archivalMode" : "Graceful",
    "isModuleArchived" : true,
    "attendees" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "type" : "Informational",
    "facilitator" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "status" : "Planned"
  }, {
    "dateDue" : "2000-01-23T04:56:07.000+00:00",
    "isPassed" : true,
    "archivalMode" : "Graceful",
    "isModuleArchived" : true,
    "attendees" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "id" : "id"
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "type" : "Informational",
    "facilitator" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "isOverdue" : true,
    "isLatest" : true,
    "createdBy" : "{}",
    "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "id" : "id",
    "percentageScore" : 0.8008282,
    "status" : "Planned"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter moduleId: (query) Specifies the ID of the learning module. (optional)
     - parameter interval: (query) Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter completionInterval: (query) Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss (optional)
     - parameter overdue: (query) Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned (optional)
     - parameter pass: (query) Specifies if only the failed (pass is \&quot;False\&quot;) or passed (pass is \&quot;True\&quot;) activities are returned. If pass is \&quot;Any\&quot; or if the pass parameter is not supplied, all activities are returned (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter pageNumber: (query) Page number (optional)
     - parameter sortOrder: (query) Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc) (optional)
     - parameter types: (query) Specifies the activity types. (optional)
     - parameter statuses: (query) Specifies the activity statuses to filter by (optional)
     - parameter relationship: (query) Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied. (optional)

     - returns: RequestBuilder<DevelopmentActivityListing> 
     */
    open class func getUsersDevelopmentActivitiesMeWithRequestBuilder(moduleId: String? = nil, interval: String? = nil, completionInterval: String? = nil, overdue: Overdue_getUsersDevelopmentActivitiesMe? = nil, pass: Pass_getUsersDevelopmentActivitiesMe? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, sortOrder: SortOrder_getUsersDevelopmentActivitiesMe? = nil, types: [String]? = nil, statuses: [String]? = nil, relationship: [String]? = nil) -> RequestBuilder<DevelopmentActivityListing> {        
        let path = "/api/v2/users/development/activities/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "moduleId": moduleId, 
            "interval": interval, 
            "completionInterval": completionInterval, 
            "overdue": overdue?.rawValue, 
            "pass": pass?.rawValue, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortOrder": sortOrder?.rawValue, 
            "types": types, 
            "statuses": statuses, 
            "relationship": relationship
        ])

        let requestBuilder: RequestBuilder<DevelopmentActivityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum ModelType_getUsersDevelopmentActivity: String { 
        case informational = "Informational"
        case coaching = "Coaching"
        case assessedContent = "AssessedContent"
        case assessment = "Assessment"
        case external = "External"
    }

    
    /**
     Get a Development Activity
     
     - parameter activityId: (path) Specifies the activity ID, maps to either assignment or appointment ID 
     - parameter type: (query) Specifies the activity type. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersDevelopmentActivity(activityId: String, type: ModelType_getUsersDevelopmentActivity, completion: @escaping ((_ data: DevelopmentActivity?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersDevelopmentActivityWithRequestBuilder(activityId: activityId, type: type)
        requestBuilder.execute { (response: Response<DevelopmentActivity>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a Development Activity
     - GET /api/v2/users/development/activities/{activityId}
     - Permission not required if you are the attendee, creator or facilitator of the coaching appointment or you are the assigned user of the learning assignment.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "dateDue" : "2000-01-23T04:56:07.000+00:00",
  "isPassed" : true,
  "archivalMode" : "Graceful",
  "isModuleArchived" : true,
  "attendees" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "type" : "Informational",
  "facilitator" : "{}",
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "isOverdue" : true,
  "isLatest" : true,
  "createdBy" : "{}",
  "dateCompleted" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "id" : "id",
  "percentageScore" : 0.8008282,
  "status" : "Planned"
}, statusCode=200}]
     
     - parameter activityId: (path) Specifies the activity ID, maps to either assignment or appointment ID 
     - parameter type: (query) Specifies the activity type. 

     - returns: RequestBuilder<DevelopmentActivity> 
     */
    open class func getUsersDevelopmentActivityWithRequestBuilder(activityId: String, type: ModelType_getUsersDevelopmentActivity) -> RequestBuilder<DevelopmentActivity> {        
        var path = "/api/v2/users/development/activities/{activityId}"
        let activityIdPreEscape = "\(activityId)"
        let activityIdPostEscape = activityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{activityId}", with: activityIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type.rawValue
        ])

        let requestBuilder: RequestBuilder<DevelopmentActivity>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    public enum IntegrationPresenceSource_getUsersMe: String { 
        case microsoftTeams = "MicrosoftTeams"
        case zoomPhone = "ZoomPhone"
        case eightByEight = "EightByEight"
    }

    
    /**
     Get current user details.
     
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter integrationPresenceSource: (query) Get your presence for a given integration. This parameter will only be used when presence is provided as an \&quot;expand\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersMe(expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsersMe? = nil, completion: @escaping ((_ data: UserMe?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersMeWithRequestBuilder(expand: expand, integrationPresenceSource: integrationPresenceSource)
        requestBuilder.execute { (response: Response<UserMe>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get current user details.
     - GET /api/v2/users/me
     - This request is not valid when using the Client Credentials OAuth grant.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "date" : "{}",
  "addresses" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "orgProducts" : [ {
    "id" : "id"
  }, {
    "id" : "id"
  } ],
  "geolocationSettings" : "{}",
  "routingStatus" : "{}",
  "division" : "{}",
  "authorization" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "adjacents" : "{}",
  "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "preferredName" : "preferredName",
  "presence" : "{}",
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "locationDefinitions" : [ {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  }, {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  } ],
  "employerInfo" : {
    "employeeType" : "employeeType",
    "dateHire" : "dateHire",
    "employeeId" : "employeeId",
    "officialName" : "officialName"
  },
  "conversationSummary" : "{}",
  "version" : 0,
  "languagePreference" : "languagePreference",
  "profileSkills" : [ "profileSkills", "profileSkills" ],
  "presenceDefinitions" : [ {
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "languageLabels" : {
      "key" : "languageLabels"
    },
    "systemPresence" : "systemPresence",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "id" : "id",
    "deactivated" : true,
    "primary" : true
  }, {
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "languageLabels" : {
      "key" : "languageLabels"
    },
    "systemPresence" : "systemPresence",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
    "modifiedBy" : {
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "acdAutoAnswer" : true,
      "routingStatus" : "{}",
      "title" : "title",
      "division" : "{}",
      "authorization" : "{}",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "skillUri" : "https://openapi-generator.tech",
        "id" : "id",
        "state" : "active",
        "proficiency" : 7.061401241503109
      } ],
      "station" : "{}",
      "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
      "id" : "id",
      "state" : "active",
      "preferredName" : "preferredName",
      "department" : "department",
      "presence" : "{}",
      "lastTokenIssued" : {
        "dateIssued" : "2000-01-23T04:56:07.000+00:00"
      },
      "email" : "email",
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "employerInfo" : {
        "employeeType" : "employeeType",
        "dateHire" : "dateHire",
        "employeeId" : "employeeId",
        "officialName" : "officialName"
      },
      "languages" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id",
        "state" : "active",
        "languageUri" : "https://openapi-generator.tech",
        "proficiency" : 9.301444243932576
      } ],
      "selfUri" : "https://openapi-generator.tech",
      "conversationSummary" : "{}",
      "groups" : [ {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      }, {
        "images" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addresses" : [ {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        }, {
          "extension" : "extension",
          "address" : "address",
          "display" : "display",
          "mediaType" : "PHONE",
          "type" : "GROUPRING"
        } ],
        "visibility" : "public",
        "memberCount" : 5,
        "selfUri" : "https://openapi-generator.tech",
        "description" : "description",
        "dateModified" : "2000-01-23T04:56:07.000+00:00",
        "owners" : [ null, null ],
        "rolesEnabled" : true,
        "type" : "official",
        "version" : 2,
        "rulesVisible" : true,
        "name" : "name",
        "id" : "id",
        "state" : "active"
      } ],
      "primaryContactInfo" : [ {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      }, {
        "extension" : "extension",
        "address" : "address",
        "countryCode" : "countryCode",
        "display" : "display",
        "integration" : "microsoftteams",
        "mediaType" : "PHONE",
        "type" : "PRIMARY"
      } ],
      "biography" : {
        "education" : [ {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        }, {
          "notes" : "notes",
          "school" : "school",
          "dateStart" : "2000-01-23",
          "dateEnd" : "2000-01-23",
          "fieldOfStudy" : "fieldOfStudy"
        } ],
        "hobbies" : [ "hobbies", "hobbies" ],
        "biography" : "biography",
        "interests" : [ "interests", "interests" ],
        "spouse" : "spouse"
      },
      "team" : "{}",
      "certifications" : [ "certifications", "certifications" ],
      "version" : 6,
      "outOfOffice" : "{}",
      "languagePreference" : "languagePreference",
      "profileSkills" : [ "profileSkills", "profileSkills" ],
      "chat" : {
        "jabberId" : "jabberId"
      },
      "name" : "name",
      "integrationPresence" : "{}",
      "locations" : [ {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      }, {
        "notes" : "notes",
        "coordinates" : {
          "key" : 1.4658129805029452
        },
        "locationDefinition" : {
          "images" : "images",
          "address" : {
            "zipcode" : "zipcode",
            "country" : "country",
            "city" : "city",
            "street1" : "street1",
            "countryName" : "countryName",
            "state" : "state",
            "street2" : "street2"
          },
          "notes" : "notes",
          "floorplanImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "addressVerificationDetails" : "{}",
          "selfUri" : "https://openapi-generator.tech",
          "profileImage" : [ {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          }, {
            "imageUri" : "imageUri",
            "resolution" : "resolution"
          } ],
          "emergencyNumber" : "{}",
          "version" : 5,
          "path" : [ "path", "path" ],
          "addressStored" : true,
          "name" : "name",
          "id" : "id",
          "contactUser" : "{}",
          "state" : "active",
          "addressVerified" : true
        },
        "id" : "id",
        "floorplanId" : "floorplanId"
      } ],
      "username" : "username",
      "geolocation" : "{}"
    },
    "id" : "id",
    "deactivated" : true,
    "primary" : true
  } ],
  "name" : "name",
  "favorites" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "directReports" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "acdAutoAnswer" : true,
  "title" : "title",
  "orgAuthorization" : [ {
    "default" : true,
    "userCount" : 9,
    "unusedPermissions" : [ "unusedPermissions", "unusedPermissions" ],
    "permissions" : [ "permissions", "permissions" ],
    "permissionPolicies" : [ {
      "policyDescription" : "policyDescription",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "SCALAR",
          "user" : {
            "addresses" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "acdAutoAnswer" : true,
            "routingStatus" : "{}",
            "title" : "title",
            "division" : "{}",
            "authorization" : "{}",
            "skills" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            } ],
            "station" : "{}",
            "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
            "id" : "id",
            "state" : "active",
            "preferredName" : "preferredName",
            "department" : "department",
            "presence" : "{}",
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+00:00"
            },
            "email" : "email",
            "images" : [ {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            }, {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            } ],
            "employerInfo" : {
              "employeeType" : "employeeType",
              "dateHire" : "dateHire",
              "employeeId" : "employeeId",
              "officialName" : "officialName"
            },
            "languages" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            } ],
            "selfUri" : "https://openapi-generator.tech",
            "conversationSummary" : "{}",
            "groups" : [ {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            }, {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              }, {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              } ],
              "hobbies" : [ "hobbies", "hobbies" ],
              "biography" : "biography",
              "interests" : [ "interests", "interests" ],
              "spouse" : "spouse"
            },
            "team" : "{}",
            "certifications" : [ "certifications", "certifications" ],
            "version" : 6,
            "outOfOffice" : "{}",
            "languagePreference" : "languagePreference",
            "profileSkills" : [ "profileSkills", "profileSkills" ],
            "chat" : {
              "jabberId" : "jabberId"
            },
            "name" : "name",
            "integrationPresence" : "{}",
            "locations" : [ {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            }, {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            } ],
            "username" : "username",
            "geolocation" : "{}"
          },
          "value" : "value",
          "queue" : {
            "peerId" : "peerId",
            "conditionalGroupRouting" : "{}",
            "enableAudioMonitoring" : true,
            "mediaSettings" : "{}",
            "enableManualAssignment" : true,
            "description" : "description",
            "onHoldPrompt" : "{}",
            "emailInQueueFlow" : "{}",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            }, {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            } ],
            "skillEvaluationMethod" : "NONE",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+00:00",
                "division" : "{}",
                "features" : "{}",
                "versionId" : "versionId",
                "createdDate" : "2000-01-23T04:56:07.000+00:00",
                "pages" : [ {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                }, {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "startPageName",
                "name" : "name",
                "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                "startPageId" : "startPageId",
                "id" : "id",
                "publishedDate" : "2000-01-23T04:56:07.000+00:00"
              }
            },
            "division" : "{}",
            "suppressInQueueCallRecording" : true,
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "queueFlow" : "{}",
            "callingPartyNumber" : "callingPartyNumber",
            "userMemberCount" : 6,
            "modifiedBy" : "modifiedBy",
            "id" : "id",
            "memberGroups" : [ {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            }, {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            } ],
            "scoringMethod" : "TimestampAndPriority",
            "joinedMemberCount" : 1,
            "messageInQueueFlow" : "{}",
            "callingPartyName" : "callingPartyName",
            "acwSettings" : "{}",
            "memberCount" : 0,
            "selfUri" : "https://openapi-generator.tech",
            "dateModified" : "2000-01-23T04:56:07.000+00:00",
            "whisperPrompt" : "{}",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "signature" : "{}",
                "replyEmailAddress" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "pattern" : "pattern",
                "language" : "{}",
                "autoBcc" : [ {
                  "name" : "name",
                  "email" : "email"
                }, {
                  "name" : "name",
                  "email" : "email"
                } ],
                "priority" : 7,
                "fromEmail" : "fromEmail",
                "skills" : [ {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                }, {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                } ],
                "allowMultipleActions" : true,
                "name" : "name",
                "fromName" : "fromName",
                "id" : "id",
                "historyInclusion" : "Include",
                "queue" : "{}",
                "flow" : "{}",
                "spamFlow" : "{}"
              },
              "domain" : {
                "selfUri" : "https://openapi-generator.tech",
                "name" : "name",
                "id" : "id"
              }
            },
            "bullseye" : "{}",
            "outboundMessagingAddresses" : "{}",
            "createdBy" : "createdBy",
            "directRouting" : "{}",
            "name" : "name",
            "agentOwnedRouting" : "{}"
          }
        }, {
          "type" : "SCALAR",
          "user" : {
            "addresses" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "acdAutoAnswer" : true,
            "routingStatus" : "{}",
            "title" : "title",
            "division" : "{}",
            "authorization" : "{}",
            "skills" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            } ],
            "station" : "{}",
            "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
            "id" : "id",
            "state" : "active",
            "preferredName" : "preferredName",
            "department" : "department",
            "presence" : "{}",
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+00:00"
            },
            "email" : "email",
            "images" : [ {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            }, {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            } ],
            "employerInfo" : {
              "employeeType" : "employeeType",
              "dateHire" : "dateHire",
              "employeeId" : "employeeId",
              "officialName" : "officialName"
            },
            "languages" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            } ],
            "selfUri" : "https://openapi-generator.tech",
            "conversationSummary" : "{}",
            "groups" : [ {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            }, {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              }, {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              } ],
              "hobbies" : [ "hobbies", "hobbies" ],
              "biography" : "biography",
              "interests" : [ "interests", "interests" ],
              "spouse" : "spouse"
            },
            "team" : "{}",
            "certifications" : [ "certifications", "certifications" ],
            "version" : 6,
            "outOfOffice" : "{}",
            "languagePreference" : "languagePreference",
            "profileSkills" : [ "profileSkills", "profileSkills" ],
            "chat" : {
              "jabberId" : "jabberId"
            },
            "name" : "name",
            "integrationPresence" : "{}",
            "locations" : [ {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            }, {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            } ],
            "username" : "username",
            "geolocation" : "{}"
          },
          "value" : "value",
          "queue" : {
            "peerId" : "peerId",
            "conditionalGroupRouting" : "{}",
            "enableAudioMonitoring" : true,
            "mediaSettings" : "{}",
            "enableManualAssignment" : true,
            "description" : "description",
            "onHoldPrompt" : "{}",
            "emailInQueueFlow" : "{}",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            }, {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            } ],
            "skillEvaluationMethod" : "NONE",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+00:00",
                "division" : "{}",
                "features" : "{}",
                "versionId" : "versionId",
                "createdDate" : "2000-01-23T04:56:07.000+00:00",
                "pages" : [ {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                }, {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "startPageName",
                "name" : "name",
                "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                "startPageId" : "startPageId",
                "id" : "id",
                "publishedDate" : "2000-01-23T04:56:07.000+00:00"
              }
            },
            "division" : "{}",
            "suppressInQueueCallRecording" : true,
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "queueFlow" : "{}",
            "callingPartyNumber" : "callingPartyNumber",
            "userMemberCount" : 6,
            "modifiedBy" : "modifiedBy",
            "id" : "id",
            "memberGroups" : [ {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            }, {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            } ],
            "scoringMethod" : "TimestampAndPriority",
            "joinedMemberCount" : 1,
            "messageInQueueFlow" : "{}",
            "callingPartyName" : "callingPartyName",
            "acwSettings" : "{}",
            "memberCount" : 0,
            "selfUri" : "https://openapi-generator.tech",
            "dateModified" : "2000-01-23T04:56:07.000+00:00",
            "whisperPrompt" : "{}",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "signature" : "{}",
                "replyEmailAddress" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "pattern" : "pattern",
                "language" : "{}",
                "autoBcc" : [ {
                  "name" : "name",
                  "email" : "email"
                }, {
                  "name" : "name",
                  "email" : "email"
                } ],
                "priority" : 7,
                "fromEmail" : "fromEmail",
                "skills" : [ {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                }, {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                } ],
                "allowMultipleActions" : true,
                "name" : "name",
                "fromName" : "fromName",
                "id" : "id",
                "historyInclusion" : "Include",
                "queue" : "{}",
                "flow" : "{}",
                "spamFlow" : "{}"
              },
              "domain" : {
                "selfUri" : "https://openapi-generator.tech",
                "name" : "name",
                "id" : "id"
              }
            },
            "bullseye" : "{}",
            "outboundMessagingAddresses" : "{}",
            "createdBy" : "createdBy",
            "directRouting" : "{}",
            "name" : "name",
            "agentOwnedRouting" : "{}"
          }
        } ],
        "variableName" : "variableName",
        "conjunction" : "AND",
        "terms" : [ null, null ],
        "operator" : "EQ"
      },
      "namedResources" : [ "namedResources", "namedResources" ],
      "policyName" : "policyName",
      "entityName" : "entityName",
      "domain" : "domain",
      "allowConditions" : true,
      "actionSet" : [ "actionSet", "actionSet" ]
    }, {
      "policyDescription" : "policyDescription",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "SCALAR",
          "user" : {
            "addresses" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "acdAutoAnswer" : true,
            "routingStatus" : "{}",
            "title" : "title",
            "division" : "{}",
            "authorization" : "{}",
            "skills" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            } ],
            "station" : "{}",
            "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
            "id" : "id",
            "state" : "active",
            "preferredName" : "preferredName",
            "department" : "department",
            "presence" : "{}",
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+00:00"
            },
            "email" : "email",
            "images" : [ {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            }, {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            } ],
            "employerInfo" : {
              "employeeType" : "employeeType",
              "dateHire" : "dateHire",
              "employeeId" : "employeeId",
              "officialName" : "officialName"
            },
            "languages" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            } ],
            "selfUri" : "https://openapi-generator.tech",
            "conversationSummary" : "{}",
            "groups" : [ {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            }, {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              }, {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              } ],
              "hobbies" : [ "hobbies", "hobbies" ],
              "biography" : "biography",
              "interests" : [ "interests", "interests" ],
              "spouse" : "spouse"
            },
            "team" : "{}",
            "certifications" : [ "certifications", "certifications" ],
            "version" : 6,
            "outOfOffice" : "{}",
            "languagePreference" : "languagePreference",
            "profileSkills" : [ "profileSkills", "profileSkills" ],
            "chat" : {
              "jabberId" : "jabberId"
            },
            "name" : "name",
            "integrationPresence" : "{}",
            "locations" : [ {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            }, {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            } ],
            "username" : "username",
            "geolocation" : "{}"
          },
          "value" : "value",
          "queue" : {
            "peerId" : "peerId",
            "conditionalGroupRouting" : "{}",
            "enableAudioMonitoring" : true,
            "mediaSettings" : "{}",
            "enableManualAssignment" : true,
            "description" : "description",
            "onHoldPrompt" : "{}",
            "emailInQueueFlow" : "{}",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            }, {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            } ],
            "skillEvaluationMethod" : "NONE",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+00:00",
                "division" : "{}",
                "features" : "{}",
                "versionId" : "versionId",
                "createdDate" : "2000-01-23T04:56:07.000+00:00",
                "pages" : [ {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                }, {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "startPageName",
                "name" : "name",
                "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                "startPageId" : "startPageId",
                "id" : "id",
                "publishedDate" : "2000-01-23T04:56:07.000+00:00"
              }
            },
            "division" : "{}",
            "suppressInQueueCallRecording" : true,
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "queueFlow" : "{}",
            "callingPartyNumber" : "callingPartyNumber",
            "userMemberCount" : 6,
            "modifiedBy" : "modifiedBy",
            "id" : "id",
            "memberGroups" : [ {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            }, {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            } ],
            "scoringMethod" : "TimestampAndPriority",
            "joinedMemberCount" : 1,
            "messageInQueueFlow" : "{}",
            "callingPartyName" : "callingPartyName",
            "acwSettings" : "{}",
            "memberCount" : 0,
            "selfUri" : "https://openapi-generator.tech",
            "dateModified" : "2000-01-23T04:56:07.000+00:00",
            "whisperPrompt" : "{}",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "signature" : "{}",
                "replyEmailAddress" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "pattern" : "pattern",
                "language" : "{}",
                "autoBcc" : [ {
                  "name" : "name",
                  "email" : "email"
                }, {
                  "name" : "name",
                  "email" : "email"
                } ],
                "priority" : 7,
                "fromEmail" : "fromEmail",
                "skills" : [ {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                }, {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                } ],
                "allowMultipleActions" : true,
                "name" : "name",
                "fromName" : "fromName",
                "id" : "id",
                "historyInclusion" : "Include",
                "queue" : "{}",
                "flow" : "{}",
                "spamFlow" : "{}"
              },
              "domain" : {
                "selfUri" : "https://openapi-generator.tech",
                "name" : "name",
                "id" : "id"
              }
            },
            "bullseye" : "{}",
            "outboundMessagingAddresses" : "{}",
            "createdBy" : "createdBy",
            "directRouting" : "{}",
            "name" : "name",
            "agentOwnedRouting" : "{}"
          }
        }, {
          "type" : "SCALAR",
          "user" : {
            "addresses" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "acdAutoAnswer" : true,
            "routingStatus" : "{}",
            "title" : "title",
            "division" : "{}",
            "authorization" : "{}",
            "skills" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            } ],
            "station" : "{}",
            "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
            "id" : "id",
            "state" : "active",
            "preferredName" : "preferredName",
            "department" : "department",
            "presence" : "{}",
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+00:00"
            },
            "email" : "email",
            "images" : [ {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            }, {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            } ],
            "employerInfo" : {
              "employeeType" : "employeeType",
              "dateHire" : "dateHire",
              "employeeId" : "employeeId",
              "officialName" : "officialName"
            },
            "languages" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            } ],
            "selfUri" : "https://openapi-generator.tech",
            "conversationSummary" : "{}",
            "groups" : [ {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            }, {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              }, {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              } ],
              "hobbies" : [ "hobbies", "hobbies" ],
              "biography" : "biography",
              "interests" : [ "interests", "interests" ],
              "spouse" : "spouse"
            },
            "team" : "{}",
            "certifications" : [ "certifications", "certifications" ],
            "version" : 6,
            "outOfOffice" : "{}",
            "languagePreference" : "languagePreference",
            "profileSkills" : [ "profileSkills", "profileSkills" ],
            "chat" : {
              "jabberId" : "jabberId"
            },
            "name" : "name",
            "integrationPresence" : "{}",
            "locations" : [ {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            }, {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            } ],
            "username" : "username",
            "geolocation" : "{}"
          },
          "value" : "value",
          "queue" : {
            "peerId" : "peerId",
            "conditionalGroupRouting" : "{}",
            "enableAudioMonitoring" : true,
            "mediaSettings" : "{}",
            "enableManualAssignment" : true,
            "description" : "description",
            "onHoldPrompt" : "{}",
            "emailInQueueFlow" : "{}",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            }, {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            } ],
            "skillEvaluationMethod" : "NONE",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+00:00",
                "division" : "{}",
                "features" : "{}",
                "versionId" : "versionId",
                "createdDate" : "2000-01-23T04:56:07.000+00:00",
                "pages" : [ {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                }, {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "startPageName",
                "name" : "name",
                "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                "startPageId" : "startPageId",
                "id" : "id",
                "publishedDate" : "2000-01-23T04:56:07.000+00:00"
              }
            },
            "division" : "{}",
            "suppressInQueueCallRecording" : true,
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "queueFlow" : "{}",
            "callingPartyNumber" : "callingPartyNumber",
            "userMemberCount" : 6,
            "modifiedBy" : "modifiedBy",
            "id" : "id",
            "memberGroups" : [ {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            }, {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            } ],
            "scoringMethod" : "TimestampAndPriority",
            "joinedMemberCount" : 1,
            "messageInQueueFlow" : "{}",
            "callingPartyName" : "callingPartyName",
            "acwSettings" : "{}",
            "memberCount" : 0,
            "selfUri" : "https://openapi-generator.tech",
            "dateModified" : "2000-01-23T04:56:07.000+00:00",
            "whisperPrompt" : "{}",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "signature" : "{}",
                "replyEmailAddress" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "pattern" : "pattern",
                "language" : "{}",
                "autoBcc" : [ {
                  "name" : "name",
                  "email" : "email"
                }, {
                  "name" : "name",
                  "email" : "email"
                } ],
                "priority" : 7,
                "fromEmail" : "fromEmail",
                "skills" : [ {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                }, {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                } ],
                "allowMultipleActions" : true,
                "name" : "name",
                "fromName" : "fromName",
                "id" : "id",
                "historyInclusion" : "Include",
                "queue" : "{}",
                "flow" : "{}",
                "spamFlow" : "{}"
              },
              "domain" : {
                "selfUri" : "https://openapi-generator.tech",
                "name" : "name",
                "id" : "id"
              }
            },
            "bullseye" : "{}",
            "outboundMessagingAddresses" : "{}",
            "createdBy" : "createdBy",
            "directRouting" : "{}",
            "name" : "name",
            "agentOwnedRouting" : "{}"
          }
        } ],
        "variableName" : "variableName",
        "conjunction" : "AND",
        "terms" : [ null, null ],
        "operator" : "EQ"
      },
      "namedResources" : [ "namedResources", "namedResources" ],
      "policyName" : "policyName",
      "entityName" : "entityName",
      "domain" : "domain",
      "allowConditions" : true,
      "actionSet" : [ "actionSet", "actionSet" ]
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "defaultRoleId",
    "base" : true
  }, {
    "default" : true,
    "userCount" : 9,
    "unusedPermissions" : [ "unusedPermissions", "unusedPermissions" ],
    "permissions" : [ "permissions", "permissions" ],
    "permissionPolicies" : [ {
      "policyDescription" : "policyDescription",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "SCALAR",
          "user" : {
            "addresses" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "acdAutoAnswer" : true,
            "routingStatus" : "{}",
            "title" : "title",
            "division" : "{}",
            "authorization" : "{}",
            "skills" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            } ],
            "station" : "{}",
            "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
            "id" : "id",
            "state" : "active",
            "preferredName" : "preferredName",
            "department" : "department",
            "presence" : "{}",
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+00:00"
            },
            "email" : "email",
            "images" : [ {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            }, {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            } ],
            "employerInfo" : {
              "employeeType" : "employeeType",
              "dateHire" : "dateHire",
              "employeeId" : "employeeId",
              "officialName" : "officialName"
            },
            "languages" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            } ],
            "selfUri" : "https://openapi-generator.tech",
            "conversationSummary" : "{}",
            "groups" : [ {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            }, {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              }, {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              } ],
              "hobbies" : [ "hobbies", "hobbies" ],
              "biography" : "biography",
              "interests" : [ "interests", "interests" ],
              "spouse" : "spouse"
            },
            "team" : "{}",
            "certifications" : [ "certifications", "certifications" ],
            "version" : 6,
            "outOfOffice" : "{}",
            "languagePreference" : "languagePreference",
            "profileSkills" : [ "profileSkills", "profileSkills" ],
            "chat" : {
              "jabberId" : "jabberId"
            },
            "name" : "name",
            "integrationPresence" : "{}",
            "locations" : [ {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            }, {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            } ],
            "username" : "username",
            "geolocation" : "{}"
          },
          "value" : "value",
          "queue" : {
            "peerId" : "peerId",
            "conditionalGroupRouting" : "{}",
            "enableAudioMonitoring" : true,
            "mediaSettings" : "{}",
            "enableManualAssignment" : true,
            "description" : "description",
            "onHoldPrompt" : "{}",
            "emailInQueueFlow" : "{}",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            }, {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            } ],
            "skillEvaluationMethod" : "NONE",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+00:00",
                "division" : "{}",
                "features" : "{}",
                "versionId" : "versionId",
                "createdDate" : "2000-01-23T04:56:07.000+00:00",
                "pages" : [ {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                }, {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "startPageName",
                "name" : "name",
                "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                "startPageId" : "startPageId",
                "id" : "id",
                "publishedDate" : "2000-01-23T04:56:07.000+00:00"
              }
            },
            "division" : "{}",
            "suppressInQueueCallRecording" : true,
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "queueFlow" : "{}",
            "callingPartyNumber" : "callingPartyNumber",
            "userMemberCount" : 6,
            "modifiedBy" : "modifiedBy",
            "id" : "id",
            "memberGroups" : [ {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            }, {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            } ],
            "scoringMethod" : "TimestampAndPriority",
            "joinedMemberCount" : 1,
            "messageInQueueFlow" : "{}",
            "callingPartyName" : "callingPartyName",
            "acwSettings" : "{}",
            "memberCount" : 0,
            "selfUri" : "https://openapi-generator.tech",
            "dateModified" : "2000-01-23T04:56:07.000+00:00",
            "whisperPrompt" : "{}",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "signature" : "{}",
                "replyEmailAddress" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "pattern" : "pattern",
                "language" : "{}",
                "autoBcc" : [ {
                  "name" : "name",
                  "email" : "email"
                }, {
                  "name" : "name",
                  "email" : "email"
                } ],
                "priority" : 7,
                "fromEmail" : "fromEmail",
                "skills" : [ {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                }, {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                } ],
                "allowMultipleActions" : true,
                "name" : "name",
                "fromName" : "fromName",
                "id" : "id",
                "historyInclusion" : "Include",
                "queue" : "{}",
                "flow" : "{}",
                "spamFlow" : "{}"
              },
              "domain" : {
                "selfUri" : "https://openapi-generator.tech",
                "name" : "name",
                "id" : "id"
              }
            },
            "bullseye" : "{}",
            "outboundMessagingAddresses" : "{}",
            "createdBy" : "createdBy",
            "directRouting" : "{}",
            "name" : "name",
            "agentOwnedRouting" : "{}"
          }
        }, {
          "type" : "SCALAR",
          "user" : {
            "addresses" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "acdAutoAnswer" : true,
            "routingStatus" : "{}",
            "title" : "title",
            "division" : "{}",
            "authorization" : "{}",
            "skills" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            } ],
            "station" : "{}",
            "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
            "id" : "id",
            "state" : "active",
            "preferredName" : "preferredName",
            "department" : "department",
            "presence" : "{}",
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+00:00"
            },
            "email" : "email",
            "images" : [ {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            }, {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            } ],
            "employerInfo" : {
              "employeeType" : "employeeType",
              "dateHire" : "dateHire",
              "employeeId" : "employeeId",
              "officialName" : "officialName"
            },
            "languages" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            } ],
            "selfUri" : "https://openapi-generator.tech",
            "conversationSummary" : "{}",
            "groups" : [ {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            }, {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              }, {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              } ],
              "hobbies" : [ "hobbies", "hobbies" ],
              "biography" : "biography",
              "interests" : [ "interests", "interests" ],
              "spouse" : "spouse"
            },
            "team" : "{}",
            "certifications" : [ "certifications", "certifications" ],
            "version" : 6,
            "outOfOffice" : "{}",
            "languagePreference" : "languagePreference",
            "profileSkills" : [ "profileSkills", "profileSkills" ],
            "chat" : {
              "jabberId" : "jabberId"
            },
            "name" : "name",
            "integrationPresence" : "{}",
            "locations" : [ {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            }, {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            } ],
            "username" : "username",
            "geolocation" : "{}"
          },
          "value" : "value",
          "queue" : {
            "peerId" : "peerId",
            "conditionalGroupRouting" : "{}",
            "enableAudioMonitoring" : true,
            "mediaSettings" : "{}",
            "enableManualAssignment" : true,
            "description" : "description",
            "onHoldPrompt" : "{}",
            "emailInQueueFlow" : "{}",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            }, {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            } ],
            "skillEvaluationMethod" : "NONE",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+00:00",
                "division" : "{}",
                "features" : "{}",
                "versionId" : "versionId",
                "createdDate" : "2000-01-23T04:56:07.000+00:00",
                "pages" : [ {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                }, {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "startPageName",
                "name" : "name",
                "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                "startPageId" : "startPageId",
                "id" : "id",
                "publishedDate" : "2000-01-23T04:56:07.000+00:00"
              }
            },
            "division" : "{}",
            "suppressInQueueCallRecording" : true,
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "queueFlow" : "{}",
            "callingPartyNumber" : "callingPartyNumber",
            "userMemberCount" : 6,
            "modifiedBy" : "modifiedBy",
            "id" : "id",
            "memberGroups" : [ {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            }, {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            } ],
            "scoringMethod" : "TimestampAndPriority",
            "joinedMemberCount" : 1,
            "messageInQueueFlow" : "{}",
            "callingPartyName" : "callingPartyName",
            "acwSettings" : "{}",
            "memberCount" : 0,
            "selfUri" : "https://openapi-generator.tech",
            "dateModified" : "2000-01-23T04:56:07.000+00:00",
            "whisperPrompt" : "{}",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "signature" : "{}",
                "replyEmailAddress" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "pattern" : "pattern",
                "language" : "{}",
                "autoBcc" : [ {
                  "name" : "name",
                  "email" : "email"
                }, {
                  "name" : "name",
                  "email" : "email"
                } ],
                "priority" : 7,
                "fromEmail" : "fromEmail",
                "skills" : [ {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                }, {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                } ],
                "allowMultipleActions" : true,
                "name" : "name",
                "fromName" : "fromName",
                "id" : "id",
                "historyInclusion" : "Include",
                "queue" : "{}",
                "flow" : "{}",
                "spamFlow" : "{}"
              },
              "domain" : {
                "selfUri" : "https://openapi-generator.tech",
                "name" : "name",
                "id" : "id"
              }
            },
            "bullseye" : "{}",
            "outboundMessagingAddresses" : "{}",
            "createdBy" : "createdBy",
            "directRouting" : "{}",
            "name" : "name",
            "agentOwnedRouting" : "{}"
          }
        } ],
        "variableName" : "variableName",
        "conjunction" : "AND",
        "terms" : [ null, null ],
        "operator" : "EQ"
      },
      "namedResources" : [ "namedResources", "namedResources" ],
      "policyName" : "policyName",
      "entityName" : "entityName",
      "domain" : "domain",
      "allowConditions" : true,
      "actionSet" : [ "actionSet", "actionSet" ]
    }, {
      "policyDescription" : "policyDescription",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "SCALAR",
          "user" : {
            "addresses" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "acdAutoAnswer" : true,
            "routingStatus" : "{}",
            "title" : "title",
            "division" : "{}",
            "authorization" : "{}",
            "skills" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            } ],
            "station" : "{}",
            "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
            "id" : "id",
            "state" : "active",
            "preferredName" : "preferredName",
            "department" : "department",
            "presence" : "{}",
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+00:00"
            },
            "email" : "email",
            "images" : [ {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            }, {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            } ],
            "employerInfo" : {
              "employeeType" : "employeeType",
              "dateHire" : "dateHire",
              "employeeId" : "employeeId",
              "officialName" : "officialName"
            },
            "languages" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            } ],
            "selfUri" : "https://openapi-generator.tech",
            "conversationSummary" : "{}",
            "groups" : [ {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            }, {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              }, {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              } ],
              "hobbies" : [ "hobbies", "hobbies" ],
              "biography" : "biography",
              "interests" : [ "interests", "interests" ],
              "spouse" : "spouse"
            },
            "team" : "{}",
            "certifications" : [ "certifications", "certifications" ],
            "version" : 6,
            "outOfOffice" : "{}",
            "languagePreference" : "languagePreference",
            "profileSkills" : [ "profileSkills", "profileSkills" ],
            "chat" : {
              "jabberId" : "jabberId"
            },
            "name" : "name",
            "integrationPresence" : "{}",
            "locations" : [ {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            }, {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            } ],
            "username" : "username",
            "geolocation" : "{}"
          },
          "value" : "value",
          "queue" : {
            "peerId" : "peerId",
            "conditionalGroupRouting" : "{}",
            "enableAudioMonitoring" : true,
            "mediaSettings" : "{}",
            "enableManualAssignment" : true,
            "description" : "description",
            "onHoldPrompt" : "{}",
            "emailInQueueFlow" : "{}",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            }, {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            } ],
            "skillEvaluationMethod" : "NONE",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+00:00",
                "division" : "{}",
                "features" : "{}",
                "versionId" : "versionId",
                "createdDate" : "2000-01-23T04:56:07.000+00:00",
                "pages" : [ {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                }, {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "startPageName",
                "name" : "name",
                "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                "startPageId" : "startPageId",
                "id" : "id",
                "publishedDate" : "2000-01-23T04:56:07.000+00:00"
              }
            },
            "division" : "{}",
            "suppressInQueueCallRecording" : true,
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "queueFlow" : "{}",
            "callingPartyNumber" : "callingPartyNumber",
            "userMemberCount" : 6,
            "modifiedBy" : "modifiedBy",
            "id" : "id",
            "memberGroups" : [ {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            }, {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            } ],
            "scoringMethod" : "TimestampAndPriority",
            "joinedMemberCount" : 1,
            "messageInQueueFlow" : "{}",
            "callingPartyName" : "callingPartyName",
            "acwSettings" : "{}",
            "memberCount" : 0,
            "selfUri" : "https://openapi-generator.tech",
            "dateModified" : "2000-01-23T04:56:07.000+00:00",
            "whisperPrompt" : "{}",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "signature" : "{}",
                "replyEmailAddress" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "pattern" : "pattern",
                "language" : "{}",
                "autoBcc" : [ {
                  "name" : "name",
                  "email" : "email"
                }, {
                  "name" : "name",
                  "email" : "email"
                } ],
                "priority" : 7,
                "fromEmail" : "fromEmail",
                "skills" : [ {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                }, {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                } ],
                "allowMultipleActions" : true,
                "name" : "name",
                "fromName" : "fromName",
                "id" : "id",
                "historyInclusion" : "Include",
                "queue" : "{}",
                "flow" : "{}",
                "spamFlow" : "{}"
              },
              "domain" : {
                "selfUri" : "https://openapi-generator.tech",
                "name" : "name",
                "id" : "id"
              }
            },
            "bullseye" : "{}",
            "outboundMessagingAddresses" : "{}",
            "createdBy" : "createdBy",
            "directRouting" : "{}",
            "name" : "name",
            "agentOwnedRouting" : "{}"
          }
        }, {
          "type" : "SCALAR",
          "user" : {
            "addresses" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "acdAutoAnswer" : true,
            "routingStatus" : "{}",
            "title" : "title",
            "division" : "{}",
            "authorization" : "{}",
            "skills" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "skillUri" : "https://openapi-generator.tech",
              "id" : "id",
              "state" : "active",
              "proficiency" : 7.061401241503109
            } ],
            "station" : "{}",
            "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
            "id" : "id",
            "state" : "active",
            "preferredName" : "preferredName",
            "department" : "department",
            "presence" : "{}",
            "lastTokenIssued" : {
              "dateIssued" : "2000-01-23T04:56:07.000+00:00"
            },
            "email" : "email",
            "images" : [ {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            }, {
              "imageUri" : "imageUri",
              "resolution" : "resolution"
            } ],
            "employerInfo" : {
              "employeeType" : "employeeType",
              "dateHire" : "dateHire",
              "employeeId" : "employeeId",
              "officialName" : "officialName"
            },
            "languages" : [ {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            }, {
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "state" : "active",
              "languageUri" : "https://openapi-generator.tech",
              "proficiency" : 9.301444243932576
            } ],
            "selfUri" : "https://openapi-generator.tech",
            "conversationSummary" : "{}",
            "groups" : [ {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            }, {
              "images" : [ {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              }, {
                "imageUri" : "imageUri",
                "resolution" : "resolution"
              } ],
              "addresses" : [ {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              }, {
                "extension" : "extension",
                "address" : "address",
                "display" : "display",
                "mediaType" : "PHONE",
                "type" : "GROUPRING"
              } ],
              "visibility" : "public",
              "memberCount" : 5,
              "selfUri" : "https://openapi-generator.tech",
              "description" : "description",
              "dateModified" : "2000-01-23T04:56:07.000+00:00",
              "owners" : [ null, null ],
              "rolesEnabled" : true,
              "type" : "official",
              "version" : 2,
              "rulesVisible" : true,
              "name" : "name",
              "id" : "id",
              "state" : "active"
            } ],
            "primaryContactInfo" : [ {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            }, {
              "extension" : "extension",
              "address" : "address",
              "countryCode" : "countryCode",
              "display" : "display",
              "integration" : "microsoftteams",
              "mediaType" : "PHONE",
              "type" : "PRIMARY"
            } ],
            "biography" : {
              "education" : [ {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              }, {
                "notes" : "notes",
                "school" : "school",
                "dateStart" : "2000-01-23",
                "dateEnd" : "2000-01-23",
                "fieldOfStudy" : "fieldOfStudy"
              } ],
              "hobbies" : [ "hobbies", "hobbies" ],
              "biography" : "biography",
              "interests" : [ "interests", "interests" ],
              "spouse" : "spouse"
            },
            "team" : "{}",
            "certifications" : [ "certifications", "certifications" ],
            "version" : 6,
            "outOfOffice" : "{}",
            "languagePreference" : "languagePreference",
            "profileSkills" : [ "profileSkills", "profileSkills" ],
            "chat" : {
              "jabberId" : "jabberId"
            },
            "name" : "name",
            "integrationPresence" : "{}",
            "locations" : [ {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            }, {
              "notes" : "notes",
              "coordinates" : {
                "key" : 1.4658129805029452
              },
              "locationDefinition" : {
                "images" : "images",
                "address" : {
                  "zipcode" : "zipcode",
                  "country" : "country",
                  "city" : "city",
                  "street1" : "street1",
                  "countryName" : "countryName",
                  "state" : "state",
                  "street2" : "street2"
                },
                "notes" : "notes",
                "floorplanImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "addressVerificationDetails" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "profileImage" : [ {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                }, {
                  "imageUri" : "imageUri",
                  "resolution" : "resolution"
                } ],
                "emergencyNumber" : "{}",
                "version" : 5,
                "path" : [ "path", "path" ],
                "addressStored" : true,
                "name" : "name",
                "id" : "id",
                "contactUser" : "{}",
                "state" : "active",
                "addressVerified" : true
              },
              "id" : "id",
              "floorplanId" : "floorplanId"
            } ],
            "username" : "username",
            "geolocation" : "{}"
          },
          "value" : "value",
          "queue" : {
            "peerId" : "peerId",
            "conditionalGroupRouting" : "{}",
            "enableAudioMonitoring" : true,
            "mediaSettings" : "{}",
            "enableManualAssignment" : true,
            "description" : "description",
            "onHoldPrompt" : "{}",
            "emailInQueueFlow" : "{}",
            "autoAnswerOnly" : true,
            "routingRules" : [ {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            }, {
              "waitSeconds" : 5.637376656633329,
              "threshold" : 5,
              "operator" : "MEETS_THRESHOLD"
            } ],
            "skillEvaluationMethod" : "NONE",
            "defaultScripts" : {
              "key" : {
                "variables" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "customActions" : "{}",
                "versionDate" : "2000-01-23T04:56:07.000+00:00",
                "division" : "{}",
                "features" : "{}",
                "versionId" : "versionId",
                "createdDate" : "2000-01-23T04:56:07.000+00:00",
                "pages" : [ {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                }, {
                  "versionId" : "versionId",
                  "createdDate" : "2000-01-23T04:56:07.000+00:00",
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                  "id" : "id",
                  "rootContainer" : {
                    "key" : "{}"
                  },
                  "properties" : {
                    "key" : "{}"
                  }
                } ],
                "startPageName" : "startPageName",
                "name" : "name",
                "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
                "startPageId" : "startPageId",
                "id" : "id",
                "publishedDate" : "2000-01-23T04:56:07.000+00:00"
              }
            },
            "division" : "{}",
            "suppressInQueueCallRecording" : true,
            "dateCreated" : "2000-01-23T04:56:07.000+00:00",
            "queueFlow" : "{}",
            "callingPartyNumber" : "callingPartyNumber",
            "userMemberCount" : 6,
            "modifiedBy" : "modifiedBy",
            "id" : "id",
            "memberGroups" : [ {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            }, {
              "division" : "{}",
              "memberCount" : 2,
              "selfUri" : "https://openapi-generator.tech",
              "name" : "name",
              "id" : "id",
              "type" : "TEAM"
            } ],
            "scoringMethod" : "TimestampAndPriority",
            "joinedMemberCount" : 1,
            "messageInQueueFlow" : "{}",
            "callingPartyName" : "callingPartyName",
            "acwSettings" : "{}",
            "memberCount" : 0,
            "selfUri" : "https://openapi-generator.tech",
            "dateModified" : "2000-01-23T04:56:07.000+00:00",
            "whisperPrompt" : "{}",
            "enableTranscription" : true,
            "outboundEmailAddress" : {
              "route" : {
                "signature" : "{}",
                "replyEmailAddress" : "{}",
                "selfUri" : "https://openapi-generator.tech",
                "pattern" : "pattern",
                "language" : "{}",
                "autoBcc" : [ {
                  "name" : "name",
                  "email" : "email"
                }, {
                  "name" : "name",
                  "email" : "email"
                } ],
                "priority" : 7,
                "fromEmail" : "fromEmail",
                "skills" : [ {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                }, {
                  "selfUri" : "https://openapi-generator.tech",
                  "name" : "name",
                  "id" : "id"
                } ],
                "allowMultipleActions" : true,
                "name" : "name",
                "fromName" : "fromName",
                "id" : "id",
                "historyInclusion" : "Include",
                "queue" : "{}",
                "flow" : "{}",
                "spamFlow" : "{}"
              },
              "domain" : {
                "selfUri" : "https://openapi-generator.tech",
                "name" : "name",
                "id" : "id"
              }
            },
            "bullseye" : "{}",
            "outboundMessagingAddresses" : "{}",
            "createdBy" : "createdBy",
            "directRouting" : "{}",
            "name" : "name",
            "agentOwnedRouting" : "{}"
          }
        } ],
        "variableName" : "variableName",
        "conjunction" : "AND",
        "terms" : [ null, null ],
        "operator" : "EQ"
      },
      "namedResources" : [ "namedResources", "namedResources" ],
      "policyName" : "policyName",
      "entityName" : "entityName",
      "domain" : "domain",
      "allowConditions" : true,
      "actionSet" : [ "actionSet", "actionSet" ]
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "id" : "id",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "defaultRoleId",
    "base" : true
  } ],
  "superiors" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "station" : "{}",
  "trustors" : [ {
    "authorization" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "organization" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "enabled" : true
  }, {
    "authorization" : "{}",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "createdBy" : "{}",
    "organization" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "id" : "id",
    "enabled" : true
  } ],
  "fieldConfigs" : "{}",
  "department" : "department",
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+00:00"
  },
  "email" : "email",
  "manager" : {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  },
  "languages" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "groups" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "biography" : {
    "education" : [ {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    }, {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    } ],
    "hobbies" : [ "hobbies", "hobbies" ],
    "biography" : "biography",
    "interests" : [ "interests", "interests" ],
    "spouse" : "spouse"
  },
  "team" : "{}",
  "certifications" : [ "certifications", "certifications" ],
  "divisionedPresenceDefinitions" : [ {
    "languageLabels" : {
      "key" : "languageLabels"
    },
    "systemPresence" : "Available",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "divisionId" : "divisionId",
    "type" : "System",
    "deactivated" : true
  }, {
    "languageLabels" : {
      "key" : "languageLabels"
    },
    "systemPresence" : "Available",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "divisionId" : "divisionId",
    "type" : "System",
    "deactivated" : true
  } ],
  "token" : "{}",
  "outOfOffice" : "{}",
  "routingSkills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "version" : "version"
  } ],
  "chat" : {
    "jabberId" : "jabberId"
  },
  "organization" : "{}",
  "integrationPresence" : "{}",
  "locations" : [ {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  }, {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  } ],
  "username" : "username",
  "geolocation" : "{}"
}, statusCode=200}]
     
     - parameter expand: (query) Which fields, if any, to expand. (optional)
     - parameter integrationPresenceSource: (query) Get your presence for a given integration. This parameter will only be used when presence is provided as an \&quot;expand\&quot;. (optional)

     - returns: RequestBuilder<UserMe> 
     */
    open class func getUsersMeWithRequestBuilder(expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsersMe? = nil) -> RequestBuilder<UserMe> {        
        let path = "/api/v2/users/me"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand, 
            "integrationPresenceSource": integrationPresenceSource?.rawValue
        ])

        let requestBuilder: RequestBuilder<UserMe>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    public enum IntegrationPresenceSource_getUsersSearch: String { 
        case microsoftTeams = "MicrosoftTeams"
        case zoomPhone = "ZoomPhone"
        case eightByEight = "EightByEight"
    }

    
    /**
     Search users using the q64 value returned from a previous search
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter integrationPresenceSource: (query) integrationPresenceSource (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersSearch(q64: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsersSearch? = nil, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = getUsersSearchWithRequestBuilder(q64: q64, expand: expand, integrationPresenceSource: integrationPresenceSource)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search users using the q64 value returned from a previous search
     - GET /api/v2/users/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter q64: (query) q64 
     - parameter expand: (query) expand (optional)
     - parameter integrationPresenceSource: (query) integrationPresenceSource (optional)

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func getUsersSearchWithRequestBuilder(q64: String, expand: [String]? = nil, integrationPresenceSource: IntegrationPresenceSource_getUsersSearch? = nil) -> RequestBuilder<UsersSearchResponse> {        
        let path = "/api/v2/users/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q64": q64, 
            "expand": expand, 
            "integrationPresenceSource": integrationPresenceSource?.rawValue
        ])

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Update user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUser(userId: String, body: UpdateUser, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update user
     - PATCH /api/v2/users/{userId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "acdAutoAnswer" : true,
  "routingStatus" : "{}",
  "title" : "title",
  "division" : "{}",
  "authorization" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "station" : "{}",
  "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "preferredName" : "preferredName",
  "department" : "department",
  "presence" : "{}",
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+00:00"
  },
  "email" : "email",
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "employerInfo" : {
    "employeeType" : "employeeType",
    "dateHire" : "dateHire",
    "employeeId" : "employeeId",
    "officialName" : "officialName"
  },
  "languages" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "conversationSummary" : "{}",
  "groups" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "biography" : {
    "education" : [ {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    }, {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    } ],
    "hobbies" : [ "hobbies", "hobbies" ],
    "biography" : "biography",
    "interests" : [ "interests", "interests" ],
    "spouse" : "spouse"
  },
  "team" : "{}",
  "certifications" : [ "certifications", "certifications" ],
  "version" : 6,
  "outOfOffice" : "{}",
  "languagePreference" : "languagePreference",
  "profileSkills" : [ "profileSkills", "profileSkills" ],
  "chat" : {
    "jabberId" : "jabberId"
  },
  "name" : "name",
  "integrationPresence" : "{}",
  "locations" : [ {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  }, {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  } ],
  "username" : "username",
  "geolocation" : "{}"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User 

     - returns: RequestBuilder<User> 
     */
    open class func patchUserWithRequestBuilder(userId: String, body: UpdateUser) -> RequestBuilder<User> {        
        var path = "/api/v2/users/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Patch a user's CallForwarding
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Call forwarding 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserCallforwarding(userId: String, body: CallForwarding, completion: @escaping ((_ data: CallForwarding?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserCallforwardingWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<CallForwarding>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch a user's CallForwarding
     - PATCH /api/v2/users/{userId}/callforwarding
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "phoneNumber" : "phoneNumber",
  "voicemail" : "PURECLOUD",
  "calls" : [ {
    "targets" : [ {
      "type" : "STATION",
      "value" : "value"
    }, {
      "type" : "STATION",
      "value" : "value"
    } ]
  }, {
    "targets" : [ {
      "type" : "STATION",
      "value" : "value"
    }, {
      "type" : "STATION",
      "value" : "value"
    } ]
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "user" : {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  },
  "enabled" : true
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Call forwarding 

     - returns: RequestBuilder<CallForwarding> 
     */
    open class func patchUserCallforwardingWithRequestBuilder(userId: String, body: CallForwarding) -> RequestBuilder<CallForwarding> {        
        var path = "/api/v2/users/{userId}/callforwarding"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallForwarding>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     Patch a user's Geolocation
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 
     - parameter body: (body) Geolocation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserGeolocation(userId: String, clientId: String, body: Geolocation, completion: @escaping ((_ data: Geolocation?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserGeolocationWithRequestBuilder(userId: userId, clientId: clientId, body: body)
        requestBuilder.execute { (response: Response<Geolocation>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Patch a user's Geolocation
     - PATCH /api/v2/users/{userId}/geolocations/{clientId}
     - The geolocation object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the client as the user's primary geolocation source.  Option 2: Provide the 'latitude' and 'longitude' values.  This will enqueue an asynchronous update of the 'city', 'region', and 'country', generating a notification. A subsequent GET operation will include the new values for 'city', 'region' and 'country'.  Option 3:  Provide the 'city', 'region', 'country' values.  Option 1 can be combined with Option 2 or Option 3.  For example, update the client as primary and provide latitude and longitude values.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "city" : "city",
  "latitude" : 0.8008281904610115,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "locations" : [ {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  }, {
    "images" : "images",
    "address" : {
      "zipcode" : "zipcode",
      "country" : "country",
      "city" : "city",
      "street1" : "street1",
      "countryName" : "countryName",
      "state" : "state",
      "street2" : "street2"
    },
    "notes" : "notes",
    "floorplanImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addressVerificationDetails" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "profileImage" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "emergencyNumber" : "{}",
    "version" : 5,
    "path" : [ "path", "path" ],
    "addressStored" : true,
    "name" : "name",
    "id" : "id",
    "contactUser" : "{}",
    "state" : "active",
    "addressVerified" : true
  } ],
  "id" : "id",
  "type" : "type",
  "region" : "region",
  "primary" : true,
  "longitude" : 6.027456183070403
}, statusCode=200}]
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 
     - parameter body: (body) Geolocation 

     - returns: RequestBuilder<Geolocation> 
     */
    open class func patchUserGeolocationWithRequestBuilder(userId: String, clientId: String, body: Geolocation) -> RequestBuilder<Geolocation> {        
        var path = "/api/v2/users/{userId}/geolocations/{clientId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Geolocation>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     Join or unjoin a queue for a user
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserQueue(queueId: String, userId: String, body: UserQueue, completion: @escaping ((_ data: UserQueue?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserQueueWithRequestBuilder(queueId: queueId, userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserQueue>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Join or unjoin a queue for a user
     - PATCH /api/v2/users/{userId}/queues/{queueId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "peerId" : "peerId",
  "conditionalGroupRouting" : "{}",
  "enableAudioMonitoring" : true,
  "mediaSettings" : "{}",
  "enableManualAssignment" : true,
  "description" : "description",
  "onHoldPrompt" : "{}",
  "emailInQueueFlow" : "{}",
  "routingRules" : [ {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  }, {
    "waitSeconds" : 5.637376656633329,
    "threshold" : 5,
    "operator" : "MEETS_THRESHOLD"
  } ],
  "skillEvaluationMethod" : "NONE",
  "defaultScripts" : {
    "key" : {
      "variables" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "customActions" : "{}",
      "versionDate" : "2000-01-23T04:56:07.000+00:00",
      "division" : "{}",
      "features" : "{}",
      "versionId" : "versionId",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "pages" : [ {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      }, {
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "rootContainer" : {
          "key" : "{}"
        },
        "properties" : {
          "key" : "{}"
        }
      } ],
      "startPageName" : "startPageName",
      "name" : "name",
      "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "startPageId" : "startPageId",
      "id" : "id",
      "publishedDate" : "2000-01-23T04:56:07.000+00:00"
    }
  },
  "division" : "{}",
  "suppressInQueueCallRecording" : true,
  "dateCreated" : "2000-01-23T04:56:07.000+00:00",
  "queueFlow" : "{}",
  "callingPartyNumber" : "callingPartyNumber",
  "userMemberCount" : 6,
  "modifiedBy" : "modifiedBy",
  "id" : "id",
  "memberGroups" : [ {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  }, {
    "division" : "{}",
    "memberCount" : 2,
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "type" : "TEAM"
  } ],
  "scoringMethod" : "TimestampAndPriority",
  "joinedMemberCount" : 1,
  "messageInQueueFlow" : "{}",
  "callingPartyName" : "callingPartyName",
  "acwSettings" : "{}",
  "joined" : true,
  "memberCount" : 0,
  "selfUri" : "https://openapi-generator.tech",
  "dateModified" : "2000-01-23T04:56:07.000+00:00",
  "whisperPrompt" : "{}",
  "enableTranscription" : true,
  "outboundEmailAddress" : {
    "route" : {
      "signature" : "{}",
      "replyEmailAddress" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "pattern" : "pattern",
      "language" : "{}",
      "autoBcc" : [ {
        "name" : "name",
        "email" : "email"
      }, {
        "name" : "name",
        "email" : "email"
      } ],
      "priority" : 7,
      "fromEmail" : "fromEmail",
      "skills" : [ {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }, {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      } ],
      "allowMultipleActions" : true,
      "name" : "name",
      "fromName" : "fromName",
      "id" : "id",
      "historyInclusion" : "Include",
      "queue" : "{}",
      "flow" : "{}",
      "spamFlow" : "{}"
    },
    "domain" : {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id"
    }
  },
  "bullseye" : "{}",
  "outboundMessagingAddresses" : "{}",
  "createdBy" : "createdBy",
  "directRouting" : "{}",
  "name" : "name",
  "agentOwnedRouting" : "{}"
}, statusCode=200}]
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member 

     - returns: RequestBuilder<UserQueue> 
     */
    open class func patchUserQueueWithRequestBuilder(queueId: String, userId: String, body: UserQueue) -> RequestBuilder<UserQueue> {        
        var path = "/api/v2/users/{userId}/queues/{queueId}"
        let queueIdPreEscape = "\(queueId)"
        let queueIdPostEscape = queueIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{queueId}", with: queueIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserQueue>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     Join or unjoin a set of queues for a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues 
     - parameter divisionId: (query) Division ID(s) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserQueues(userId: String, body: [UserQueue], divisionId: [String]? = nil, completion: @escaping ((_ data: UserQueueEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserQueuesWithRequestBuilder(userId: userId, body: body, divisionId: divisionId)
        requestBuilder.execute { (response: Response<UserQueueEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Join or unjoin a set of queues for a user
     - PATCH /api/v2/users/{userId}/queues
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "pageCount" : 7,
  "pageNumber" : 5,
  "entities" : [ {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  }, {
    "peerId" : "peerId",
    "conditionalGroupRouting" : "{}",
    "enableAudioMonitoring" : true,
    "mediaSettings" : "{}",
    "enableManualAssignment" : true,
    "description" : "description",
    "onHoldPrompt" : "{}",
    "emailInQueueFlow" : "{}",
    "routingRules" : [ {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    }, {
      "waitSeconds" : 5.637376656633329,
      "threshold" : 5,
      "operator" : "MEETS_THRESHOLD"
    } ],
    "skillEvaluationMethod" : "NONE",
    "defaultScripts" : {
      "key" : {
        "variables" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "customActions" : "{}",
        "versionDate" : "2000-01-23T04:56:07.000+00:00",
        "division" : "{}",
        "features" : "{}",
        "versionId" : "versionId",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "pages" : [ {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        }, {
          "versionId" : "versionId",
          "createdDate" : "2000-01-23T04:56:07.000+00:00",
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
          "id" : "id",
          "rootContainer" : {
            "key" : "{}"
          },
          "properties" : {
            "key" : "{}"
          }
        } ],
        "startPageName" : "startPageName",
        "name" : "name",
        "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
        "startPageId" : "startPageId",
        "id" : "id",
        "publishedDate" : "2000-01-23T04:56:07.000+00:00"
      }
    },
    "division" : "{}",
    "suppressInQueueCallRecording" : true,
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "queueFlow" : "{}",
    "callingPartyNumber" : "callingPartyNumber",
    "userMemberCount" : 6,
    "modifiedBy" : "modifiedBy",
    "id" : "id",
    "memberGroups" : [ {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    }, {
      "division" : "{}",
      "memberCount" : 2,
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "type" : "TEAM"
    } ],
    "scoringMethod" : "TimestampAndPriority",
    "joinedMemberCount" : 1,
    "messageInQueueFlow" : "{}",
    "callingPartyName" : "callingPartyName",
    "acwSettings" : "{}",
    "joined" : true,
    "memberCount" : 0,
    "selfUri" : "https://openapi-generator.tech",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "whisperPrompt" : "{}",
    "enableTranscription" : true,
    "outboundEmailAddress" : {
      "route" : {
        "signature" : "{}",
        "replyEmailAddress" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "pattern" : "pattern",
        "language" : "{}",
        "autoBcc" : [ {
          "name" : "name",
          "email" : "email"
        }, {
          "name" : "name",
          "email" : "email"
        } ],
        "priority" : 7,
        "fromEmail" : "fromEmail",
        "skills" : [ {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        }, {
          "selfUri" : "https://openapi-generator.tech",
          "name" : "name",
          "id" : "id"
        } ],
        "allowMultipleActions" : true,
        "name" : "name",
        "fromName" : "fromName",
        "id" : "id",
        "historyInclusion" : "Include",
        "queue" : "{}",
        "flow" : "{}",
        "spamFlow" : "{}"
      },
      "domain" : {
        "selfUri" : "https://openapi-generator.tech",
        "name" : "name",
        "id" : "id"
      }
    },
    "bullseye" : "{}",
    "outboundMessagingAddresses" : "{}",
    "createdBy" : "createdBy",
    "directRouting" : "{}",
    "name" : "name",
    "agentOwnedRouting" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 5,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues 
     - parameter divisionId: (query) Division ID(s) (optional)

     - returns: RequestBuilder<UserQueueEntityListing> 
     */
    open class func patchUserQueuesWithRequestBuilder(userId: String, body: [UserQueue], divisionId: [String]? = nil) -> RequestBuilder<UserQueueEntityListing> {        
        var path = "/api/v2/users/{userId}/queues"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "divisionId": divisionId
        ])

        let requestBuilder: RequestBuilder<UserQueueEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    
    /**
     Update routing language proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutinglanguage(userId: String, languageId: String, body: UserRoutingLanguage, completion: @escaping ((_ data: UserRoutingLanguage?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutinglanguageWithRequestBuilder(userId: userId, languageId: languageId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingLanguage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update routing language proficiency or state.
     - PATCH /api/v2/users/{userId}/routinglanguages/{languageId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "state" : "active",
  "languageUri" : "https://openapi-generator.tech",
  "proficiency" : 9.301444243932576
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter languageId: (path) languageId 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserRoutingLanguage> 
     */
    open class func patchUserRoutinglanguageWithRequestBuilder(userId: String, languageId: String, body: UserRoutingLanguage) -> RequestBuilder<UserRoutingLanguage> {        
        var path = "/api/v2/users/{userId}/routinglanguages/{languageId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let languageIdPreEscape = "\(languageId)"
        let languageIdPostEscape = languageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{languageId}", with: languageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingLanguage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Add bulk routing language to user. Max limit 50 languages
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutinglanguagesBulk(userId: String, body: [UserRoutingLanguagePost], completion: @escaping ((_ data: UserLanguageEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutinglanguagesBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserLanguageEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add bulk routing language to user. Max limit 50 languages
     - PATCH /api/v2/users/{userId}/routinglanguages/bulk
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserLanguageEntityListing> 
     */
    open class func patchUserRoutinglanguagesBulkWithRequestBuilder(userId: String, body: [UserRoutingLanguagePost]) -> RequestBuilder<UserLanguageEntityListing> {        
        var path = "/api/v2/users/{userId}/routinglanguages/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserLanguageEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    
    /**
     Bulk add routing skills to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUserRoutingskillsBulk(userId: String, body: [UserRoutingSkillPost], completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUserRoutingskillsBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk add routing skills to user
     - PATCH /api/v2/users/{userId}/routingskills/bulk
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func patchUserRoutingskillsBulkWithRequestBuilder(userId: String, body: [UserRoutingSkillPost]) -> RequestBuilder<UserSkillEntityListing> {        
        var path = "/api/v2/users/{userId}/routingskills/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Update bulk acd autoanswer on users. Max 50 users can be updated at a time.
     
     - parameter body: (body) Users 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchUsersBulk(body: [PatchUser], completion: @escaping ((_ data: UserEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = patchUsersBulkWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update bulk acd autoanswer on users. Max 50 users can be updated at a time.
     - PATCH /api/v2/users/bulk
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter body: (body) Users 

     - returns: RequestBuilder<UserEntityListing> 
     */
    open class func patchUsersBulkWithRequestBuilder(body: [PatchUser]) -> RequestBuilder<UserEntityListing> {        
        let path = "/api/v2/users/bulk"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Query for user aggregates
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersAggregatesQuery(body: UserAggregationQuery, completion: @escaping ((_ data: UserAggregateQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserAggregateQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user aggregates
     - POST /api/v2/analytics/users/aggregates/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "systemToOrganizationMappings", "systemToOrganizationMappings" ]
  },
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      }, {
        "metric" : "metric",
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "qualifier" : "qualifier"
      } ],
      "views" : [ {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      }, {
        "stats" : {
          "max" : 0.8008281904610115,
          "count" : 1,
          "sum" : 2.3021358869347655,
          "p95" : 7,
          "countNegative" : 5,
          "numerator" : 3.616076749251911,
          "denominator" : 2.027123023002322,
          "target" : 4.145608029883936,
          "p99" : 1,
          "current" : 7.061401241503109,
          "min" : 6.027456183070403,
          "countPositive" : 5,
          "ratio" : 9.301444243932576
        },
        "name" : "name"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserAggregateQueryResponse> 
     */
    open class func postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: UserAggregationQuery) -> RequestBuilder<UserAggregateQueryResponse> {        
        let path = "/api/v2/analytics/users/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAggregateQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for user details asynchronously
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsJobs(body: AsyncUserDetailsQuery, completion: @escaping ((_ data: AsyncQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsJobsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AsyncQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user details asynchronously
     - POST /api/v2/analytics/users/details/jobs
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "jobId" : "jobId"
}, statusCode=202}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AsyncQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsJobsWithRequestBuilder(body: AsyncUserDetailsQuery) -> RequestBuilder<AsyncQueryResponse> {        
        let path = "/api/v2/analytics/users/details/jobs"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AsyncQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for user details
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersDetailsQuery(body: UserDetailsQuery, completion: @escaping ((_ data: AnalyticsUserDetailsQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersDetailsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<AnalyticsUserDetailsQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user details
     - POST /api/v2/analytics/users/details/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "totalHits" : 0,
  "userDetails" : [ {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  }, {
    "primaryPresence" : [ {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    }, {
      "systemPresence" : "AVAILABLE",
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "organizationPresenceId" : "organizationPresenceId"
    } ],
    "routingStatus" : [ {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    }, {
      "startTime" : "2000-01-23T04:56:07.000+00:00",
      "endTime" : "2000-01-23T04:56:07.000+00:00",
      "routingStatus" : "OFF_QUEUE"
    } ],
    "userId" : "userId"
  } ],
  "aggregations" : [ {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  }, {
    "metric" : "metric",
    "count" : 2,
    "type" : "termFrequency",
    "dimension" : "dimension",
    "results" : [ {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    }, {
      "count" : 6,
      "lt" : 5.944895607614016,
      "gte" : 6.878052220127876,
      "value" : "value"
    } ]
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<AnalyticsUserDetailsQueryResponse> 
     */
    open class func postAnalyticsUsersDetailsQueryWithRequestBuilder(body: UserDetailsQuery) -> RequestBuilder<AnalyticsUserDetailsQueryResponse> {        
        let path = "/api/v2/analytics/users/details/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AnalyticsUserDetailsQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Query for user observations
     
     - parameter body: (body) query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAnalyticsUsersObservationsQuery(body: UserObservationQuery, completion: @escaping ((_ data: UserObservationQueryResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postAnalyticsUsersObservationsQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UserObservationQueryResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Query for user observations
     - POST /api/v2/analytics/users/observations/query
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    }, {
      "metric" : "metric",
      "stats" : {
        "max" : 0.8008281904610115,
        "count" : 1,
        "sum" : 2.3021358869347655,
        "p95" : 7,
        "countNegative" : 5,
        "numerator" : 3.616076749251911,
        "denominator" : 2.027123023002322,
        "target" : 4.145608029883936,
        "p99" : 1,
        "current" : 7.061401241503109,
        "min" : 6.027456183070403,
        "countPositive" : 5,
        "ratio" : 9.301444243932576
      },
      "qualifier" : "qualifier",
      "observations" : [ {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      }, {
        "usedRouting" : "Bullseye",
        "routingPriority" : 0,
        "conversationId" : "conversationId",
        "convertedTo" : "convertedTo",
        "requestedRoutingSkillIds" : [ "requestedRoutingSkillIds", "requestedRoutingSkillIds" ],
        "sessionId" : "sessionId",
        "userId" : "userId",
        "addressTo" : "addressTo",
        "observationDate" : "2000-01-23T04:56:07.000+00:00",
        "teamId" : "teamId",
        "requestedRoutings" : [ "Bullseye", "Bullseye" ],
        "convertedFrom" : "convertedFrom",
        "dnis" : "dnis",
        "scoredAgents" : [ {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        }, {
          "scoredAgentId" : "scoredAgentId",
          "agentScore" : 1
        } ],
        "requestedLanguageId" : "requestedLanguageId",
        "participantName" : "participantName",
        "addressFrom" : "addressFrom",
        "ani" : "ani",
        "direction" : "inbound"
      } ],
      "truncated" : true
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) query 

     - returns: RequestBuilder<UserObservationQueryResponse> 
     */
    open class func postAnalyticsUsersObservationsQueryWithRequestBuilder(body: UserObservationQuery) -> RequestBuilder<UserObservationQueryResponse> {        
        let path = "/api/v2/analytics/users/observations/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserObservationQueryResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Bulk-grant roles and divisions to a subject.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter subjectType: (query) what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectBulkadd(subjectId: String, body: RoleDivisionGrants, subjectType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectBulkaddWithRequestBuilder(subjectId: subjectId, body: body, subjectType: subjectType)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk-grant roles and divisions to a subject.
     - POST /api/v2/authorization/subjects/{subjectId}/bulkadd
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter subjectType: (query) what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectBulkaddWithRequestBuilder(subjectId: String, body: RoleDivisionGrants, subjectType: String? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/authorization/subjects/{subjectId}/bulkadd"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "subjectType": subjectType
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Bulk-remove grants from a subject.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectBulkremove(subjectId: String, body: RoleDivisionGrants, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectBulkremoveWithRequestBuilder(subjectId: subjectId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Bulk-remove grants from a subject.
     - POST /api/v2/authorization/subjects/{subjectId}/bulkremove
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectBulkremoveWithRequestBuilder(subjectId: String, body: RoleDivisionGrants) -> RequestBuilder<Void> {        
        var path = "/api/v2/authorization/subjects/{subjectId}/bulkremove"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Replace subject's roles and divisions with the exact list supplied in the request.
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter subjectType: (query) what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectBulkreplace(subjectId: String, body: RoleDivisionGrants, subjectType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectBulkreplaceWithRequestBuilder(subjectId: subjectId, body: body, subjectType: subjectType)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Replace subject's roles and divisions with the exact list supplied in the request.
     - POST /api/v2/authorization/subjects/{subjectId}/bulkreplace
     - This operation will not remove grants that are inherited from group membership. It will only set the grants directly applied to the subject.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter body: (body) Pairs of role and division IDs 
     - parameter subjectType: (query) what the type of the subject is (PC_GROUP, PC_USER or PC_OAUTH_CLIENT) (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectBulkreplaceWithRequestBuilder(subjectId: String, body: RoleDivisionGrants, subjectType: String? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/authorization/subjects/{subjectId}/bulkreplace"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "subjectType": subjectType
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    
    /**
     Make a grant of a role in a division
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division to which to make the grant 
     - parameter roleId: (path) the id of the role to grant 
     - parameter subjectType: (query) what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAuthorizationSubjectDivisionRole(subjectId: String, divisionId: String, roleId: String, subjectType: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: subjectId, divisionId: divisionId, roleId: roleId, subjectType: subjectType)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Make a grant of a role in a division
     - POST /api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter subjectId: (path) Subject ID (user or group) 
     - parameter divisionId: (path) the id of the division to which to make the grant 
     - parameter roleId: (path) the id of the role to grant 
     - parameter subjectType: (query) what the type of the subject is: PC_GROUP, PC_USER or PC_OAUTH_CLIENT (note: for cross-org authorization, please use the Organization Authorization endpoints) (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postAuthorizationSubjectDivisionRoleWithRequestBuilder(subjectId: String, divisionId: String, roleId: String, subjectType: String? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/authorization/subjects/{subjectId}/divisions/{divisionId}/roles/{roleId}"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let divisionIdPreEscape = "\(divisionId)"
        let divisionIdPostEscape = divisionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{divisionId}", with: divisionIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(roleId)"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "subjectType": subjectType
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Create mapping between external identifier and user. Limit 100 per entity.
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserExternalid(userId: String, body: UserExternalIdentifier, completion: @escaping ((_ data: [UserExternalIdentifier]?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserExternalidWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<[UserExternalIdentifier]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create mapping between external identifier and user. Limit 100 per entity.
     - POST /api/v2/users/{userId}/externalid
     - Authority Name and External key are case sensitive.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "externalKey" : "externalKey",
  "authorityName" : "authorityName",
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  

     - returns: RequestBuilder<[UserExternalIdentifier]> 
     */
    open class func postUserExternalidWithRequestBuilder(userId: String, body: UserExternalIdentifier) -> RequestBuilder<[UserExternalIdentifier]> {        
        var path = "/api/v2/users/{userId}/externalid"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UserExternalIdentifier]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Send an activation email to the user
     
     - parameter userId: (path) User ID 
     - parameter force: (query) Resend the invitation even if one is already outstanding (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserInvite(userId: String, force: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserInviteWithRequestBuilder(userId: userId, force: force)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Send an activation email to the user
     - POST /api/v2/users/{userId}/invite
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter force: (query) Resend the invitation even if one is already outstanding (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postUserInviteWithRequestBuilder(userId: String, force: Bool? = nil) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/invite"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "force": force
        ])

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Change a users password
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Password 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserPassword(userId: String, body: ChangePasswordRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserPasswordWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Change a users password
     - POST /api/v2/users/{userId}/password
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Password 

     - returns: RequestBuilder<Void> 
     */
    open class func postUserPasswordWithRequestBuilder(userId: String, body: ChangePasswordRequest) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/password"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Add routing language to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserRoutinglanguages(userId: String, body: UserRoutingLanguagePost, completion: @escaping ((_ data: UserRoutingLanguage?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserRoutinglanguagesWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingLanguage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add routing language to user
     - POST /api/v2/users/{userId}/routinglanguages
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "state" : "active",
  "languageUri" : "https://openapi-generator.tech",
  "proficiency" : 9.301444243932576
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Language 

     - returns: RequestBuilder<UserRoutingLanguage> 
     */
    open class func postUserRoutinglanguagesWithRequestBuilder(userId: String, body: UserRoutingLanguagePost) -> RequestBuilder<UserRoutingLanguage> {        
        var path = "/api/v2/users/{userId}/routinglanguages"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingLanguage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Add routing skill to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUserRoutingskills(userId: String, body: UserRoutingSkillPost, completion: @escaping ((_ data: UserRoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = postUserRoutingskillsWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Add routing skill to user
     - POST /api/v2/users/{userId}/routingskills
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "skillUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "active",
  "proficiency" : 7.061401241503109
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserRoutingSkill> 
     */
    open class func postUserRoutingskillsWithRequestBuilder(userId: String, body: UserRoutingSkillPost) -> RequestBuilder<UserRoutingSkill> {        
        var path = "/api/v2/users/{userId}/routingskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create user
     
     - parameter body: (body) User 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsers(body: CreateUser, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<User>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create user
     - POST /api/v2/users
     - If user creation is successful but the provided password is invalid or configuration fails, POST api/v2/users/{userId}/password can be used to re-attempt password configuration.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "addresses" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "acdAutoAnswer" : true,
  "routingStatus" : "{}",
  "title" : "title",
  "division" : "{}",
  "authorization" : "{}",
  "skills" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "station" : "{}",
  "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "active",
  "preferredName" : "preferredName",
  "department" : "department",
  "presence" : "{}",
  "lastTokenIssued" : {
    "dateIssued" : "2000-01-23T04:56:07.000+00:00"
  },
  "email" : "email",
  "images" : [ {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  }, {
    "imageUri" : "imageUri",
    "resolution" : "resolution"
  } ],
  "employerInfo" : {
    "employeeType" : "employeeType",
    "dateHire" : "dateHire",
    "employeeId" : "employeeId",
    "officialName" : "officialName"
  },
  "languages" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "active",
    "languageUri" : "https://openapi-generator.tech",
    "proficiency" : 9.301444243932576
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "conversationSummary" : "{}",
  "groups" : [ {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  }, {
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    }, {
      "extension" : "extension",
      "address" : "address",
      "display" : "display",
      "mediaType" : "PHONE",
      "type" : "GROUPRING"
    } ],
    "visibility" : "public",
    "memberCount" : 5,
    "selfUri" : "https://openapi-generator.tech",
    "description" : "description",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "owners" : [ null, null ],
    "rolesEnabled" : true,
    "type" : "official",
    "version" : 2,
    "rulesVisible" : true,
    "name" : "name",
    "id" : "id",
    "state" : "active"
  } ],
  "primaryContactInfo" : [ {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  }, {
    "extension" : "extension",
    "address" : "address",
    "countryCode" : "countryCode",
    "display" : "display",
    "integration" : "microsoftteams",
    "mediaType" : "PHONE",
    "type" : "PRIMARY"
  } ],
  "biography" : {
    "education" : [ {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    }, {
      "notes" : "notes",
      "school" : "school",
      "dateStart" : "2000-01-23",
      "dateEnd" : "2000-01-23",
      "fieldOfStudy" : "fieldOfStudy"
    } ],
    "hobbies" : [ "hobbies", "hobbies" ],
    "biography" : "biography",
    "interests" : [ "interests", "interests" ],
    "spouse" : "spouse"
  },
  "team" : "{}",
  "certifications" : [ "certifications", "certifications" ],
  "version" : 6,
  "outOfOffice" : "{}",
  "languagePreference" : "languagePreference",
  "profileSkills" : [ "profileSkills", "profileSkills" ],
  "chat" : {
    "jabberId" : "jabberId"
  },
  "name" : "name",
  "integrationPresence" : "{}",
  "locations" : [ {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  }, {
    "notes" : "notes",
    "coordinates" : {
      "key" : 1.4658129805029452
    },
    "locationDefinition" : {
      "images" : "images",
      "address" : {
        "zipcode" : "zipcode",
        "country" : "country",
        "city" : "city",
        "street1" : "street1",
        "countryName" : "countryName",
        "state" : "state",
        "street2" : "street2"
      },
      "notes" : "notes",
      "floorplanImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addressVerificationDetails" : "{}",
      "selfUri" : "https://openapi-generator.tech",
      "profileImage" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "emergencyNumber" : "{}",
      "version" : 5,
      "path" : [ "path", "path" ],
      "addressStored" : true,
      "name" : "name",
      "id" : "id",
      "contactUser" : "{}",
      "state" : "active",
      "addressVerified" : true
    },
    "id" : "id",
    "floorplanId" : "floorplanId"
  } ],
  "username" : "username",
  "geolocation" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) User 

     - returns: RequestBuilder<User> 
     */
    open class func postUsersWithRequestBuilder(body: CreateUser) -> RequestBuilder<User> {        
        let path = "/api/v2/users"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Retrieve aggregated development activity data
     
     - parameter body: (body) Aggregate Request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersDevelopmentActivitiesAggregatesQuery(body: DevelopmentActivityAggregateParam, completion: @escaping ((_ data: DevelopmentActivityAggregateResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersDevelopmentActivitiesAggregatesQueryWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<DevelopmentActivityAggregateResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve aggregated development activity data
     - POST /api/v2/users/development/activities/aggregates/query
     - Results are filtered based on the applicable permissions.
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "nActivities",
        "stats" : "{}"
      }, {
        "metric" : "nActivities",
        "stats" : "{}"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "nActivities",
        "stats" : "{}"
      }, {
        "metric" : "nActivities",
        "stats" : "{}"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  }, {
    "data" : [ {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "nActivities",
        "stats" : "{}"
      }, {
        "metric" : "nActivities",
        "stats" : "{}"
      } ]
    }, {
      "interval" : "interval",
      "metrics" : [ {
        "metric" : "nActivities",
        "stats" : "{}"
      }, {
        "metric" : "nActivities",
        "stats" : "{}"
      } ]
    } ],
    "group" : {
      "key" : "group"
    }
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Aggregate Request 

     - returns: RequestBuilder<DevelopmentActivityAggregateResponse> 
     */
    open class func postUsersDevelopmentActivitiesAggregatesQueryWithRequestBuilder(body: DevelopmentActivityAggregateParam) -> RequestBuilder<DevelopmentActivityAggregateResponse> {        
        let path = "/api/v2/users/development/activities/aggregates/query"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DevelopmentActivityAggregateResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Change your password
     
     - parameter body: (body) Password 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersMePassword(body: ChangeMyPasswordRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersMePasswordWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Change your password
     - POST /api/v2/users/me/password
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter body: (body) Password 

     - returns: RequestBuilder<Void> 
     */
    open class func postUsersMePasswordWithRequestBuilder(body: ChangeMyPasswordRequest) -> RequestBuilder<Void> {        
        let path = "/api/v2/users/me/password"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search users
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersSearch(body: UserSearchRequest, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersSearchWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search users
     - POST /api/v2/users/search
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func postUsersSearchWithRequestBuilder(body: UserSearchRequest) -> RequestBuilder<UsersSearchResponse> {        
        let path = "/api/v2/users/search"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Search users assigned to teams
     
     - parameter body: (body) Search request options 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postUsersSearchTeamsAssign(body: UserSearchRequest, completion: @escaping ((_ data: UsersSearchResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postUsersSearchTeamsAssignWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<UsersSearchResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Search users assigned to teams
     - POST /api/v2/users/search/teams/assign
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "pageCount" : 6,
  "types" : [ "types", "types" ],
  "pageNumber" : 5,
  "previousPage" : "previousPage",
  "nextPage" : "nextPage",
  "pageSize" : 1,
  "currentPage" : "currentPage",
  "results" : [ {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  }, {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  } ]
}, statusCode=200}]
     
     - parameter body: (body) Search request options 

     - returns: RequestBuilder<UsersSearchResponse> 
     */
    open class func postUsersSearchTeamsAssignWithRequestBuilder(body: UserSearchRequest) -> RequestBuilder<UsersSearchResponse> {        
        let path = "/api/v2/users/search/teams/assign"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UsersSearchResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update the user's max utilization settings.  Include only those media types requiring custom configuration.
     
     - parameter userId: (path) User ID 
     - parameter body: (body) utilization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putRoutingUserUtilization(userId: String, body: UtilizationRequest, completion: @escaping ((_ data: AgentMaxUtilizationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = putRoutingUserUtilizationWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<AgentMaxUtilizationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the user's max utilization settings.  Include only those media types requiring custom configuration.
     - PUT /api/v2/routing/users/{userId}/utilization
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "level" : "Agent",
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "interruptableMediaTypes", "interruptableMediaTypes" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 0
    }
  }
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) utilization 

     - returns: RequestBuilder<AgentMaxUtilizationResponse> 
     */
    open class func putRoutingUserUtilizationWithRequestBuilder(userId: String, body: UtilizationRequest) -> RequestBuilder<AgentMaxUtilizationResponse> {        
        var path = "/api/v2/routing/users/{userId}/utilization"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AgentMaxUtilizationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update a user's CallForwarding
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Call forwarding 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserCallforwarding(userId: String, body: CallForwarding, completion: @escaping ((_ data: CallForwarding?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserCallforwardingWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<CallForwarding>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a user's CallForwarding
     - PUT /api/v2/users/{userId}/callforwarding
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "phoneNumber" : "phoneNumber",
  "voicemail" : "PURECLOUD",
  "calls" : [ {
    "targets" : [ {
      "type" : "STATION",
      "value" : "value"
    }, {
      "type" : "STATION",
      "value" : "value"
    } ]
  }, {
    "targets" : [ {
      "type" : "STATION",
      "value" : "value"
    }, {
      "type" : "STATION",
      "value" : "value"
    } ]
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "modifiedDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "user" : {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  },
  "enabled" : true
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Call forwarding 

     - returns: RequestBuilder<CallForwarding> 
     */
    open class func putUserCallforwardingWithRequestBuilder(userId: String, body: CallForwarding) -> RequestBuilder<CallForwarding> {        
        var path = "/api/v2/users/{userId}/callforwarding"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CallForwarding>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update an OutOfOffice
     
     - parameter userId: (path) User ID 
     - parameter body: (body) The updated OutOffOffice 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserOutofoffice(userId: String, body: OutOfOffice, completion: @escaping ((_ data: OutOfOffice?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserOutofofficeWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<OutOfOffice>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update an OutOfOffice
     - PUT /api/v2/users/{userId}/outofoffice
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "endDate" : "2000-01-23T04:56:07.000+00:00",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "active" : true,
  "id" : "id",
  "user" : {
    "addresses" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "acdAutoAnswer" : true,
    "routingStatus" : "{}",
    "title" : "title",
    "division" : "{}",
    "authorization" : "{}",
    "skills" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "skillUri" : "https://openapi-generator.tech",
      "id" : "id",
      "state" : "active",
      "proficiency" : 7.061401241503109
    } ],
    "station" : "{}",
    "dateLastLogin" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "active",
    "preferredName" : "preferredName",
    "department" : "department",
    "presence" : "{}",
    "lastTokenIssued" : {
      "dateIssued" : "2000-01-23T04:56:07.000+00:00"
    },
    "email" : "email",
    "images" : [ {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    }, {
      "imageUri" : "imageUri",
      "resolution" : "resolution"
    } ],
    "employerInfo" : {
      "employeeType" : "employeeType",
      "dateHire" : "dateHire",
      "employeeId" : "employeeId",
      "officialName" : "officialName"
    },
    "languages" : [ {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    }, {
      "selfUri" : "https://openapi-generator.tech",
      "name" : "name",
      "id" : "id",
      "state" : "active",
      "languageUri" : "https://openapi-generator.tech",
      "proficiency" : 9.301444243932576
    } ],
    "selfUri" : "https://openapi-generator.tech",
    "conversationSummary" : "{}",
    "groups" : [ {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    }, {
      "images" : [ {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      }, {
        "imageUri" : "imageUri",
        "resolution" : "resolution"
      } ],
      "addresses" : [ {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      }, {
        "extension" : "extension",
        "address" : "address",
        "display" : "display",
        "mediaType" : "PHONE",
        "type" : "GROUPRING"
      } ],
      "visibility" : "public",
      "memberCount" : 5,
      "selfUri" : "https://openapi-generator.tech",
      "description" : "description",
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "owners" : [ null, null ],
      "rolesEnabled" : true,
      "type" : "official",
      "version" : 2,
      "rulesVisible" : true,
      "name" : "name",
      "id" : "id",
      "state" : "active"
    } ],
    "primaryContactInfo" : [ {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    }, {
      "extension" : "extension",
      "address" : "address",
      "countryCode" : "countryCode",
      "display" : "display",
      "integration" : "microsoftteams",
      "mediaType" : "PHONE",
      "type" : "PRIMARY"
    } ],
    "biography" : {
      "education" : [ {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      }, {
        "notes" : "notes",
        "school" : "school",
        "dateStart" : "2000-01-23",
        "dateEnd" : "2000-01-23",
        "fieldOfStudy" : "fieldOfStudy"
      } ],
      "hobbies" : [ "hobbies", "hobbies" ],
      "biography" : "biography",
      "interests" : [ "interests", "interests" ],
      "spouse" : "spouse"
    },
    "team" : "{}",
    "certifications" : [ "certifications", "certifications" ],
    "version" : 6,
    "outOfOffice" : "{}",
    "languagePreference" : "languagePreference",
    "profileSkills" : [ "profileSkills", "profileSkills" ],
    "chat" : {
      "jabberId" : "jabberId"
    },
    "name" : "name",
    "integrationPresence" : "{}",
    "locations" : [ {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    }, {
      "notes" : "notes",
      "coordinates" : {
        "key" : 1.4658129805029452
      },
      "locationDefinition" : {
        "images" : "images",
        "address" : {
          "zipcode" : "zipcode",
          "country" : "country",
          "city" : "city",
          "street1" : "street1",
          "countryName" : "countryName",
          "state" : "state",
          "street2" : "street2"
        },
        "notes" : "notes",
        "floorplanImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "addressVerificationDetails" : "{}",
        "selfUri" : "https://openapi-generator.tech",
        "profileImage" : [ {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        }, {
          "imageUri" : "imageUri",
          "resolution" : "resolution"
        } ],
        "emergencyNumber" : "{}",
        "version" : 5,
        "path" : [ "path", "path" ],
        "addressStored" : true,
        "name" : "name",
        "id" : "id",
        "contactUser" : "{}",
        "state" : "active",
        "addressVerified" : true
      },
      "id" : "id",
      "floorplanId" : "floorplanId"
    } ],
    "username" : "username",
    "geolocation" : "{}"
  },
  "startDate" : "2000-01-23T04:56:07.000+00:00",
  "indefinite" : true
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) The updated OutOffOffice 

     - returns: RequestBuilder<OutOfOffice> 
     */
    open class func putUserOutofofficeWithRequestBuilder(userId: String, body: OutOfOffice) -> RequestBuilder<OutOfOffice> {        
        var path = "/api/v2/users/{userId}/outofoffice"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutOfOffice>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update profile skills for a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skills 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserProfileskills(userId: String, body: [String], completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserProfileskillsWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<[String]>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update profile skills for a user
     - PUT /api/v2/users/{userId}/profileskills
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example="", statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skills 

     - returns: RequestBuilder<[String]> 
     */
    open class func putUserProfileskillsWithRequestBuilder(userId: String, body: [String]) -> RequestBuilder<[String]> {        
        var path = "/api/v2/users/{userId}/profileskills"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Sets the user's roles
     
     - parameter subjectId: (path) User ID 
     - parameter body: (body) List of roles 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoles(subjectId: String, body: [String], completion: @escaping ((_ data: UserAuthorization?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRolesWithRequestBuilder(subjectId: subjectId, body: body)
        requestBuilder.execute { (response: Response<UserAuthorization>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Sets the user's roles
     - PUT /api/v2/users/{subjectId}/roles
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "unusedRoles" : [ {
    "name" : "name",
    "id" : "id"
  }, {
    "name" : "name",
    "id" : "id"
  } ],
  "permissions" : [ "permissions", "permissions" ],
  "permissionPolicies" : [ {
    "policyDescription" : "policyDescription",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "SCALAR",
        "value" : "value"
      }, {
        "type" : "SCALAR",
        "value" : "value"
      } ],
      "variableName" : "variableName",
      "conjunction" : "AND",
      "terms" : [ null, null ],
      "operator" : "EQ"
    },
    "actionSetKey" : "actionSetKey",
    "namedResources" : [ "namedResources", "namedResources" ],
    "policyName" : "policyName",
    "entityName" : "entityName",
    "domain" : "domain",
    "allowConditions" : true,
    "id" : "id",
    "resourceCondition" : "resourceCondition",
    "actionSet" : [ "actionSet", "actionSet" ]
  }, {
    "policyDescription" : "policyDescription",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "SCALAR",
        "value" : "value"
      }, {
        "type" : "SCALAR",
        "value" : "value"
      } ],
      "variableName" : "variableName",
      "conjunction" : "AND",
      "terms" : [ null, null ],
      "operator" : "EQ"
    },
    "actionSetKey" : "actionSetKey",
    "namedResources" : [ "namedResources", "namedResources" ],
    "policyName" : "policyName",
    "entityName" : "entityName",
    "domain" : "domain",
    "allowConditions" : true,
    "id" : "id",
    "resourceCondition" : "resourceCondition",
    "actionSet" : [ "actionSet", "actionSet" ]
  } ],
  "roles" : [ {
    "name" : "name",
    "id" : "id"
  }, {
    "name" : "name",
    "id" : "id"
  } ]
}, statusCode=200}]
     
     - parameter subjectId: (path) User ID 
     - parameter body: (body) List of roles 

     - returns: RequestBuilder<UserAuthorization> 
     */
    open class func putUserRolesWithRequestBuilder(subjectId: String, body: [String]) -> RequestBuilder<UserAuthorization> {        
        var path = "/api/v2/users/{subjectId}/roles"
        let subjectIdPreEscape = "\(subjectId)"
        let subjectIdPostEscape = subjectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subjectId}", with: subjectIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserAuthorization>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     Update routing skill proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingskill(userId: String, skillId: String, body: UserRoutingSkill, completion: @escaping ((_ data: UserRoutingSkill?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingskillWithRequestBuilder(userId: userId, skillId: skillId, body: body)
        requestBuilder.execute { (response: Response<UserRoutingSkill>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update routing skill proficiency or state.
     - PUT /api/v2/users/{userId}/routingskills/{skillId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "skillUri" : "https://openapi-generator.tech",
  "id" : "id",
  "state" : "active",
  "proficiency" : 7.061401241503109
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path) skillId 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserRoutingSkill> 
     */
    open class func putUserRoutingskillWithRequestBuilder(userId: String, skillId: String, body: UserRoutingSkill) -> RequestBuilder<UserRoutingSkill> {        
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let skillIdPreEscape = "\(skillId)"
        let skillIdPostEscape = skillIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{skillId}", with: skillIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserRoutingSkill>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Replace all routing skills assigned to a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingskillsBulk(userId: String, body: [UserRoutingSkillPost], completion: @escaping ((_ data: UserSkillEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingskillsBulkWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserSkillEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Replace all routing skills assigned to a user
     - PUT /api/v2/users/{userId}/routingskills/bulk
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  }, {
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "skillUri" : "https://openapi-generator.tech",
    "id" : "id",
    "state" : "active",
    "proficiency" : 7.061401241503109
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill 

     - returns: RequestBuilder<UserSkillEntityListing> 
     */
    open class func putUserRoutingskillsBulkWithRequestBuilder(userId: String, body: [UserRoutingSkillPost]) -> RequestBuilder<UserSkillEntityListing> {        
        var path = "/api/v2/users/{userId}/routingskills/bulk"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserSkillEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update the routing status of a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Routing Status 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserRoutingstatus(userId: String, body: RoutingStatus, completion: @escaping ((_ data: RoutingStatus?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserRoutingstatusWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<RoutingStatus>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update the routing status of a user
     - PUT /api/v2/users/{userId}/routingstatus
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "startTime" : "2000-01-23T04:56:07.000+00:00",
  "userId" : "userId",
  "status" : "OFF_QUEUE"
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Routing Status 

     - returns: RequestBuilder<RoutingStatus> 
     */
    open class func putUserRoutingstatusWithRequestBuilder(userId: String, body: RoutingStatus) -> RequestBuilder<RoutingStatus> {        
        var path = "/api/v2/users/{userId}/routingstatus"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RoutingStatus>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Update user state information.
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserState(userId: String, body: UserState, completion: @escaping ((_ data: UserState?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserStateWithRequestBuilder(userId: userId, body: body)
        requestBuilder.execute { (response: Response<UserState>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update user state information.
     - PUT /api/v2/users/{userId}/state
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "stateChangeReason" : "Voluntary",
  "stateChangeDate" : "2000-01-23T04:56:07.000+00:00",
  "state" : "active",
  "version" : 0
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User 

     - returns: RequestBuilder<UserState> 
     */
    open class func putUserStateWithRequestBuilder(userId: String, body: UserState) -> RequestBuilder<UserState> {        
        var path = "/api/v2/users/{userId}/state"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UserState>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Set associated station
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path) stationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserStationAssociatedstationStationId(userId: String, stationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserStationAssociatedstationStationIdWithRequestBuilder(userId: userId, stationId: stationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Set associated station
     - PUT /api/v2/users/{userId}/station/associatedstation/{stationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path) stationId 

     - returns: RequestBuilder<Void> 
     */
    open class func putUserStationAssociatedstationStationIdWithRequestBuilder(userId: String, stationId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/station/associatedstation/{stationId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let stationIdPreEscape = "\(stationId)"
        let stationIdPostEscape = stationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stationId}", with: stationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    /**
     Set default station
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path) stationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserStationDefaultstationStationId(userId: String, stationId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserStationDefaultstationStationIdWithRequestBuilder(userId: userId, stationId: stationId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Set default station
     - PUT /api/v2/users/{userId}/station/defaultstation/{stationId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path) stationId 

     - returns: RequestBuilder<Void> 
     */
    open class func putUserStationDefaultstationStationIdWithRequestBuilder(userId: String, stationId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/users/{userId}/station/defaultstation/{stationId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let stationIdPreEscape = "\(stationId)"
        let stationIdPostEscape = stationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stationId}", with: stationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    
    
    /**
     Update a verifier
     
     - parameter userId: (path) User ID 
     - parameter verifierId: (path) Verifier ID 
     - parameter body: (body) Verifier Update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserVerifier(userId: String, verifierId: String, body: UpdateVerifierRequest, completion: @escaping ((_ data: Verifier?,_ error: Error?) -> Void)) {
        let requestBuilder = putUserVerifierWithRequestBuilder(userId: userId, verifierId: verifierId, body: body)
        requestBuilder.execute { (response: Response<Verifier>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a verifier
     - PUT /api/v2/users/{userId}/verifiers/{verifierId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "default" : true,
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "enabled" : true
}, statusCode=200}]
     
     - parameter userId: (path) User ID 
     - parameter verifierId: (path) Verifier ID 
     - parameter body: (body) Verifier Update 

     - returns: RequestBuilder<Verifier> 
     */
    open class func putUserVerifierWithRequestBuilder(userId: String, verifierId: String, body: UpdateVerifierRequest) -> RequestBuilder<Verifier> {        
        var path = "/api/v2/users/{userId}/verifiers/{verifierId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let verifierIdPreEscape = "\(verifierId)"
        let verifierIdPostEscape = verifierIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{verifierId}", with: verifierIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Verifier>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
