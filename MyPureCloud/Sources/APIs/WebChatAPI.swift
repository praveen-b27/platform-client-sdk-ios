//
// WebChatAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class WebChatAPI {
    
    /**
     Delete a WebChat deployment
     
     - parameter deploymentId: (path) Deployment Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWebchatDeployment(deploymentId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWebchatDeploymentWithRequestBuilder(deploymentId: deploymentId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete a WebChat deployment
     - DELETE /api/v2/webchat/deployments/{deploymentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     
     - parameter deploymentId: (path) Deployment Id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWebchatDeploymentWithRequestBuilder(deploymentId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/webchat/deployments/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    
    /**
     Remove a member from a chat conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter memberId: (path) memberId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWebchatGuestConversationMember(conversationId: String, memberId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWebchatGuestConversationMemberWithRequestBuilder(conversationId: conversationId, memberId: memberId)
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove a member from a chat conversation
     - DELETE /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     
     - parameter conversationId: (path) conversationId 
     - parameter memberId: (path) memberId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWebchatGuestConversationMemberWithRequestBuilder(conversationId: String, memberId: String) -> RequestBuilder<Void> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    /**
     Remove WebChat deployment settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWebchatSettings(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        let requestBuilder = deleteWebchatSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<Void>?, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Remove WebChat deployment settings
     - DELETE /api/v2/webchat/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWebchatSettingsWithRequestBuilder() -> RequestBuilder<Void> {        
        let path = "/api/v2/webchat/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", url: url!, body: body)
    }

    
    /**
     Get a WebChat deployment
     
     - parameter deploymentId: (path) Deployment Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebchatDeployment(deploymentId: String, completion: @escaping ((_ data: WebChatDeployment?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebchatDeploymentWithRequestBuilder(deploymentId: deploymentId)
        requestBuilder.execute { (response: Response<WebChatDeployment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a WebChat deployment
     - GET /api/v2/webchat/deployments/{deploymentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "authenticationRequired" : true,
  "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
  "webChatConfig" : {
    "webChatSkin" : "basic"
  },
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "disabled" : true,
  "id" : "id",
  "authenticationUrl" : "authenticationUrl",
  "flow" : "{}"
}, statusCode=200}]
     
     - parameter deploymentId: (path) Deployment Id 

     - returns: RequestBuilder<WebChatDeployment> 
     */
    open class func getWebchatDeploymentWithRequestBuilder(deploymentId: String) -> RequestBuilder<WebChatDeployment> {        
        var path = "/api/v2/webchat/deployments/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatDeployment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     List WebChat deployments
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebchatDeployments(completion: @escaping ((_ data: WebChatDeploymentEntityListing?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebchatDeploymentsWithRequestBuilder()
        requestBuilder.execute { (response: Response<WebChatDeploymentEntityListing>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     List WebChat deployments
     - GET /api/v2/webchat/deployments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "entities" : [ {
    "authenticationRequired" : true,
    "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
    "webChatConfig" : {
      "webChatSkin" : "basic"
    },
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "disabled" : true,
    "id" : "id",
    "authenticationUrl" : "authenticationUrl",
    "flow" : "{}"
  }, {
    "authenticationRequired" : true,
    "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
    "webChatConfig" : {
      "webChatSkin" : "basic"
    },
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "description" : "description",
    "disabled" : true,
    "id" : "id",
    "authenticationUrl" : "authenticationUrl",
    "flow" : "{}"
  } ],
  "selfUri" : "https://openapi-generator.tech"
}, statusCode=200}]

     - returns: RequestBuilder<WebChatDeploymentEntityListing> 
     */
    open class func getWebchatDeploymentsWithRequestBuilder() -> RequestBuilder<WebChatDeploymentEntityListing> {        
        let path = "/api/v2/webchat/deployments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatDeploymentEntityListing>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a media request in the conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter mediaRequestId: (path) mediaRequestId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebchatGuestConversationMediarequest(conversationId: String, mediaRequestId: String, completion: @escaping ((_ data: WebChatGuestMediaRequest?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebchatGuestConversationMediarequestWithRequestBuilder(conversationId: conversationId, mediaRequestId: mediaRequestId)
        requestBuilder.execute { (response: Response<WebChatGuestMediaRequest>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a media request in the conversation
     - GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     - examples: [{contentType=application/json, example={
  "types" : [ "COBROWSE", "COBROWSE" ],
  "communicationId" : "communicationId",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "state" : "PENDING",
  "securityKey" : "securityKey"
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 
     - parameter mediaRequestId: (path) mediaRequestId 

     - returns: RequestBuilder<WebChatGuestMediaRequest> 
     */
    open class func getWebchatGuestConversationMediarequestWithRequestBuilder(conversationId: String, mediaRequestId: String) -> RequestBuilder<WebChatGuestMediaRequest> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let mediaRequestIdPreEscape = "\(mediaRequestId)"
        let mediaRequestIdPostEscape = mediaRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mediaRequestId}", with: mediaRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatGuestMediaRequest>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    /**
     Get all media requests to the guest in the conversation
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebchatGuestConversationMediarequests(conversationId: String, completion: @escaping ((_ data: WebChatGuestMediaRequestEntityList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebchatGuestConversationMediarequestsWithRequestBuilder(conversationId: conversationId)
        requestBuilder.execute { (response: Response<WebChatGuestMediaRequestEntityList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get all media requests to the guest in the conversation
     - GET /api/v2/webchat/guest/conversations/{conversationId}/mediarequests
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     - examples: [{contentType=application/json, example={
  "entities" : [ {
    "types" : [ "COBROWSE", "COBROWSE" ],
    "communicationId" : "communicationId",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "PENDING",
    "securityKey" : "securityKey"
  }, {
    "types" : [ "COBROWSE", "COBROWSE" ],
    "communicationId" : "communicationId",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "state" : "PENDING",
    "securityKey" : "securityKey"
  } ]
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<WebChatGuestMediaRequestEntityList> 
     */
    open class func getWebchatGuestConversationMediarequestsWithRequestBuilder(conversationId: String) -> RequestBuilder<WebChatGuestMediaRequestEntityList> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatGuestMediaRequestEntityList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a web chat conversation member
     
     - parameter conversationId: (path) conversationId 
     - parameter memberId: (path) memberId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebchatGuestConversationMember(conversationId: String, memberId: String, completion: @escaping ((_ data: WebChatMemberInfo?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebchatGuestConversationMemberWithRequestBuilder(conversationId: conversationId, memberId: memberId)
        requestBuilder.execute { (response: Response<WebChatMemberInfo>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a web chat conversation member
     - GET /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     - examples: [{contentType=application/json, example={
  "lastName" : "lastName",
  "role" : "AGENT",
  "displayName" : "displayName",
  "customFields" : {
    "key" : "customFields"
  },
  "avatarImageUrl" : "https://openapi-generator.tech",
  "firstName" : "firstName",
  "phoneNumber" : "phoneNumber",
  "joinDate" : "2000-01-23T04:56:07.000+00:00",
  "leaveDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "state" : "CONNECTED",
  "authenticatedGuest" : true,
  "email" : "email"
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 
     - parameter memberId: (path) memberId 

     - returns: RequestBuilder<WebChatMemberInfo> 
     */
    open class func getWebchatGuestConversationMemberWithRequestBuilder(conversationId: String, memberId: String) -> RequestBuilder<WebChatMemberInfo> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatMemberInfo>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    /**
     Get the members of a chat conversation.
     
     - parameter conversationId: (path) conversationId 
     - parameter pageSize: (query) The number of entries to return per page, or omitted for the default. (optional)
     - parameter pageNumber: (query) The page number to return, or omitted for the first page. (optional)
     - parameter excludeDisconnectedMembers: (query) If true, the results will not contain members who have a DISCONNECTED state. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebchatGuestConversationMembers(conversationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, excludeDisconnectedMembers: Bool? = nil, completion: @escaping ((_ data: WebChatMemberInfoEntityList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebchatGuestConversationMembersWithRequestBuilder(conversationId: conversationId, pageSize: pageSize, pageNumber: pageNumber, excludeDisconnectedMembers: excludeDisconnectedMembers)
        requestBuilder.execute { (response: Response<WebChatMemberInfoEntityList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the members of a chat conversation.
     - GET /api/v2/webchat/guest/conversations/{conversationId}/members
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "pageCount" : 5,
  "pageNumber" : 6,
  "entities" : [ {
    "lastName" : "lastName",
    "role" : "AGENT",
    "displayName" : "displayName",
    "customFields" : {
      "key" : "customFields"
    },
    "avatarImageUrl" : "https://openapi-generator.tech",
    "firstName" : "firstName",
    "phoneNumber" : "phoneNumber",
    "joinDate" : "2000-01-23T04:56:07.000+00:00",
    "leaveDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "CONNECTED",
    "authenticatedGuest" : true,
    "email" : "email"
  }, {
    "lastName" : "lastName",
    "role" : "AGENT",
    "displayName" : "displayName",
    "customFields" : {
      "key" : "customFields"
    },
    "avatarImageUrl" : "https://openapi-generator.tech",
    "firstName" : "firstName",
    "phoneNumber" : "phoneNumber",
    "joinDate" : "2000-01-23T04:56:07.000+00:00",
    "leaveDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "state" : "CONNECTED",
    "authenticatedGuest" : true,
    "email" : "email"
  } ],
  "firstUri" : "https://openapi-generator.tech",
  "lastUri" : "https://openapi-generator.tech",
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0,
  "nextUri" : "https://openapi-generator.tech",
  "previousUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 
     - parameter pageSize: (query) The number of entries to return per page, or omitted for the default. (optional)
     - parameter pageNumber: (query) The page number to return, or omitted for the first page. (optional)
     - parameter excludeDisconnectedMembers: (query) If true, the results will not contain members who have a DISCONNECTED state. (optional)

     - returns: RequestBuilder<WebChatMemberInfoEntityList> 
     */
    open class func getWebchatGuestConversationMembersWithRequestBuilder(conversationId: String, pageSize: Int? = nil, pageNumber: Int? = nil, excludeDisconnectedMembers: Bool? = nil) -> RequestBuilder<WebChatMemberInfoEntityList> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/members"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "excludeDisconnectedMembers": excludeDisconnectedMembers
        ])

        let requestBuilder: RequestBuilder<WebChatMemberInfoEntityList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    /**
     Get a web chat conversation message
     
     - parameter conversationId: (path) conversationId 
     - parameter messageId: (path) messageId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebchatGuestConversationMessage(conversationId: String, messageId: String, completion: @escaping ((_ data: WebChatMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebchatGuestConversationMessageWithRequestBuilder(conversationId: conversationId, messageId: messageId)
        requestBuilder.execute { (response: Response<WebChatMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get a web chat conversation message
     - GET /api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     - examples: [{contentType=application/json, example={
  "bodyType" : "standard",
  "sender" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "body" : "body",
  "conversation" : "{}",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 
     - parameter messageId: (path) messageId 

     - returns: RequestBuilder<WebChatMessage> 
     */
    open class func getWebchatGuestConversationMessageWithRequestBuilder(conversationId: String, messageId: String) -> RequestBuilder<WebChatMessage> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let messageIdPreEscape = "\(messageId)"
        let messageIdPostEscape = messageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{messageId}", with: messageIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    
    public enum SortOrder_getWebchatGuestConversationMessages: String { 
        case ascending = "ascending"
        case descending = "descending"
    }

    
    
    /**
     Get the messages of a chat conversation.
     
     - parameter conversationId: (path) conversationId 
     - parameter after: (query) If available, get the messages chronologically after the id of this message (optional)
     - parameter before: (query) If available, get the messages chronologically before the id of this message (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter maxResults: (query) Limit the returned number of messages, up to a maximum of 100 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebchatGuestConversationMessages(conversationId: String, after: String? = nil, before: String? = nil, sortOrder: SortOrder_getWebchatGuestConversationMessages? = nil, maxResults: Int? = nil, completion: @escaping ((_ data: WebChatMessageEntityList?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebchatGuestConversationMessagesWithRequestBuilder(conversationId: conversationId, after: after, before: before, sortOrder: sortOrder, maxResults: maxResults)
        requestBuilder.execute { (response: Response<WebChatMessageEntityList>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get the messages of a chat conversation.
     - GET /api/v2/webchat/guest/conversations/{conversationId}/messages
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     - examples: [{contentType=application/json, example={
  "next" : "next",
  "previousPage" : "previousPage",
  "entities" : [ {
    "bodyType" : "standard",
    "sender" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "body" : "body",
    "conversation" : "{}",
    "timestamp" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "bodyType" : "standard",
    "sender" : "{}",
    "selfUri" : "https://openapi-generator.tech",
    "name" : "name",
    "id" : "id",
    "body" : "body",
    "conversation" : "{}",
    "timestamp" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "selfUri" : "https://openapi-generator.tech",
  "pageSize" : 0
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 
     - parameter after: (query) If available, get the messages chronologically after the id of this message (optional)
     - parameter before: (query) If available, get the messages chronologically before the id of this message (optional)
     - parameter sortOrder: (query) Sort order (optional)
     - parameter maxResults: (query) Limit the returned number of messages, up to a maximum of 100 (optional)

     - returns: RequestBuilder<WebChatMessageEntityList> 
     */
    open class func getWebchatGuestConversationMessagesWithRequestBuilder(conversationId: String, after: String? = nil, before: String? = nil, sortOrder: SortOrder_getWebchatGuestConversationMessages? = nil, maxResults: Int? = nil) -> RequestBuilder<WebChatMessageEntityList> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/messages"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after, 
            "before": before, 
            "sortOrder": sortOrder?.rawValue, 
            "maxResults": maxResults?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<WebChatMessageEntityList>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    /**
     Get WebChat deployment settings
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWebchatSettings(completion: @escaping ((_ data: WebChatSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = getWebchatSettingsWithRequestBuilder()
        requestBuilder.execute { (response: Response<WebChatSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Get WebChat deployment settings
     - GET /api/v2/webchat/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "requireDeployment" : true
}, statusCode=200}]

     - returns: RequestBuilder<WebChatSettings> 
     */
    open class func getWebchatSettingsWithRequestBuilder() -> RequestBuilder<WebChatSettings> {        
        let path = "/api/v2/webchat/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", url: url!, body: body)
    }

    
    
    
    /**
     Update a media request in the conversation, setting the state to ACCEPTED/DECLINED/ERRORED
     
     - parameter conversationId: (path) conversationId 
     - parameter mediaRequestId: (path) mediaRequestId 
     - parameter body: (body) Request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchWebchatGuestConversationMediarequest(conversationId: String, mediaRequestId: String, body: WebChatGuestMediaRequest, completion: @escaping ((_ data: WebChatGuestMediaRequest?,_ error: Error?) -> Void)) {
        let requestBuilder = patchWebchatGuestConversationMediarequestWithRequestBuilder(conversationId: conversationId, mediaRequestId: mediaRequestId, body: body)
        requestBuilder.execute { (response: Response<WebChatGuestMediaRequest>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a media request in the conversation, setting the state to ACCEPTED/DECLINED/ERRORED
     - PATCH /api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     - examples: [{contentType=application/json, example={
  "types" : [ "COBROWSE", "COBROWSE" ],
  "communicationId" : "communicationId",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "state" : "PENDING",
  "securityKey" : "securityKey"
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 
     - parameter mediaRequestId: (path) mediaRequestId 
     - parameter body: (body) Request 

     - returns: RequestBuilder<WebChatGuestMediaRequest> 
     */
    open class func patchWebchatGuestConversationMediarequestWithRequestBuilder(conversationId: String, mediaRequestId: String, body: WebChatGuestMediaRequest) -> RequestBuilder<WebChatGuestMediaRequest> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let mediaRequestIdPreEscape = "\(mediaRequestId)"
        let mediaRequestIdPostEscape = mediaRequestIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mediaRequestId}", with: mediaRequestIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatGuestMediaRequest>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", url: url!, body: body)
    }

    
    /**
     Create WebChat deployment
     
     - parameter body: (body) Deployment 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebchatDeployments(body: WebChatDeployment, completion: @escaping ((_ data: WebChatDeployment?,_ error: Error?) -> Void)) {
        let requestBuilder = postWebchatDeploymentsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WebChatDeployment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create WebChat deployment
     - POST /api/v2/webchat/deployments
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "authenticationRequired" : true,
  "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
  "webChatConfig" : {
    "webChatSkin" : "basic"
  },
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "disabled" : true,
  "id" : "id",
  "authenticationUrl" : "authenticationUrl",
  "flow" : "{}"
}, statusCode=200}]
     
     - parameter body: (body) Deployment 

     - returns: RequestBuilder<WebChatDeployment> 
     */
    open class func postWebchatDeploymentsWithRequestBuilder(body: WebChatDeployment) -> RequestBuilder<WebChatDeployment> {        
        let path = "/api/v2/webchat/deployments"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatDeployment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    
    /**
     Send a message in a chat conversation.
     
     - parameter conversationId: (path) conversationId 
     - parameter memberId: (path) memberId 
     - parameter body: (body) Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebchatGuestConversationMemberMessages(conversationId: String, memberId: String, body: CreateWebChatMessageRequest, completion: @escaping ((_ data: WebChatMessage?,_ error: Error?) -> Void)) {
        let requestBuilder = postWebchatGuestConversationMemberMessagesWithRequestBuilder(conversationId: conversationId, memberId: memberId, body: body)
        requestBuilder.execute { (response: Response<WebChatMessage>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Send a message in a chat conversation.
     - POST /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/messages
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     - examples: [{contentType=application/json, example={
  "bodyType" : "standard",
  "sender" : "{}",
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "id" : "id",
  "body" : "body",
  "conversation" : "{}",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 
     - parameter memberId: (path) memberId 
     - parameter body: (body) Message 

     - returns: RequestBuilder<WebChatMessage> 
     */
    open class func postWebchatGuestConversationMemberMessagesWithRequestBuilder(conversationId: String, memberId: String, body: CreateWebChatMessageRequest) -> RequestBuilder<WebChatMessage> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/messages"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatMessage>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Send a typing-indicator in a chat conversation.
     
     - parameter conversationId: (path) conversationId 
     - parameter memberId: (path) memberId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebchatGuestConversationMemberTyping(conversationId: String, memberId: String, completion: @escaping ((_ data: WebChatTyping?,_ error: Error?) -> Void)) {
        let requestBuilder = postWebchatGuestConversationMemberTypingWithRequestBuilder(conversationId: conversationId, memberId: memberId)
        requestBuilder.execute { (response: Response<WebChatTyping>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Send a typing-indicator in a chat conversation.
     - POST /api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/typing
     - API Key:
       - type: apiKey Authorization 
       - name: Guest Chat JWT
     - examples: [{contentType=application/json, example={
  "sender" : "{}",
  "id" : "id",
  "conversation" : "{}",
  "timestamp" : "2000-01-23T04:56:07.000+00:00"
}, statusCode=200}]
     
     - parameter conversationId: (path) conversationId 
     - parameter memberId: (path) memberId 

     - returns: RequestBuilder<WebChatTyping> 
     */
    open class func postWebchatGuestConversationMemberTypingWithRequestBuilder(conversationId: String, memberId: String) -> RequestBuilder<WebChatTyping> {        
        var path = "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/typing"
        let conversationIdPreEscape = "\(conversationId)"
        let conversationIdPostEscape = conversationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{conversationId}", with: conversationIdPostEscape, options: .literal, range: nil)
        let memberIdPreEscape = "\(memberId)"
        let memberIdPostEscape = memberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{memberId}", with: memberIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body: Data? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatTyping>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    /**
     Create an ACD chat conversation from an external customer.
     
     - parameter body: (body) CreateConversationRequest 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWebchatGuestConversations(body: CreateWebChatConversationRequest, completion: @escaping ((_ data: CreateWebChatConversationResponse?,_ error: Error?) -> Void)) {
        let requestBuilder = postWebchatGuestConversationsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<CreateWebChatConversationResponse>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Create an ACD chat conversation from an external customer.
     - POST /api/v2/webchat/guest/conversations
     - This endpoint will create a new ACD Chat conversation under the specified Chat Deployment.  The conversation will begin with a guest member in it (with a role=CUSTOMER) according to the customer information that is supplied. If the guest member is authenticated, the 'memberAuthToken' field should include his JWT as generated by the 'POST /api/v2/signeddata' resource; if the guest member is anonymous (and the Deployment permits it) this field can be omitted.  The returned data includes the IDs of the conversation created, along with a newly-create JWT token that you can supply to all future endpoints as authentication to perform operations against that conversation. After successfully creating a conversation, you should connect a websocket to the event stream named in the 'eventStreamUri' field of the response; the conversation is not routed until the event stream is attached.
     - examples: [{contentType=application/json, example={
  "jwt" : "jwt",
  "member" : "{}",
  "id" : "id",
  "eventStreamUri" : "https://openapi-generator.tech"
}, statusCode=200}]
     
     - parameter body: (body) CreateConversationRequest 

     - returns: RequestBuilder<CreateWebChatConversationResponse> 
     */
    open class func postWebchatGuestConversationsWithRequestBuilder(body: CreateWebChatConversationRequest) -> RequestBuilder<CreateWebChatConversationResponse> {        
        let path = "/api/v2/webchat/guest/conversations"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CreateWebChatConversationResponse>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", url: url!, body: body)
    }

    
    
    /**
     Update a WebChat deployment
     
     - parameter deploymentId: (path) Deployment Id 
     - parameter body: (body) Deployment 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putWebchatDeployment(deploymentId: String, body: WebChatDeployment, completion: @escaping ((_ data: WebChatDeployment?,_ error: Error?) -> Void)) {
        let requestBuilder = putWebchatDeploymentWithRequestBuilder(deploymentId: deploymentId, body: body)
        requestBuilder.execute { (response: Response<WebChatDeployment>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update a WebChat deployment
     - PUT /api/v2/webchat/deployments/{deploymentId}
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "authenticationRequired" : true,
  "allowedDomains" : [ "allowedDomains", "allowedDomains" ],
  "webChatConfig" : {
    "webChatSkin" : "basic"
  },
  "selfUri" : "https://openapi-generator.tech",
  "name" : "name",
  "description" : "description",
  "disabled" : true,
  "id" : "id",
  "authenticationUrl" : "authenticationUrl",
  "flow" : "{}"
}, statusCode=200}]
     
     - parameter deploymentId: (path) Deployment Id 
     - parameter body: (body) Deployment 

     - returns: RequestBuilder<WebChatDeployment> 
     */
    open class func putWebchatDeploymentWithRequestBuilder(deploymentId: String, body: WebChatDeployment) -> RequestBuilder<WebChatDeployment> {        
        var path = "/api/v2/webchat/deployments/{deploymentId}"
        let deploymentIdPreEscape = "\(deploymentId)"
        let deploymentIdPostEscape = deploymentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentId}", with: deploymentIdPostEscape, options: .literal, range: nil)
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatDeployment>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

    
    /**
     Update WebChat deployment settings
     
     - parameter body: (body) webChatSettings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putWebchatSettings(body: WebChatSettings, completion: @escaping ((_ data: WebChatSettings?,_ error: Error?) -> Void)) {
        let requestBuilder = putWebchatSettingsWithRequestBuilder(body: body)
        requestBuilder.execute { (response: Response<WebChatSettings>?, error) -> Void in
            do {
                if let e = error {
                    completion(nil, e)
                } else if let r = response {
                    try requestBuilder.decode(r)
                    completion(response?.body, error)
                } else {
                    completion(nil, error)
                }
            } catch {
                completion(nil, error)
            }
        }
    }

    /**
     Update WebChat deployment settings
     - PUT /api/v2/webchat/settings
     - OAuth:
       - type: oauth2
       - name: PureCloud OAuth
     - examples: [{contentType=application/json, example={
  "requireDeployment" : true
}, statusCode=200}]
     
     - parameter body: (body) webChatSettings 

     - returns: RequestBuilder<WebChatSettings> 
     */
    open class func putWebchatSettingsWithRequestBuilder(body: WebChatSettings) -> RequestBuilder<WebChatSettings> {        
        let path = "/api/v2/webchat/settings"
        let URLString = PureCloudPlatformClientV2API.basePath + path
        let body = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WebChatSettings>.Type = PureCloudPlatformClientV2API.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", url: url!, body: body)
    }

}
